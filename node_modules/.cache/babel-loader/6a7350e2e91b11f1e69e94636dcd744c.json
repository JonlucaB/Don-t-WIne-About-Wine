{"ast":null,"code":"var each = require('../../internals/each');\n\nvar has = require('../../internals/has');\n/**\n * Simplex Noise in 2D, 3D and 4D. Based on the example code of this paper:\n * http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n * @author Stefan Gustavson, Linkping University, Sweden (stegu at itn dot liu dot se)\n * Slight optimizations & restructuring by\n * @author Karsten Schmidt (info at toxi dot co dot uk)\n * javascript by\n * @author Kyle Phillips (kyle at haptic-data dot com)\n*/\n\n\nvar _SQRT3 = Math.sqrt(3.0),\n    _SQRT5 = Math.sqrt(5.0);\n/**\n * Skewing and unskewing factors for 2D, 3D and 4D, some of them\n * pre-multiplied.\n */\n\n\nvar _F2 = 0.5 * (_SQRT3 - 1.0),\n    _G2 = (3.0 - _SQRT3) / 6.0,\n    _G22 = _G2 * 2.0 - 1,\n    _F3 = 1.0 / 3.0,\n    _G3 = 1.0 / 6.0,\n    _F4 = (_SQRT5 - 1.0) / 4.0,\n    _G4 = (5.0 - _SQRT5) / 20.0,\n    _G42 = _G4 * 2.0,\n    _G43 = _G4 * 3.0,\n    _G44 = _G4 * 4.0 - 1.0;\n/**\n* Gradient vectors for 3D (pointing to mid points of all edges of a unit\n* cube)\n*/\n\n\nvar _grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\n/**\n* Gradient vectors for 4D (pointing to mid points of all edges of a unit 4D\n* hypercube)\n*/\n\nvar _grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]];\n/**\n * Permutation table\n */\n\nvar _p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\n/**\n * To remove the need for index wrapping, double the permutation table\n * length\n */\n\nvar _perm = function () {\n  var _per = has.typedArrays() ? new Int32Array(0x200) : [];\n\n  for (var i = 0; i < 0x200; i++) {\n    _per[i] = _p[i & 0xff];\n  }\n\n  return _per;\n}();\n/**\n * A lookup table to traverse the simplex around a given point in 4D.\n * Details can be found where this table is used, in the 4D noise method.\n */\n\n\nvar _simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]; //if this environment supports typed arrays\n//convert our arrays over for massive perf gain!\n\nif (has.typedArrays()) {\n  var makeEachTypedArray = function (arr) {\n    var _g = [];\n    each(arr, function (g) {\n      _g.push(new Int32Array(g));\n    });\n    return _g;\n  };\n\n  _grad3 = makeEachTypedArray(_grad3);\n  _grad4 = makeEachTypedArray(_grad4);\n  _p = new Int32Array(_p);\n  _simplex = makeEachTypedArray(_simplex);\n  this.testObjs = {\n    _grad3: _grad3,\n    _grad4: _grad4,\n    _p: _p,\n    _simplex: _simplex\n  };\n}\n/**\n* Computes dot product in 2D.\n* @param g 2-vector (grid offset)\n* @param {Number} x\n* @param {Number} y\n* @param {Number} z\n* @param {Number} w\n* @return {Number} dot product\n* @api private\n*/\n\n\nvar _dot = function (g, x, y, z, w) {\n  var n = g[0] * x + g[1] * y;\n\n  if (z) {\n    n += g[2] * z;\n\n    if (w) {\n      n += g[3] * w;\n    }\n  }\n\n  return n;\n};\n/**\n*This method is a *lot* faster than using (int)Math.floor(x).\n* @param {Number} x value to be floored\n* @return {Number}\n* @api private\n*/\n\n\nvar _fastfloor = function (x) {\n  return x >= 0 ? Math.floor(x) : Math.floor(x - 1);\n};\n/**\n * @module toxi/math/noise/simplexNoise\n * @api public\n */\n\n\nvar SimplexNoise = {\n  //SimplexNoise only consists of static methods\n\n  /**\n  * Computes 4D Simplex Noise.\n  * @param {Number} [x] coordinate\n  * @param {Number} [y]  coordinate\n  * @param {Number} [z] coordinate\n  * @param {Number} [w] coordinate\n  * @return {Number} noise value in range -1 ... +1\n  */\n  noise: function (x, y, z, w) {\n    //Noise contributions from five corners, we may use as few as 3 of them (depending on arguments)\n    var numArgs = arguments.length,\n        n0 = 0,\n        n1 = 0,\n        n2 = 0,\n        n3 = 0,\n        n4 = 0; //skew the input space to determin which simplex cell we're in\n\n    var s = function () {\n      switch (numArgs) {\n        case 2:\n          return (x + y) * _F2;\n        //Hairy factor for 2d\n\n        case 3:\n          return (x + y + z) * _F3;\n        //Very nice and simple skew factor for 3d\n\n        case 4:\n          return (x + y + z + w) * _F4;\n        //factor for 4d skewing\n\n        default:\n          throw new Error(\"Wrong arguments supplied to SimplexNoise.noise()\");\n      }\n    }(),\n        i = _fastfloor(x + s),\n        j = _fastfloor(y + s),\n        k = z !== undefined ? _fastfloor(z + s) : undefined,\n        l = w !== undefined ? _fastfloor(w + s) : undefined; //unskew\n\n\n    var t = function () {\n      switch (numArgs) {\n        case 2:\n          return (i + j) * _G2;\n\n        case 3:\n          return (i + j + k) * _G3;\n\n        case 4:\n          return (i + j + k + l) * _G4;\n      }\n    }(),\n        x0 = x - (i - t),\n        //the x,y,z,w distance from the cell origin\n    y0 = y - (j - t),\n        z0 = z !== undefined ? z - (k - t) : undefined,\n        w0 = w !== undefined ? w - (l - t) : undefined; //Determine which simplex we are in\n\n\n    if (numArgs == 2) {\n      //for the 2d case, the simplex shape is an equilateral triangle.\n      return function () {\n        var i1, j1, //offsets for scond (middle) corner of simplex (i,j)\n        x1, y1, x2, y2, ii, jj, t0, gi0, gi1, gi2, t2;\n\n        if (x0 > y0) {\n          // lower triangle, XY order\n          i1 = 1;\n          j1 = 0;\n        } else {\n          //upper triangle, YX order\n          i1 = 0;\n          j1 = 1;\n        } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n\n\n        x1 = x0 - i1 + _G2; // Offsets for middle corner in (x,y) unskewed\n\n        y1 = y0 - j1 + _G2;\n        x2 = x0 + _G22; // Offsets for last corner in (x,y) unskewed\n\n        y2 = y0 + _G22; // Work out the hashed gradient indices of the three simplex corners\n\n        ii = i & 0xff;\n        jj = j & 0xff; // Calculate the contribution from the three corners\n\n        t0 = 0.5 - x0 * x0 - y0 * y0;\n\n        if (t0 > 0) {\n          t0 *= t0;\n          gi0 = _perm[ii + _perm[jj]] % 12;\n          n0 = t0 * t0 * _dot(_grad3[gi0], x0, y0); // (x,y) of grad3 used for\n          // 2D gradient\n        }\n\n        var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n        if (t1 > 0) {\n          t1 *= t1;\n          gi1 = _perm[ii + i1 + _perm[jj + j1]] % 12;\n          n1 = t1 * t1 * _dot(_grad3[gi1], x1, y1);\n        }\n\n        t2 = 0.5 - x2 * x2 - y2 * y2;\n\n        if (t2 > 0) {\n          t2 *= t2;\n          gi2 = _perm[ii + 1 + _perm[jj + 1]] % 12;\n          n2 = t2 * t2 * _dot(_grad3[gi2], x2, y2);\n        } // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n\n\n        return 70.0 * (n0 + n1 + n2);\n      }();\n    } else if (numArgs == 3) {\n      //for the 3d case, the simplex shape is a slightly irregular tetrahedron\n      return function () {\n        var i1, j1, k1, // Offsets for second corner of simplex in (i,j,k)\n        // coords\n        i2, j2, k2, // Offsets for third corner of simplex in (i,j,k) coords\n        x1, y1, z1, x2, y2, z2, x3, y3, z3, ii, jj, kk, t0, gi0, t1, gi1, t2, gi2, t3, gi3;\n\n        if (x0 >= y0) {\n          if (y0 >= z0) {\n            i1 = 1;\n            j1 = 0;\n            k1 = 0;\n            i2 = 1;\n            j2 = 1;\n            k2 = 0;\n          } // X Y Z order\n          else if (x0 >= z0) {\n            i1 = 1;\n            j1 = 0;\n            k1 = 0;\n            i2 = 1;\n            j2 = 0;\n            k2 = 1;\n          } // X Z Y order\n          else {\n            i1 = 0;\n            j1 = 0;\n            k1 = 1;\n            i2 = 1;\n            j2 = 0;\n            k2 = 1;\n          } // Z X Y order\n\n        } else {\n          // x0<y0\n          if (y0 < z0) {\n            i1 = 0;\n            j1 = 0;\n            k1 = 1;\n            i2 = 0;\n            j2 = 1;\n            k2 = 1;\n          } // Z Y X order\n          else if (x0 < z0) {\n            i1 = 0;\n            j1 = 1;\n            k1 = 0;\n            i2 = 0;\n            j2 = 1;\n            k2 = 1;\n          } // Y Z X order\n          else {\n            i1 = 0;\n            j1 = 1;\n            k1 = 0;\n            i2 = 1;\n            j2 = 1;\n            k2 = 0;\n          } // Y X Z order\n\n        } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z),\n        // and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z),\n        // where\n        // c = 1/6.\n\n\n        x1 = x0 - i1 + _G3; // Offsets for second corner in (x,y,z) coords\n\n        y1 = y0 - j1 + _G3;\n        z1 = z0 - k1 + _G3;\n        x2 = x0 - i2 + _F3; // Offsets for third corner in (x,y,z)\n\n        y2 = y0 - j2 + _F3;\n        z2 = z0 - k2 + _F3;\n        x3 = x0 - 0.5; // Offsets for last corner in (x,y,z)\n\n        y3 = y0 - 0.5;\n        z3 = z0 - 0.5; // Work out the hashed gradient indices of the four simplex corners\n\n        ii = i & 0xff;\n        jj = j & 0xff;\n        kk = k & 0xff; // Calculate the contribution from the four corners\n\n        t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n        if (t0 > 0) {\n          t0 *= t0;\n          gi0 = _perm[ii + _perm[jj + _perm[kk]]] % 12;\n          n0 = t0 * t0 * _dot(_grad3[gi0], x0, y0, z0);\n        }\n\n        t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n        if (t1 > 0) {\n          t1 *= t1;\n          gi1 = _perm[ii + i1 + _perm[jj + j1 + _perm[kk + k1]]] % 12;\n          n1 = t1 * t1 * _dot(_grad3[gi1], x1, y1, z1);\n        }\n\n        t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n        if (t2 > 0) {\n          t2 *= t2;\n          gi2 = _perm[ii + i2 + _perm[jj + j2 + _perm[kk + k2]]] % 12;\n          n2 = t2 * t2 * _dot(_grad3[gi2], x2, y2, z2);\n        }\n\n        t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n        if (t3 > 0) {\n          t3 *= t3;\n          gi3 = _perm[ii + 1 + _perm[jj + 1 + _perm[kk + 1]]] % 12;\n          n3 = t3 * t3 * _dot(_grad3[gi3], x3, y3, z3);\n        } // Add contributions from each corner to get the final noise value.\n        // The result is scaled to stay just inside [-1,1]\n\n\n        return 32.0 * (n0 + n1 + n2 + n3);\n      }();\n    } else {\n      // For the 4D case, the simplex is a 4D shape I won't even try to\n      // describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // The method below is a good way of finding the ordering of x,y,z,w and\n      // then find the correct traversal order for the simplex were in.\n      // First, six pair-wise comparisons are performed between each possible\n      // pair of the four coordinates, and the results are used to add up\n      // binary bits for an integer index.\n      return function () {\n        var i1,\n            j1,\n            k1,\n            l1,\n            // The integer offsets for the second simplex corner\n        i2,\n            j2,\n            k2,\n            l2,\n            // The integer offsets for the third simplex corner\n        i3,\n            j3,\n            k3,\n            l3,\n            // The integer offsets for the fourth simplex corner\n        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some\n        // order. Many values of c will never occur, since e.g. x>y>z>w makes\n        // x<z, y<w and x<w impossible. Only the 24 indices which have non-zero\n        // entries make any sense. We use a thresholding to set the coordinates\n        // in turn from the largest magnitude. The number 3 in the \"simplex\"\n        // array is at the position of the largest coordinate.\n        sc = _simplex[function () {\n          var c = 0;\n\n          if (x0 > y0) {\n            c = 0x20;\n          }\n\n          if (x0 > z0) {\n            c |= 0x10;\n          }\n\n          if (y0 > z0) {\n            c |= 0x08;\n          }\n\n          if (x0 > w0) {\n            c |= 0x04;\n          }\n\n          if (y0 > w0) {\n            c |= 0x02;\n          }\n\n          if (z0 > w0) {\n            c |= 0x01;\n          }\n\n          return c;\n        }()],\n            x1,\n            y1,\n            z1,\n            w1,\n            x2,\n            y2,\n            z2,\n            w2,\n            x3,\n            y3,\n            z3,\n            w3,\n            x4,\n            y4,\n            z4,\n            w4,\n            ii,\n            jj,\n            kk,\n            ll,\n            t0,\n            gi0,\n            t1,\n            gi1,\n            t2,\n            gi2,\n            t3,\n            gi3,\n            t4,\n            gi4;\n\n        i1 = sc[0] >= 3 ? 1 : 0;\n        j1 = sc[1] >= 3 ? 1 : 0;\n        k1 = sc[2] >= 3 ? 1 : 0;\n        l1 = sc[3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest\n        // coordinate.\n\n        i2 = sc[0] >= 2 ? 1 : 0;\n        j2 = sc[1] >= 2 ? 1 : 0;\n        k2 = sc[2] >= 2 ? 1 : 0;\n        l2 = sc[3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest\n        // coordinate.\n\n        i3 = sc[0] >= 1 ? 1 : 0;\n        j3 = sc[1] >= 1 ? 1 : 0;\n        k3 = sc[2] >= 1 ? 1 : 0;\n        l3 = sc[3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look\n        // that up.\n\n        x1 = x0 - i1 + _G4; // Offsets for second corner in (x,y,z,w)\n\n        y1 = y0 - j1 + _G4;\n        z1 = z0 - k1 + _G4;\n        w1 = w0 - l1 + _G4;\n        x2 = x0 - i2 + _G42; // Offsets for third corner in (x,y,z,w)\n\n        y2 = y0 - j2 + _G42;\n        z2 = z0 - k2 + _G42;\n        w2 = w0 - l2 + _G42;\n        x3 = x0 - i3 + _G43; // Offsets for fourth corner in (x,y,z,w)\n\n        y3 = y0 - j3 + _G43;\n        z3 = z0 - k3 + _G43;\n        w3 = w0 - l3 + _G43;\n        x4 = x0 + _G44; // Offsets for last corner in (x,y,z,w)\n\n        y4 = y0 + _G44;\n        z4 = z0 + _G44;\n        w4 = w0 + _G44; // Work out the hashed gradient indices of the five simplex corners\n\n        ii = i & 0xff;\n        jj = j & 0xff;\n        kk = k & 0xff;\n        ll = l & 0xff; // Calculate the contribution from the five corners\n\n        t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\n        if (t0 > 0) {\n          t0 *= t0;\n          gi0 = _perm[ii + _perm[jj + _perm[kk + _perm[ll]]]] % 32;\n          n0 = t0 * t0 * _dot(_grad4[gi0], x0, y0, z0, w0);\n        }\n\n        t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\n        if (t1 > 0) {\n          t1 *= t1;\n          gi1 = _perm[ii + i1 + _perm[jj + j1 + _perm[kk + k1 + _perm[ll + l1]]]] % 32;\n          n1 = t1 * t1 * _dot(_grad4[gi1], x1, y1, z1, w1);\n        }\n\n        t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\n        if (t2 > 0) {\n          t2 *= t2;\n          gi2 = _perm[ii + i2 + _perm[jj + j2 + _perm[kk + k2 + _perm[ll + l2]]]] % 32;\n          n2 = t2 * t2 * _dot(_grad4[gi2], x2, y2, z2, w2);\n        }\n\n        t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\n        if (t3 > 0) {\n          t3 *= t3;\n          gi3 = _perm[ii + i3 + _perm[jj + j3 + _perm[kk + k3 + _perm[ll + l3]]]] % 32;\n          n3 = t3 * t3 * _dot(_grad4[gi3], x3, y3, z3, w3);\n        }\n\n        t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\n        if (t4 > 0) {\n          t4 *= t4;\n          gi4 = _perm[ii + 1 + _perm[jj + 1 + _perm[kk + 1 + _perm[ll + 1]]]] % 32;\n          n4 = t4 * t4 * _dot(_grad4[gi4], x4, y4, z4, w4);\n        } // Sum up and scale the result to cover the range [-1,1]\n\n\n        return 27.0 * (n0 + n1 + n2 + n3 + n4);\n      }();\n    }\n  }\n};\nmodule.exports = SimplexNoise;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/math/noise/simplexNoise.js"],"names":["each","require","has","_SQRT3","Math","sqrt","_SQRT5","_F2","_G2","_G22","_F3","_G3","_F4","_G4","_G42","_G43","_G44","_grad3","_grad4","_p","_perm","_per","typedArrays","Int32Array","i","_simplex","makeEachTypedArray","arr","_g","g","push","testObjs","_dot","x","y","z","w","n","_fastfloor","floor","SimplexNoise","noise","numArgs","arguments","length","n0","n1","n2","n3","n4","s","Error","j","k","undefined","l","t","x0","y0","z0","w0","i1","j1","x1","y1","x2","y2","ii","jj","t0","gi0","gi1","gi2","t2","t1","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","t3","gi3","l1","l2","i3","j3","k3","l3","sc","c","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","module","exports"],"mappings":"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","sourcesContent":["\n\nvar each = require('../../internals/each');\nvar has = require('../../internals/has');\n\n\n/**\n * Simplex Noise in 2D, 3D and 4D. Based on the example code of this paper:\n * http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n * @author Stefan Gustavson, Linkping University, Sweden (stegu at itn dot liu dot se)\n * Slight optimizations & restructuring by\n * @author Karsten Schmidt (info at toxi dot co dot uk)\n * javascript by\n * @author Kyle Phillips (kyle at haptic-data dot com)\n*/\n\nvar _SQRT3 = Math.sqrt(3.0),\n\t_SQRT5 = Math.sqrt(5.0);\n\n/**\n * Skewing and unskewing factors for 2D, 3D and 4D, some of them\n * pre-multiplied.\n */\nvar\t_F2 = 0.5 * (_SQRT3 - 1.0),\n\t_G2 = (3.0 - _SQRT3) / 6.0,\n\t_G22 = _G2 * 2.0 - 1,\n\n\t_F3 = 1.0 / 3.0,\n\t_G3 = 1.0 / 6.0,\n\n\t_F4 = (_SQRT5 - 1.0) / 4.0,\n\t_G4 = (5.0 - _SQRT5) / 20.0,\n\t_G42 = _G4 * 2.0,\n\t_G43 = _G4 * 3.0,\n\t_G44 = _G4 * 4.0 - 1.0;\n\n\n/**\n* Gradient vectors for 3D (pointing to mid points of all edges of a unit\n* cube)\n*/\nvar\t_grad3 = [\n    [1, 1, 0 ],\n    [ -1, 1, 0 ],\n    [ 1, -1, 0 ],\n    [ -1, -1, 0 ],\n    [ 1, 0, 1 ],\n    [ -1, 0, 1 ],\n    [ 1, 0, -1 ],\n    [ -1, 0, -1 ],\n    [0, 1, 1 ],\n    [0, -1, 1 ],\n    [ 0, 1, -1 ],\n    [ 0, -1, -1 ]\n];\n\n\n/**\n* Gradient vectors for 4D (pointing to mid points of all edges of a unit 4D\n* hypercube)\n*/\nvar\t_grad4 = [\n    [ 0, 1, 1, 1 ],\n    [ 0, 1, 1, -1 ],\n    [ 0, 1, -1, 1 ],\n    [ 0, 1, -1, -1 ],\n    [ 0, -1, 1, 1 ],\n    [ 0, -1, 1, -1 ],\n    [ 0, -1, -1, 1 ],\n    [ 0, -1, -1, -1 ],\n    [ 1, 0, 1, 1 ],\n    [ 1, 0, 1, -1 ],\n    [ 1, 0, -1, 1 ],\n    [ 1, 0, -1, -1 ],\n    [ -1, 0, 1, 1 ],\n    [ -1, 0, 1, -1 ],\n    [ -1, 0, -1, 1 ],\n    [ -1, 0, -1, -1 ],\n    [ 1, 1, 0, 1 ],\n    [ 1, 1, 0, -1 ],\n    [ 1, -1, 0, 1 ],\n    [ 1, -1, 0, -1 ],\n    [ -1, 1, 0, 1 ],\n    [ -1, 1, 0, -1 ],\n    [ -1, -1, 0, 1 ],\n    [ -1, -1, 0, -1 ],\n    [ 1, 1, 1, 0 ],\n    [ 1, 1, -1, 0 ],\n    [ 1, -1, 1, 0 ],\n    [ 1, -1, -1, 0 ],\n    [ -1, 1, 1, 0 ],\n    [ -1, 1, -1, 0 ],\n    [ -1, -1, 1, 0 ],\n    [ -1, -1, -1, 0 ]\n];\n\n\t/**\n\t * Permutation table\n\t */\nvar\t_p = [\n    151, 160, 137, 91, 90, 15, 131, 13, 201,\n    95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37,\n    240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62,\n    94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56,\n    87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139,\n    48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133,\n    230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25,\n    63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200,\n    196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3,\n    64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255,\n    82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153,\n    101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79,\n    113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242,\n    193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n    14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204,\n    176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222,\n    114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n];\n\n\t/**\n\t * To remove the need for index wrapping, double the permutation table\n\t * length\n\t */\nvar\t_perm = (function(){\n\t\tvar _per = has.typedArrays() ? new Int32Array(0x200) : [];\n\t\tfor (var i = 0; i < 0x200; i++) {\n\t\t\t_per[i] = _p[i & 0xff];\n\t\t}\n\t\treturn _per;\n\t})();\n\n\n\t/**\n\t * A lookup table to traverse the simplex around a given point in 4D.\n\t * Details can be found where this table is used, in the 4D noise method.\n\t */\nvar\t_simplex = [\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ], [ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ],\n\t\t[ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ], [ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ],\n\t\t[ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ],\n\t\t[ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ], [ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ],\n\t\t[ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]\n\t];\n\n//if this environment supports typed arrays\n//convert our arrays over for massive perf gain!\nif( has.typedArrays() ){\n    var makeEachTypedArray = function(arr){\n        var _g = [];\n        each( arr, function(g){\n            _g.push( new Int32Array(g) );\n        });\n        return _g;\n    };\n    _grad3 = makeEachTypedArray(_grad3);\n    _grad4 = makeEachTypedArray(_grad4);\n    _p = new Int32Array(_p);\n    _simplex = makeEachTypedArray(_simplex);\n    this.testObjs = {\n        _grad3: _grad3,\n        _grad4: _grad4,\n        _p: _p,\n        _simplex: _simplex\n    };\n}\n\n\t/**\n\t* Computes dot product in 2D.\n\t* @param g 2-vector (grid offset)\n\t* @param {Number} x\n\t* @param {Number} y\n\t* @param {Number} z\n\t* @param {Number} w\n\t* @return {Number} dot product\n\t* @api private\n\t*/\nvar\t_dot = function(g, x, y, z, w) {\n\t\tvar n = g[0] * x + g[1] * y;\n\t\tif(z){\n\t\t\tn += g[2] * z;\n\t\t\tif(w){\n\t\t\t\tn += g[3] * w;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t};\n\n\t/**\n\t*This method is a *lot* faster than using (int)Math.floor(x).\n\t* @param {Number} x value to be floored\n\t* @return {Number}\n\t* @api private\n\t*/\nvar\t_fastfloor = function(x) {\n\t\treturn (x >= 0) ? Math.floor(x) : Math.floor(x - 1);\n\t};\n\n\n\t/**\n\t * @module toxi/math/noise/simplexNoise\n\t * @api public\n\t */\nvar\tSimplexNoise = { //SimplexNoise only consists of static methods\n\t/**\n\t* Computes 4D Simplex Noise.\n\t* @param {Number} [x] coordinate\n\t* @param {Number} [y]  coordinate\n\t* @param {Number} [z] coordinate\n\t* @param {Number} [w] coordinate\n\t* @return {Number} noise value in range -1 ... +1\n\t*/\n\tnoise: function(x, y, z, w) {\n\t\t//Noise contributions from five corners, we may use as few as 3 of them (depending on arguments)\n\t\tvar numArgs = arguments.length,\n\t\t\tn0 = 0,\n\t\t\tn1 = 0,\n\t\t\tn2 = 0,\n\t\t\tn3 = 0,\n\t\t\tn4 = 0;\n\t\t\t//skew the input space to determin which simplex cell we're in\n\t\tvar\ts = (function(){\n\t\t\t\tswitch(numArgs){\n\t\t\t\t\tcase 2:\n\t\t\t\t\treturn (x + y) * _F2; //Hairy factor for 2d\n\t\t\t\t\tcase 3:\n\t\t\t\t\treturn (x + y + z) * _F3; //Very nice and simple skew factor for 3d\n\t\t\t\t\tcase 4:\n\t\t\t\t\treturn (x + y + z + w) * _F4; //factor for 4d skewing\n\t\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Wrong arguments supplied to SimplexNoise.noise()\");\n\t\t\t\t}\n\t\t\t})(),\n\t\t\ti = _fastfloor(x + s),\n\t\t\tj = _fastfloor(y + s),\n\t\t\tk = (z !== undefined) ? _fastfloor(z + s) : undefined,\n\t\t\tl = (w !== undefined) ? _fastfloor(w + s) : undefined;\n\t\t\t//unskew\n\t\tvar\tt = (function(){\n\t\t\t\tswitch(numArgs){\n\t\t\t\t\tcase 2:\n\t\t\t\t\treturn (i + j) * _G2;\n\t\t\t\t\tcase 3:\n\t\t\t\t\treturn (i + j + k) * _G3;\n\t\t\t\t\tcase 4:\n\t\t\t\t\treturn (i + j + k + l) * _G4;\n\t\t\t\t}\n\t\t\t})(),\n\t\t\tx0 = x - (i - t), //the x,y,z,w distance from the cell origin\n\t\t\ty0 = y - (j - t),\n\t\t\tz0 = (z !== undefined) ? z - (k - t) : undefined,\n\t\t\tw0 = (w !== undefined) ? w - (l - t) : undefined;\n\n\t\t\t//Determine which simplex we are in\n\t\t\tif(numArgs == 2){\n\t\t\t\t//for the 2d case, the simplex shape is an equilateral triangle.\n\t\t\t\treturn (function(){\n\t\t\t\t\tvar i1, j1, //offsets for scond (middle) corner of simplex (i,j)\n\t\t\t\t\t\tx1, y1,\n\t\t\t\t\t\tx2, y2,\n\t\t\t\t\t\tii,\n\t\t\t\t\t\tjj,\n\t\t\t\t\t\tt0,\n\t\t\t\t\t\tgi0,\n\t\t\t\t\t\tgi1,\n\t\t\t\t\t\tgi2,\n\t\t\t\t\t\tt2;\n\t\t\t\t\tif(x0 > y0){ // lower triangle, XY order\n\t\t\t\t\t\ti1 = 1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else { //upper triangle, YX order\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tj1 = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t\t\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t\t\t\t// c = (3-sqrt(3))/6\n\t\t\t\t\tx1 = x0 - i1 + _G2; // Offsets for middle corner in (x,y) unskewed\n\t\t\t\t\ty1 = y0 - j1 + _G2;\n\t\t\t\t\tx2 = x0 + _G22; // Offsets for last corner in (x,y) unskewed\n\t\t\t\t\ty2 = y0 + _G22;\n\t\t\t\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\t\t\t\tii = i & 0xff;\n\t\t\t\t\tjj = j & 0xff;\n\t\t\t\t\t// Calculate the contribution from the three corners\n\t\t\t\t\tt0 = 0.5 - x0 * x0 - y0 * y0;\n\n\t\t\t\t\tif (t0 > 0) {\n\t\t\t\t\t\tt0 *= t0;\n\t\t\t\t\t\tgi0 = _perm[ii + _perm[jj]] % 12;\n\t\t\t\t\t\tn0 = t0 * t0 * _dot(_grad3[gi0], x0, y0); // (x,y) of grad3 used for\n\t\t\t\t\t\t// 2D gradient\n\t\t\t\t\t}\n\t\t\t\t\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\t\t\t\tif (t1 > 0) {\n\t\t\t\t\t\tt1 *= t1;\n\t\t\t\t\t\tgi1 = _perm[ii + i1 + _perm[jj + j1]] % 12;\n\t\t\t\t\t\tn1 = t1 * t1 * _dot(_grad3[gi1], x1, y1);\n\t\t\t\t\t}\n\t\t\t\t\tt2 = 0.5 - x2 * x2 - y2 * y2;\n\t\t\t\t\tif (t2 > 0) {\n\t\t\t\t\t\tt2 *= t2;\n\t\t\t\t\t\tgi2 = _perm[ii + 1 + _perm[jj + 1]] % 12;\n\t\t\t\t\t\tn2 = t2 * t2 * _dot(_grad3[gi2], x2, y2);\n\t\t\t\t\t}\n\t\t\t\t\t// Add contributions from each corner to get the final noise value.\n\t\t\t\t\t// The result is scaled to return values in the interval [-1,1].\n\t\t\t\t\treturn 70.0 * (n0 + n1 + n2);\n\t\t\t\t})();\n\t\t\t} else if(numArgs == 3){\n\t\t\t\t//for the 3d case, the simplex shape is a slightly irregular tetrahedron\n\t\t\t\treturn (function(){\n\t\t\t\t\tvar i1, j1, k1, // Offsets for second corner of simplex in (i,j,k)\n\t\t\t\t\t\t// coords\n\t\t\t\t\t\ti2, j2, k2, // Offsets for third corner of simplex in (i,j,k) coords\n\t\t\t\t\t\tx1,y1,z1,\n\t\t\t\t\t\tx2,y2,z2,\n\t\t\t\t\t\tx3,y3,z3,\n\t\t\t\t\t\tii,jj,kk,\n\t\t\t\t\t\tt0,\n\t\t\t\t\t\tgi0,\n\t\t\t\t\t\tt1,\n\t\t\t\t\t\tgi1,\n\t\t\t\t\t\tt2,\n\t\t\t\t\t\tgi2,\n\t\t\t\t\t\tt3,\n\t\t\t\t\t\tgi3;\n\t\t\t\t\tif (x0 >= y0) {\n\t\t\t\t\t\tif (y0 >= z0) {\n\t\t\t\t\t\t\ti1 = 1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\tk1 = 0;\n\t\t\t\t\t\t\ti2 = 1;\n\t\t\t\t\t\t\tj2 = 1;\n\t\t\t\t\t\t\tk2 = 0;\n\t\t\t\t\t\t} // X Y Z order\n\t\t\t\t\t\telse if (x0 >= z0) {\n\t\t\t\t\t\t\ti1 = 1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\tk1 = 0;\n\t\t\t\t\t\t\ti2 = 1;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\tk2 = 1;\n\t\t\t\t\t\t} // X Z Y order\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\tk1 = 1;\n\t\t\t\t\t\t\ti2 = 1;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\tk2 = 1;\n\t\t\t\t\t\t} // Z X Y order\n\t\t\t\t\t} else { // x0<y0\n\t\t\t\t\t\tif (y0 < z0) {\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\tk1 = 1;\n\t\t\t\t\t\t\ti2 = 0;\n\t\t\t\t\t\t\tj2 = 1;\n\t\t\t\t\t\t\tk2 = 1;\n\t\t\t\t\t\t} // Z Y X order\n\t\t\t\t\t\telse if (x0 < z0) {\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tj1 = 1;\n\t\t\t\t\t\t\tk1 = 0;\n\t\t\t\t\t\t\ti2 = 0;\n\t\t\t\t\t\t\tj2 = 1;\n\t\t\t\t\t\t\tk2 = 1;\n\t\t\t\t\t\t} // Y Z X order\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tj1 = 1;\n\t\t\t\t\t\t\tk1 = 0;\n\t\t\t\t\t\t\ti2 = 1;\n\t\t\t\t\t\t\tj2 = 1;\n\t\t\t\t\t\t\tk2 = 0;\n\t\t\t\t\t\t} // Y X Z order\n\t\t\t\t\t}\n\t\t\t\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t\t\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z),\n\t\t\t\t\t// and\n\t\t\t\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z),\n\t\t\t\t\t// where\n\t\t\t\t\t// c = 1/6.\n\t\t\t\t\tx1 = x0 - i1 + _G3; // Offsets for second corner in (x,y,z) coords\n\t\t\t\t\ty1 = y0 - j1 + _G3;\n\t\t\t\t\tz1 = z0 - k1 + _G3;\n\n\t\t\t\t\tx2 = x0 - i2 + _F3; // Offsets for third corner in (x,y,z)\n\t\t\t\t\ty2 = y0 - j2 + _F3;\n\t\t\t\t\tz2 = z0 - k2 + _F3;\n\n\t\t\t\t\tx3 = x0 - 0.5; // Offsets for last corner in (x,y,z)\n\t\t\t\t\ty3 = y0 - 0.5;\n\t\t\t\t\tz3 = z0 - 0.5;\n\t\t\t\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\t\t\t\tii = i & 0xff;\n\t\t\t\t\tjj = j & 0xff;\n\t\t\t\t\tkk = k & 0xff;\n\n\t\t\t\t\t// Calculate the contribution from the four corners\n\t\t\t\t\tt0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\t\t\t\tif (t0 > 0) {\n\t\t\t\t\t\tt0 *= t0;\n\t\t\t\t\t\tgi0 = _perm[ii + _perm[jj + _perm[kk]]] % 12;\n\t\t\t\t\t\tn0 = t0 * t0 * _dot(_grad3[gi0], x0, y0, z0);\n\t\t\t\t\t}\n\t\t\t\t\tt1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\t\t\t\tif (t1 > 0) {\n\t\t\t\t\t\tt1 *= t1;\n\t\t\t\t\t\tgi1 = _perm[ii + i1 + _perm[jj + j1 + _perm[kk + k1]]] % 12;\n\t\t\t\t\t\tn1 = t1 * t1 * _dot(_grad3[gi1], x1, y1, z1);\n\t\t\t\t\t}\n\t\t\t\t\tt2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\t\t\t\tif (t2 > 0) {\n\t\t\t\t\t\tt2 *= t2;\n\t\t\t\t\t\tgi2 = _perm[ii + i2 + _perm[jj + j2 + _perm[kk + k2]]] % 12;\n\t\t\t\t\t\tn2 = t2 * t2 * _dot(_grad3[gi2], x2, y2, z2);\n\t\t\t\t\t}\n\t\t\t\t\tt3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\t\t\t\tif (t3 > 0) {\n\t\t\t\t\t\tt3 *= t3;\n\t\t\t\t\t\tgi3 = _perm[ii + 1 + _perm[jj + 1 + _perm[kk + 1]]] % 12;\n\t\t\t\t\t\tn3 = t3 * t3 * _dot(_grad3[gi3], x3, y3, z3);\n\t\t\t\t\t}\n\t\t\t\t\t// Add contributions from each corner to get the final noise value.\n\t\t\t\t\t// The result is scaled to stay just inside [-1,1]\n\t\t\t\t\treturn 32.0 * (n0 + n1 + n2 + n3);\n\t\t\t\t})();\n\t\t\t} else {\n\t\t\t\t// For the 4D case, the simplex is a 4D shape I won't even try to\n\t\t\t\t// describe.\n\t\t\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t\t\t// then find the correct traversal order for the simplex were in.\n\t\t\t\t// First, six pair-wise comparisons are performed between each possible\n\t\t\t\t// pair of the four coordinates, and the results are used to add up\n\t\t\t\t// binary bits for an integer index.\n\t\t\t\treturn (function(){\n\t\t\t\t\tvar i1,j1,k1,l1, // The integer offsets for the second simplex corner\n\t\t\t\t\t\ti2,j2,k2,l2, // The integer offsets for the third simplex corner\n\t\t\t\t\t\ti3,j3,k3,l3, // The integer offsets for the fourth simplex corner\n\t\t\t\t\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some\n\t\t\t\t\t\t// order. Many values of c will never occur, since e.g. x>y>z>w makes\n\t\t\t\t\t\t// x<z, y<w and x<w impossible. Only the 24 indices which have non-zero\n\t\t\t\t\t\t// entries make any sense. We use a thresholding to set the coordinates\n\t\t\t\t\t\t// in turn from the largest magnitude. The number 3 in the \"simplex\"\n\t\t\t\t\t\t// array is at the position of the largest coordinate.\n\t\t\t\t\t\tsc = _simplex[\n\t\t\t\t\t\t\t(function(){\n\t\t\t\t\t\t\t\tvar c = 0;\n\t\t\t\t\t\t\t\tif (x0 > y0) {\n\t\t\t\t\t\t\t\t\tc = 0x20;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (x0 > z0) {\n\t\t\t\t\t\t\t\t\tc |= 0x10;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (y0 > z0) {\n\t\t\t\t\t\t\t\t\tc |= 0x08;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (x0 > w0) {\n\t\t\t\t\t\t\t\t\tc |= 0x04;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (y0 > w0) {\n\t\t\t\t\t\t\t\t\tc |= 0x02;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (z0 > w0) {\n\t\t\t\t\t\t\t\t\tc |= 0x01;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t],\n\t\t\t\t\t\tx1, y1, z1, w1,\n\t\t\t\t\t\tx2, y2, z2, w2,\n\t\t\t\t\t\tx3, y3, z3, w3,\n\t\t\t\t\t\tx4, y4, z4, w4,\n\t\t\t\t\t\tii, jj, kk, ll,\n\t\t\t\t\t\tt0,\n\t\t\t\t\t\tgi0,\n\t\t\t\t\t\tt1,\n\t\t\t\t\t\tgi1,\n\t\t\t\t\t\tt2,\n\t\t\t\t\t\tgi2,\n\t\t\t\t\t\tt3,\n\t\t\t\t\t\tgi3,\n\t\t\t\t\t\tt4,\n\t\t\t\t\t\tgi4;\n\n\n\t\t\t\t\t\ti1 = sc[0] >= 3 ? 1 : 0;\n\t\t\t\t\t\tj1 = sc[1] >= 3 ? 1 : 0;\n\t\t\t\t\t\tk1 = sc[2] >= 3 ? 1 : 0;\n\t\t\t\t\t\tl1 = sc[3] >= 3 ? 1 : 0;\n\t\t\t\t\t\t// The number 2 in the \"simplex\" array is at the second largest\n\t\t\t\t\t\t// coordinate.\n\t\t\t\t\t\ti2 = sc[0] >= 2 ? 1 : 0;\n\t\t\t\t\t\tj2 = sc[1] >= 2 ? 1 : 0;\n\t\t\t\t\t\tk2 = sc[2] >= 2 ? 1 : 0;\n\t\t\t\t\t\tl2 = sc[3] >= 2 ? 1 : 0;\n\t\t\t\t\t\t// The number 1 in the \"simplex\" array is at the second smallest\n\t\t\t\t\t\t// coordinate.\n\t\t\t\t\t\ti3 = sc[0] >= 1 ? 1 : 0;\n\t\t\t\t\t\tj3 = sc[1] >= 1 ? 1 : 0;\n\t\t\t\t\t\tk3 = sc[2] >= 1 ? 1 : 0;\n\t\t\t\t\t\tl3 = sc[3] >= 1 ? 1 : 0;\n\n\t\t\t\t\t\t// The fifth corner has all coordinate offsets = 1, so no need to look\n\t\t\t\t\t\t// that up.\n\t\t\t\t\t\tx1 = x0 - i1 + _G4; // Offsets for second corner in (x,y,z,w)\n\t\t\t\t\t\ty1 = y0 - j1 + _G4;\n\t\t\t\t\t\tz1 = z0 - k1 + _G4;\n\t\t\t\t\t\tw1 = w0 - l1 + _G4;\n\n\t\t\t\t\t\tx2 = x0 - i2 + _G42; // Offsets for third corner in (x,y,z,w)\n\t\t\t\t\t\ty2 = y0 - j2 + _G42;\n\t\t\t\t\t\tz2 = z0 - k2 + _G42;\n\t\t\t\t\t\tw2 = w0 - l2 + _G42;\n\n\t\t\t\t\t\tx3 = x0 - i3 + _G43; // Offsets for fourth corner in (x,y,z,w)\n\t\t\t\t\t\ty3 = y0 - j3 + _G43;\n\t\t\t\t\t\tz3 = z0 - k3 + _G43;\n\t\t\t\t\t\tw3 = w0 - l3 + _G43;\n\n\t\t\t\t\t\tx4 = x0 + _G44; // Offsets for last corner in (x,y,z,w)\n\t\t\t\t\t\ty4 = y0 + _G44;\n\t\t\t\t\t\tz4 = z0 + _G44;\n\t\t\t\t\t\tw4 = w0 + _G44;\n\n\t\t\t\t\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\t\t\t\t\tii = i & 0xff;\n\t\t\t\t\t\tjj = j & 0xff;\n\t\t\t\t\t\tkk = k & 0xff;\n\t\t\t\t\t\tll = l & 0xff;\n\n\t\t\t\t\t\t// Calculate the contribution from the five corners\n\t\t\t\t\t\tt0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\t\t\t\t\tif (t0 > 0) {\n\t\t\t\t\t\t\tt0 *= t0;\n\t\t\t\t\t\t\tgi0 = _perm[ii + _perm[jj + _perm[kk + _perm[ll]]]] % 32;\n\t\t\t\t\t\t\tn0 = t0 * t0 * _dot(_grad4[gi0], x0, y0, z0, w0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\t\t\t\t\tif (t1 > 0) {\n\t\t\t\t\t\t\tt1 *= t1;\n\t\t\t\t\t\t\tgi1 = _perm[ii + i1 + _perm[jj + j1 + _perm[kk + k1 + _perm[ll + l1]]]] % 32;\n\t\t\t\t\t\t\tn1 = t1 * t1 * _dot(_grad4[gi1], x1, y1, z1, w1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\t\t\t\t\tif (t2 > 0) {\n\t\t\t\t\t\t\tt2 *= t2;\n\t\t\t\t\t\t\tgi2 = _perm[ii + i2 + _perm[jj + j2 + _perm[kk + k2 + _perm[ll + l2]]]] % 32;\n\t\t\t\t\t\t\tn2 = t2 * t2 * _dot(_grad4[gi2], x2, y2, z2, w2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\t\t\t\t\tif (t3 > 0) {\n\t\t\t\t\t\t\tt3 *= t3;\n\t\t\t\t\t\t\tgi3 = _perm[ii + i3 + _perm[jj + j3 + _perm[kk + k3 + _perm[ll + l3]]]] % 32;\n\t\t\t\t\t\t\tn3 = t3 * t3 * _dot(_grad4[gi3], x3, y3, z3, w3);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\t\t\t\t\tif (t4 > 0) {\n\t\t\t\t\t\t\tt4 *= t4;\n\t\t\t\t\t\t\tgi4 = _perm[ii + 1 + _perm[jj + 1 + _perm[kk + 1 + _perm[ll + 1]]]] % 32;\n\t\t\t\t\t\t\tn4 = t4 * t4 * _dot(_grad4[gi4], x4, y4, z4, w4);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\t\t\t\t\treturn 27.0 * (n0 + n1 + n2 + n3 + n4);\n\t\t\t\t})();\n\n\t\t\t}\n\n\t}\n};\n\nmodule.exports = SimplexNoise;\n\n\n\n"]},"metadata":{},"sourceType":"script"}