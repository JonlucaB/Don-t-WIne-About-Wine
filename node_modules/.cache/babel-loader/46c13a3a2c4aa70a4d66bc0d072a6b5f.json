{"ast":null,"code":"var HSVAccessor = require('./HSVAccessor'),\n    RGBAccessor = require('./RGBAccessor'),\n    CMYKAccessor = require('./CMYKAccessor'),\n    AlphaAccessor = require('./AlphaAccessor'),\n    LuminanceAccessor = require('./LuminanceAccessor');\n/**\n* Defines standard color component access criterias and associated comparators\n* used to sort colors based on component values. If a new custom accessor is\n* needed (e.g. for sub-classes TColor's), then simply sub-class this class and\n* implement the {@link Comparator} interface and the 2 abstract getter & setter\n* methods defined by this class.\n*/\n\n\nexports.HUE = new HSVAccessor(0), exports.SATURATION = new HSVAccessor(1), exports.BRIGHTNESS = new HSVAccessor(2), exports.RED = new RGBAccessor(0), exports.GREEN = new RGBAccessor(1), exports.BLUE = new RGBAccessor(2), exports.CYAN = new CMYKAccessor(0), exports.MAGENTA = new CMYKAccessor(1), exports.YELLOW = new CMYKAccessor(2), exports.BLACK = new CMYKAccessor(3), exports.ALPHA = new AlphaAccessor(), exports.LUMINANCE = new LuminanceAccessor();","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/color/accessCriteria.js"],"names":["HSVAccessor","require","RGBAccessor","CMYKAccessor","AlphaAccessor","LuminanceAccessor","exports","HUE","SATURATION","BRIGHTNESS","RED","GREEN","BLUE","CYAN","MAGENTA","YELLOW","BLACK","ALPHA","LUMINANCE"],"mappings":"AAGA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;AAAA,IACCC,WAAW,GAAGD,OAAO,CAAC,eAAD,CADtB;AAAA,IAECE,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAFvB;AAAA,IAGCG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAHxB;AAAA,IAICI,iBAAiB,GAAGJ,OAAO,CAAC,qBAAD,CAJ5B;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,OAAO,CAACC,GAAR,GAAc,IAAIP,WAAJ,CAAgB,CAAhB,CAAd,EACAM,OAAO,CAACE,UAAR,GAAqB,IAAIR,WAAJ,CAAgB,CAAhB,CADrB,EAEAM,OAAO,CAACG,UAAR,GAAqB,IAAIT,WAAJ,CAAgB,CAAhB,CAFrB,EAIAM,OAAO,CAACI,GAAR,GAAc,IAAIR,WAAJ,CAAgB,CAAhB,CAJd,EAKAI,OAAO,CAACK,KAAR,GAAgB,IAAIT,WAAJ,CAAgB,CAAhB,CALhB,EAMAI,OAAO,CAACM,IAAR,GAAe,IAAIV,WAAJ,CAAgB,CAAhB,CANf,EAQAI,OAAO,CAACO,IAAR,GAAe,IAAIV,YAAJ,CAAiB,CAAjB,CARf,EASAG,OAAO,CAACQ,OAAR,GAAkB,IAAIX,YAAJ,CAAiB,CAAjB,CATlB,EAUAG,OAAO,CAACS,MAAR,GAAiB,IAAIZ,YAAJ,CAAiB,CAAjB,CAVjB,EAWAG,OAAO,CAACU,KAAR,GAAgB,IAAIb,YAAJ,CAAiB,CAAjB,CAXhB,EAaAG,OAAO,CAACW,KAAR,GAAgB,IAAIb,aAAJ,EAbhB,EAcAE,OAAO,CAACY,SAAR,GAAoB,IAAIb,iBAAJ,EAdpB","sourcesContent":["\n\n\nvar HSVAccessor = require('./HSVAccessor'),\n\tRGBAccessor = require('./RGBAccessor'),\n\tCMYKAccessor = require('./CMYKAccessor'),\n\tAlphaAccessor = require('./AlphaAccessor'),\n\tLuminanceAccessor = require('./LuminanceAccessor');\n/**\n* Defines standard color component access criterias and associated comparators\n* used to sort colors based on component values. If a new custom accessor is\n* needed (e.g. for sub-classes TColor's), then simply sub-class this class and\n* implement the {@link Comparator} interface and the 2 abstract getter & setter\n* methods defined by this class.\n*/\nexports.HUE = new HSVAccessor(0),\nexports.SATURATION = new HSVAccessor(1),\nexports.BRIGHTNESS = new HSVAccessor(2),\n\nexports.RED = new RGBAccessor(0),\nexports.GREEN = new RGBAccessor(1),\nexports.BLUE = new RGBAccessor(2),\n\nexports.CYAN = new CMYKAccessor(0),\nexports.MAGENTA = new CMYKAccessor(1),\nexports.YELLOW = new CMYKAccessor(2),\nexports.BLACK = new CMYKAccessor(3),\n\nexports.ALPHA = new AlphaAccessor(),\nexports.LUMINANCE = new LuminanceAccessor();\n\n\n"]},"metadata":{},"sourceType":"script"}