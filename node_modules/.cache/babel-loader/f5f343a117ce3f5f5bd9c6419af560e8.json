{"ast":null,"code":"var extend = require('../../internals').extend,\n    AbstractWave = require('./AbstractWave');\n/**\n * @module toxi/math/waves/SineWave\n * @augments toxi/math/wave/AbstractWave\n * member toxi\n * @augments AbstractWave\n * @param {Number} [phase] phase\n * @param {Number} [freq] frequency\n * @param {Number} [amp] amplitude\n * @param {Number} [offset] offset\n */\n\n\nvar SineWave = function (phase, freq, amp, offset) {\n  AbstractWave.call(this, phase, freq, amp, offset);\n};\n\nextend(SineWave, AbstractWave);\n\nSineWave.prototype.getClass = function () {\n  return \"SineWave\";\n};\n\nSineWave.prototype.update = function () {\n  this.value = Math.sin(this.phase) * this.amp + this.offset;\n  this.cyclePhase(this.frequency);\n  return this.value;\n};\n\nmodule.exports = SineWave;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/math/waves/SineWave.js"],"names":["extend","require","AbstractWave","SineWave","phase","freq","amp","offset","call","prototype","getClass","update","value","Math","sin","cyclePhase","frequency","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,MAAxC;AAAA,IACCE,YAAY,GAAGD,OAAO,CAAC,gBAAD,CADvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,QAAQ,GAAG,UAASC,KAAT,EAAeC,IAAf,EAAoBC,GAApB,EAAwBC,MAAxB,EAAgC;AAC3CL,EAAAA,YAAY,CAACM,IAAb,CAAkB,IAAlB,EAAwBJ,KAAxB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,MAA1C;AACH,CAFD;;AAIAP,MAAM,CAACG,QAAD,EAAUD,YAAV,CAAN;;AAEAC,QAAQ,CAACM,SAAT,CAAmBC,QAAnB,GAA8B,YAAU;AACvC,SAAO,UAAP;AACA,CAFD;;AAIAP,QAAQ,CAACM,SAAT,CAAmBE,MAAnB,GAA4B,YAAW;AACpC,OAAKC,KAAL,GAAcC,IAAI,CAACC,GAAL,CAAS,KAAKV,KAAd,IAAuB,KAAKE,GAA7B,GAAoC,KAAKC,MAAtD;AACA,OAAKQ,UAAL,CAAgB,KAAKC,SAArB;AACA,SAAO,KAAKJ,KAAZ;AACF,CAJD;;AAMAK,MAAM,CAACC,OAAP,GAAiBf,QAAjB","sourcesContent":["\n\nvar extend = require('../../internals').extend,\n\tAbstractWave = require('./AbstractWave');\n\n/**\n * @module toxi/math/waves/SineWave\n * @augments toxi/math/wave/AbstractWave\n * member toxi\n * @augments AbstractWave\n * @param {Number} [phase] phase\n * @param {Number} [freq] frequency\n * @param {Number} [amp] amplitude\n * @param {Number} [offset] offset\n */\nvar\tSineWave = function(phase,freq,amp,offset) {\n    AbstractWave.call(this, phase, freq, amp, offset);\n};\n\nextend(SineWave,AbstractWave);\n\nSineWave.prototype.getClass = function(){\n\treturn \"SineWave\";\n};\n\nSineWave.prototype.update = function() {\n   this.value = (Math.sin(this.phase) * this.amp) + this.offset;\n   this.cyclePhase(this.frequency);\n   return this.value;\n};\n\nmodule.exports = SineWave;\n\n"]},"metadata":{},"sourceType":"script"}