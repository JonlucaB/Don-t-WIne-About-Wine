{"ast":null,"code":"var extend = require('../../internals').extend,\n    AbstractWave = require('./AbstractWave');\n/**\n * @module toxi/math/waves/FMSawtoothWave\n * @augments toxi/math/waves/AbstractWave\n */\n\n\nvar FMSawtoothWave = function (a, b, c, d, e) {\n  if (typeof c == \"number\") {\n    AbstractWave.call(this, a, b, c, d);\n    this.fmod = e;\n  } else {\n    AbstractWave.call(this, a, b);\n    this.fmod = c;\n  }\n};\n\nextend(FMSawtoothWave, AbstractWave);\n\nFMSawtoothWave.prototype.getClass = function () {\n  return \"FMSawtoothWave\";\n};\n\nFMSawtoothWave.prototype.pop = function () {\n  this.parent.pop.call(this);\n  this.fmod.pop();\n};\n\nFMSawtoothWave.prototype.push = function () {\n  this.parent.push.call(this);\n  this.fmod.push();\n};\n\nFMSawtoothWave.prototype.reset = function () {\n  this.parent.reset.call(this);\n  this.fmod.reset();\n};\n\nFMSawtoothWave.prototype.update = function () {\n  this.value = (this.phase / AbstractWave.TWO_PI * 2 - 1) * this.amp + this.offset;\n  this.cyclePhase(this.frequency + this.fmod.update());\n  return this.value;\n};\n\nmodule.exports = FMSawtoothWave;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/math/waves/FMSawtoothWave.js"],"names":["extend","require","AbstractWave","FMSawtoothWave","a","b","c","d","e","call","fmod","prototype","getClass","pop","parent","push","reset","update","value","phase","TWO_PI","amp","offset","cyclePhase","frequency","module","exports"],"mappings":"AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,MAAxC;AAAA,IACCE,YAAY,GAAGD,OAAO,CAAC,gBAAD,CADvB;AAIA;AACA;AACA;AACA;;;AACA,IAAIE,cAAc,GAAG,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAeC,CAAf,EAAiBC,CAAjB,EAAmB;AACvC,MAAG,OAAOF,CAAP,IAAY,QAAf,EAAyB;AACxBJ,IAAAA,YAAY,CAACO,IAAb,CAAkB,IAAlB,EAAuBL,CAAvB,EAAyBC,CAAzB,EAA2BC,CAA3B,EAA6BC,CAA7B;AACA,SAAKG,IAAL,GAAYF,CAAZ;AACA,GAHD,MAGO;AACNN,IAAAA,YAAY,CAACO,IAAb,CAAkB,IAAlB,EAAuBL,CAAvB,EAAyBC,CAAzB;AACA,SAAKK,IAAL,GAAYJ,CAAZ;AACA;AACD,CARD;;AAUAN,MAAM,CAACG,cAAD,EAAgBD,YAAhB,CAAN;;AAEAC,cAAc,CAACQ,SAAf,CAAyBC,QAAzB,GAAoC,YAAU;AAC7C,SAAO,gBAAP;AACA,CAFD;;AAKAT,cAAc,CAACQ,SAAf,CAAyBE,GAAzB,GAA+B,YAAU;AACxC,OAAKC,MAAL,CAAYD,GAAZ,CAAgBJ,IAAhB,CAAqB,IAArB;AACA,OAAKC,IAAL,CAAUG,GAAV;AACA,CAHD;;AAMAV,cAAc,CAACQ,SAAf,CAAyBI,IAAzB,GAAgC,YAAU;AACzC,OAAKD,MAAL,CAAYC,IAAZ,CAAiBN,IAAjB,CAAsB,IAAtB;AACA,OAAKC,IAAL,CAAUK,IAAV;AACA,CAHD;;AAMAZ,cAAc,CAACQ,SAAf,CAAyBK,KAAzB,GAAiC,YAAU;AAC1C,OAAKF,MAAL,CAAYE,KAAZ,CAAkBP,IAAlB,CAAuB,IAAvB;AACA,OAAKC,IAAL,CAAUM,KAAV;AACA,CAHD;;AAMAb,cAAc,CAACQ,SAAf,CAAyBM,MAAzB,GAAkC,YAAU;AAC3C,OAAKC,KAAL,GAAa,CAAE,KAAKC,KAAL,GAAajB,YAAY,CAACkB,MAA3B,GAAmC,CAAnC,GAAuC,CAAxC,IAA6C,KAAKC,GAAlD,GAAwD,KAAKC,MAA1E;AACA,OAAKC,UAAL,CAAgB,KAAKC,SAAL,GAAiB,KAAKd,IAAL,CAAUO,MAAV,EAAjC;AACA,SAAO,KAAKC,KAAZ;AACA,CAJD;;AAMAO,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["\nvar extend = require('../../internals').extend,\n\tAbstractWave = require('./AbstractWave');\n\n\n/**\n * @module toxi/math/waves/FMSawtoothWave\n * @augments toxi/math/waves/AbstractWave\n */\nvar\tFMSawtoothWave = function(a,b,c,d,e){\n\tif(typeof c == \"number\") {\n\t\tAbstractWave.call(this,a,b,c,d);\n\t\tthis.fmod = e;\n\t} else {\n\t\tAbstractWave.call(this,a,b);\n\t\tthis.fmod = c;\n\t}\n};\n\nextend(FMSawtoothWave,AbstractWave);\n\nFMSawtoothWave.prototype.getClass = function(){\n\treturn \"FMSawtoothWave\";\n};\n\n\nFMSawtoothWave.prototype.pop = function(){\n\tthis.parent.pop.call(this);\n\tthis.fmod.pop();\n};\n\n\nFMSawtoothWave.prototype.push = function(){\n\tthis.parent.push.call(this);\n\tthis.fmod.push();\n};\n\n\nFMSawtoothWave.prototype.reset = function(){\n\tthis.parent.reset.call(this);\n\tthis.fmod.reset();\n};\n\n\nFMSawtoothWave.prototype.update = function(){\n\tthis.value = ((this.phase / AbstractWave.TWO_PI)*2 - 1) * this.amp + this.offset;\n\tthis.cyclePhase(this.frequency + this.fmod.update());\n\treturn this.value;\n};\n\nmodule.exports = FMSawtoothWave;\n\n"]},"metadata":{},"sourceType":"script"}