{"ast":null,"code":"var extend = require('../../internals').extend,\n    AbstractWave = require('./AbstractWave');\n/**\n * @module toxi/math/waves/FMHarmonicSquareWave\n * @description\n * <p>\n * Frequency modulated <strong>bandwidth-limited</strong> square wave using a\n * fourier series of harmonics. Also uses a secondary wave to modulate the\n * frequency of the main wave.\n * </p>\n *\n * <p>\n * <strong>Note:</strong> You must NEVER call the update() method on the\n * modulating wave.\n * </p>\n * @augments toxi/math/waves/AbstractWave\n */\n\n\nvar FMHarmonicSquareWave = function (a, b, c, d, e) {\n  this.maxHarmonics = 3;\n\n  if (typeof c == \"number\") {\n    if (e === undefined) {\n      e = new ConstantWave(0);\n    }\n\n    AbstractWave.call(this, a, b, c, d);\n    this.fmod = e;\n  } else {\n    AbstractWave.call(this, a, b);\n    this.fmod = c;\n  }\n};\n\nextend(FMHarmonicSquareWave, AbstractWave);\n\nFMHarmonicSquareWave.prototype.getClass = function () {\n  return \"FMHarmonicSquareWave\";\n};\n\nFMHarmonicSquareWave.prototype.pop = function () {\n  this.parent.pop.call(this);\n  this.fmod.pop();\n};\n\nFMHarmonicSquareWave.prototype.push = function () {\n  this.parent.push.call(this);\n  this.fmod.push();\n};\n\nFMHarmonicSquareWave.prototype.reset = function () {\n  this.parent.reset.call(this);\n  this.fmod.reset();\n};\n/**\n * @class Progresses the wave and updates the result value. You must NEVER call the\n * update() method on the modulating wave since this is handled\n * automatically by this method.\n *\n * @see toxi.math.waves.AbstractWave#update()\n * @member toxi\n * @augments AbstractWave\n */\n\n\nFMHarmonicSquareWave.prototype.update = function () {\n  this.value = 0;\n\n  for (var i = 1; i <= this.maxHarmonics; i += 2) {\n    this.value += 1.0 / i * Math.sin(i * this.phase);\n  }\n\n  this.value *= this.amp;\n  this.value += this.offset;\n  this.cyclePhase(this.frequency + this.fmod.update());\n  return this.value;\n};\n\nmodule.exports = FMHarmonicSquareWave;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/math/waves/FMHarmonicSquareWave.js"],"names":["extend","require","AbstractWave","FMHarmonicSquareWave","a","b","c","d","e","maxHarmonics","undefined","ConstantWave","call","fmod","prototype","getClass","pop","parent","push","reset","update","value","i","Math","sin","phase","amp","offset","cyclePhase","frequency","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,MAAxC;AAAA,IACCE,YAAY,GAAGD,OAAO,CAAC,gBAAD,CADvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,oBAAoB,GAAG,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAeC,CAAf,EAAiBC,CAAjB,EAAoB;AAC9C,OAAKC,YAAL,GAAoB,CAApB;;AACA,MAAG,OAAOH,CAAP,IAAY,QAAf,EAAwB;AACvB,QAAGE,CAAC,KAAKE,SAAT,EAAmB;AAClBF,MAAAA,CAAC,GAAG,IAAIG,YAAJ,CAAiB,CAAjB,CAAJ;AACA;;AACDT,IAAAA,YAAY,CAACU,IAAb,CAAkB,IAAlB,EAAuBR,CAAvB,EAAyBC,CAAzB,EAA2BC,CAA3B,EAA6BC,CAA7B;AACA,SAAKM,IAAL,GAAYL,CAAZ;AACA,GAND,MAMM;AACLN,IAAAA,YAAY,CAACU,IAAb,CAAkB,IAAlB,EAAuBR,CAAvB,EAAyBC,CAAzB;AACA,SAAKQ,IAAL,GAAYP,CAAZ;AACA;AACD,CAZD;;AAcAN,MAAM,CAACG,oBAAD,EAAsBD,YAAtB,CAAN;;AAEAC,oBAAoB,CAACW,SAArB,CAA+BC,QAA/B,GAA0C,YAAU;AACnD,SAAO,sBAAP;AACA,CAFD;;AAIAZ,oBAAoB,CAACW,SAArB,CAA+BE,GAA/B,GAAqC,YAAW;AAC/C,OAAKC,MAAL,CAAYD,GAAZ,CAAgBJ,IAAhB,CAAqB,IAArB;AACG,OAAKC,IAAL,CAAUG,GAAV;AACH,CAHD;;AAKAb,oBAAoB,CAACW,SAArB,CAA+BI,IAA/B,GAAsC,YAAW;AAC7C,OAAKD,MAAL,CAAYC,IAAZ,CAAiBN,IAAjB,CAAsB,IAAtB;AACA,OAAKC,IAAL,CAAUK,IAAV;AACH,CAHD;;AAKAf,oBAAoB,CAACW,SAArB,CAA+BK,KAA/B,GAAuC,YAAW;AAC9C,OAAKF,MAAL,CAAYE,KAAZ,CAAkBP,IAAlB,CAAuB,IAAvB;AACA,OAAKC,IAAL,CAAUM,KAAV;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,oBAAoB,CAACW,SAArB,CAA+BM,MAA/B,GAAwC,YAAW;AAC/C,OAAKC,KAAL,GAAa,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKb,YAA1B,EAAwCa,CAAC,IAAI,CAA7C,EAAgD;AAC5C,SAAKD,KAAL,IAAc,MAAMC,CAAN,GAAWC,IAAI,CAACC,GAAL,CAASF,CAAC,GAAG,KAAKG,KAAlB,CAAzB;AACH;;AACD,OAAKJ,KAAL,IAAc,KAAKK,GAAnB;AACA,OAAKL,KAAL,IAAc,KAAKM,MAAnB;AACA,OAAKC,UAAL,CAAgB,KAAKC,SAAL,GAAiB,KAAKhB,IAAL,CAAUO,MAAV,EAAjC;AACA,SAAO,KAAKC,KAAZ;AACH,CATD;;AAWAS,MAAM,CAACC,OAAP,GAAiB5B,oBAAjB","sourcesContent":["\n\nvar extend = require('../../internals').extend,\n\tAbstractWave = require('./AbstractWave');\n\n/**\n * @module toxi/math/waves/FMHarmonicSquareWave\n * @description\n * <p>\n * Frequency modulated <strong>bandwidth-limited</strong> square wave using a\n * fourier series of harmonics. Also uses a secondary wave to modulate the\n * frequency of the main wave.\n * </p>\n *\n * <p>\n * <strong>Note:</strong> You must NEVER call the update() method on the\n * modulating wave.\n * </p>\n * @augments toxi/math/waves/AbstractWave\n */\nvar\tFMHarmonicSquareWave = function(a,b,c,d,e) {\n\tthis.maxHarmonics = 3;\n\tif(typeof c == \"number\"){\n\t\tif(e === undefined){\n\t\t\te = new ConstantWave(0);\n\t\t}\n\t\tAbstractWave.call(this,a,b,c,d);\n\t\tthis.fmod = e;\n\t} else{\n\t\tAbstractWave.call(this,a,b);\n\t\tthis.fmod = c;\n\t}\n};\n\nextend(FMHarmonicSquareWave,AbstractWave);\n\nFMHarmonicSquareWave.prototype.getClass = function(){\n\treturn \"FMHarmonicSquareWave\";\n};\n\nFMHarmonicSquareWave.prototype.pop = function() {\n\tthis.parent.pop.call(this);\n    this.fmod.pop();\n};\n\nFMHarmonicSquareWave.prototype.push = function() {\n    this.parent.push.call(this);\n    this.fmod.push();\n};\n\nFMHarmonicSquareWave.prototype.reset = function() {\n    this.parent.reset.call(this);\n    this.fmod.reset();\n};\n\n/**\n * @class Progresses the wave and updates the result value. You must NEVER call the\n * update() method on the modulating wave since this is handled\n * automatically by this method.\n *\n * @see toxi.math.waves.AbstractWave#update()\n * @member toxi\n * @augments AbstractWave\n */\nFMHarmonicSquareWave.prototype.update = function() {\n    this.value = 0;\n    for (var i = 1; i <= this.maxHarmonics; i += 2) {\n        this.value += 1.0 / i *  Math.sin(i * this.phase);\n    }\n    this.value *= this.amp;\n    this.value += this.offset;\n    this.cyclePhase(this.frequency + this.fmod.update());\n    return this.value;\n};\n\nmodule.exports = FMHarmonicSquareWave;\n\n"]},"metadata":{},"sourceType":"script"}