{"ast":null,"code":"var mathUtils = require('../math/mathUtils');\n\nvar Triangle3D = require('./Triangle3D');\n\nvar Vec3D = require('./Vec3D');\n\nvar IsectData3D = require('./IsectData3D');\n/**\n * @param {Triangle3D} [t]\n */\n\n\nvar TriangleIntersector = function (t) {\n  this.triangle = t || new Triangle3D();\n  this.isectData = new IsectData3D();\n};\n\nTriangleIntersector.prototype = {\n  getIntersectionData: function () {\n    return this.isectData;\n  },\n  getTriangle: function () {\n    return this.triangle;\n  },\n\n  /**\n   * @param {Ray3D} ray\n   * @returns {Boolean}\n   */\n  intersectsRay: function (ray) {\n    this.isectData.isIntersection = false;\n    var n = this.triangle.computeNormal(),\n        dotprod = n.dot(ray.dir);\n\n    if (dotprod < 0) {\n      var rt = ray.sub(this.triangle.a),\n          t = -(n.x * rt.x + n.y * rt.y + n.z * rt.z) / (n.x * ray.dir.x + n.y * ray.dir.y + n.z * ray.dir.z);\n\n      if (t >= mathUtils.EPS) {\n        var pos = ray.getPointAtDistance(t); //check if pos is inside triangle\n\n        if (this.triangle.containsPoint(pos)) {\n          this.isectData.isIntersection = true;\n          this.isectData.pos = pos;\n          this.isectData.normal = n;\n          this.isectData.dist = t;\n          this.isectData.dir = this.isectData.pos.sub(ray).normalize();\n        }\n      }\n    }\n\n    return this.isectData.isIntersection;\n  },\n\n  /**\n   * @param {Triangle3D} tri\n   * @returns {TriangleIntersector}\n   */\n  setTriangle: function (tri) {\n    this.triangle = tri;\n    return this;\n  }\n};\nmodule.exports = TriangleIntersector;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/geom/TriangleIntersector.js"],"names":["mathUtils","require","Triangle3D","Vec3D","IsectData3D","TriangleIntersector","t","triangle","isectData","prototype","getIntersectionData","getTriangle","intersectsRay","ray","isIntersection","n","computeNormal","dotprod","dot","dir","rt","sub","a","x","y","z","EPS","pos","getPointAtDistance","containsPoint","normal","dist","normalize","setTriangle","tri","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,mBAAD,CAAvB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,eAAD,CAAzB;AAEC;AACD;AACA;;;AACC,IAAII,mBAAmB,GAAG,UAASC,CAAT,EAAW;AACpC,OAAKC,QAAL,GAAgBD,CAAC,IAAI,IAAIJ,UAAJ,EAArB;AACA,OAAKM,SAAL,GAAiB,IAAIJ,WAAJ,EAAjB;AACA,CAHD;;AAKAC,mBAAmB,CAACI,SAApB,GAAgC;AAC/BC,EAAAA,mBAAmB,EAAE,YAAU;AAC9B,WAAO,KAAKF,SAAZ;AACA,GAH8B;AAI/BG,EAAAA,WAAW,EAAE,YAAU;AACtB,WAAO,KAAKJ,QAAZ;AACA,GAN8B;;AAO/B;AACF;AACA;AACA;AACEK,EAAAA,aAAa,EAAE,UAASC,GAAT,EAAa;AAC3B,SAAKL,SAAL,CAAeM,cAAf,GAAgC,KAAhC;AACA,QAAIC,CAAC,GAAG,KAAKR,QAAL,CAAcS,aAAd,EAAR;AAAA,QACCC,OAAO,GAAGF,CAAC,CAACG,GAAF,CAAML,GAAG,CAACM,GAAV,CADX;;AAEA,QAAGF,OAAO,GAAG,CAAb,EAAe;AACd,UAAIG,EAAE,GAAGP,GAAG,CAACQ,GAAJ,CAAQ,KAAKd,QAAL,CAAce,CAAtB,CAAT;AAAA,UACChB,CAAC,GAAG,EAAES,CAAC,CAACQ,CAAF,GAAMH,EAAE,CAACG,CAAT,GAAaR,CAAC,CAACS,CAAF,GAAMJ,EAAE,CAACI,CAAtB,GAA0BT,CAAC,CAACU,CAAF,GAAML,EAAE,CAACK,CAArC,KAA2CV,CAAC,CAACQ,CAAF,GAAMV,GAAG,CAACM,GAAJ,CAAQI,CAAd,GAAkBR,CAAC,CAACS,CAAF,GAAMX,GAAG,CAACM,GAAJ,CAAQK,CAAhC,GAAoCT,CAAC,CAACU,CAAF,GAAMZ,GAAG,CAACM,GAAJ,CAAQM,CAA7F,CADL;;AAEA,UAAGnB,CAAC,IAAIN,SAAS,CAAC0B,GAAlB,EAAsB;AACrB,YAAIC,GAAG,GAAGd,GAAG,CAACe,kBAAJ,CAAuBtB,CAAvB,CAAV,CADqB,CAErB;;AACA,YAAG,KAAKC,QAAL,CAAcsB,aAAd,CAA4BF,GAA5B,CAAH,EAAoC;AACnC,eAAKnB,SAAL,CAAeM,cAAf,GAAgC,IAAhC;AACA,eAAKN,SAAL,CAAemB,GAAf,GAAqBA,GAArB;AACA,eAAKnB,SAAL,CAAesB,MAAf,GAAwBf,CAAxB;AACA,eAAKP,SAAL,CAAeuB,IAAf,GAAsBzB,CAAtB;AACA,eAAKE,SAAL,CAAeW,GAAf,GAAqB,KAAKX,SAAL,CAAemB,GAAf,CAAmBN,GAAnB,CAAuBR,GAAvB,EAA4BmB,SAA5B,EAArB;AACA;AACD;AACD;;AACD,WAAO,KAAKxB,SAAL,CAAeM,cAAtB;AACA,GA/B8B;;AAgC/B;AACF;AACA;AACA;AACEmB,EAAAA,WAAW,EAAE,UAASC,GAAT,EAAa;AACzB,SAAK3B,QAAL,GAAgB2B,GAAhB;AACA,WAAO,IAAP;AACA;AAvC8B,CAAhC;AA0CAC,MAAM,CAACC,OAAP,GAAiB/B,mBAAjB","sourcesContent":["var mathUtils = require('../math/mathUtils');\nvar Triangle3D = require('./Triangle3D');\nvar Vec3D = require('./Vec3D');\nvar IsectData3D = require('./IsectData3D');\n\n\t/**\n\t * @param {Triangle3D} [t]\n\t */\n\tvar TriangleIntersector = function(t){\n\t\tthis.triangle = t || new Triangle3D();\n\t\tthis.isectData = new IsectData3D();\n\t};\n\n\tTriangleIntersector.prototype = {\n\t\tgetIntersectionData: function(){\n\t\t\treturn this.isectData;\n\t\t},\n\t\tgetTriangle: function(){\n\t\t\treturn this.triangle;\n\t\t},\n\t\t/**\n\t\t * @param {Ray3D} ray\n\t\t * @returns {Boolean}\n\t\t */\n\t\tintersectsRay: function(ray){\n\t\t\tthis.isectData.isIntersection = false;\n\t\t\tvar n = this.triangle.computeNormal(),\n\t\t\t\tdotprod = n.dot(ray.dir);\n\t\t\tif(dotprod < 0){\n\t\t\t\tvar rt = ray.sub(this.triangle.a),\n\t\t\t\t\tt = -(n.x * rt.x + n.y * rt.y + n.z * rt.z) / (n.x * ray.dir.x + n.y * ray.dir.y + n.z * ray.dir.z);\n\t\t\t\tif(t >= mathUtils.EPS){\n\t\t\t\t\tvar pos = ray.getPointAtDistance(t);\n\t\t\t\t\t//check if pos is inside triangle\n\t\t\t\t\tif(this.triangle.containsPoint(pos)){\n\t\t\t\t\t\tthis.isectData.isIntersection = true;\n\t\t\t\t\t\tthis.isectData.pos = pos;\n\t\t\t\t\t\tthis.isectData.normal = n;\n\t\t\t\t\t\tthis.isectData.dist = t;\n\t\t\t\t\t\tthis.isectData.dir = this.isectData.pos.sub(ray).normalize();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.isectData.isIntersection;\n\t\t},\n\t\t/**\n\t\t * @param {Triangle3D} tri\n\t\t * @returns {TriangleIntersector}\n\t\t */\n\t\tsetTriangle: function(tri){\n\t\t\tthis.triangle = tri;\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tmodule.exports = TriangleIntersector;\n\n"]},"metadata":{},"sourceType":"script"}