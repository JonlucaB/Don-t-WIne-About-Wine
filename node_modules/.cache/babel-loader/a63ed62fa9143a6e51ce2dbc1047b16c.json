{"ast":null,"code":"var internals = require('../../internals'),\n    each = internals.each,\n    keys = internals.keys,\n    values = internals.values,\n    implementations = {};\n\nvar strats = {\n  SINGLE_COMPLEMENT: require('./SingleComplementStrategy'),\n  COMPLEMENTARY: require('./ComplementaryStrategy'),\n  SPLIT_COMPLEMENTARY: require('./SplitComplementaryStrategy'),\n  LEFT_SPLIT_COMPLEMENTARY: require('./LeftSplitComplementaryStrategy'),\n  RIGHT_SPLIT_COMPLEMENTARY: require('./RightSplitComplementaryStrategy'),\n  ANALAGOUS: require('./AnalagousStrategy'),\n  MONOCHROME: require('./MonochromeTheoryStrategy'),\n  TRIAD: require('./TriadTheoryStrategy'),\n  TETRAD: require('./TetradTheoryStrategy'),\n  COMPOUND: require('./CompoundTheoryStrategy')\n};\n\nexports.getRegisteredNames = function () {\n  return keys(implementations);\n};\n\nexports.getRegisteredStrategies = function () {\n  return values(implementations);\n};\n\nexports.getStrategyForName = function (id) {\n  return implementations[id];\n};\n\nexports.registerImplementation = function (impl) {\n  implementations[impl.getName()] = impl;\n};\n\neach(strats, function (Constructor, type) {\n  exports[type] = new strats[type]();\n  exports.registerImplementation(exports[type]);\n});","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/color/theory/colorTheoryRegistry.js"],"names":["internals","require","each","keys","values","implementations","strats","SINGLE_COMPLEMENT","COMPLEMENTARY","SPLIT_COMPLEMENTARY","LEFT_SPLIT_COMPLEMENTARY","RIGHT_SPLIT_COMPLEMENTARY","ANALAGOUS","MONOCHROME","TRIAD","TETRAD","COMPOUND","exports","getRegisteredNames","getRegisteredStrategies","getStrategyForName","id","registerImplementation","impl","getName","Constructor","type"],"mappings":"AAEI,IAAIA,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAvB;AAAA,IACIC,IAAI,GAAGF,SAAS,CAACE,IADrB;AAAA,IAEIC,IAAI,GAAGH,SAAS,CAACG,IAFrB;AAAA,IAGIC,MAAM,GAAGJ,SAAS,CAACI,MAHvB;AAAA,IAIIC,eAAe,GAAG,EAJtB;;AAMA,IAAIC,MAAM,GAAG;AACTC,EAAAA,iBAAiB,EAAEN,OAAO,CAAC,4BAAD,CADjB;AAETO,EAAAA,aAAa,EAAEP,OAAO,CAAC,yBAAD,CAFb;AAGTQ,EAAAA,mBAAmB,EAAER,OAAO,CAAC,8BAAD,CAHnB;AAITS,EAAAA,wBAAwB,EAAET,OAAO,CAAC,kCAAD,CAJxB;AAKTU,EAAAA,yBAAyB,EAAEV,OAAO,CAAC,mCAAD,CALzB;AAMTW,EAAAA,SAAS,EAAEX,OAAO,CAAC,qBAAD,CANT;AAOTY,EAAAA,UAAU,EAAEZ,OAAO,CAAC,4BAAD,CAPV;AAQTa,EAAAA,KAAK,EAAEb,OAAO,CAAC,uBAAD,CARL;AASTc,EAAAA,MAAM,EAAEd,OAAO,CAAC,wBAAD,CATN;AAUTe,EAAAA,QAAQ,EAAEf,OAAO,CAAC,0BAAD;AAVR,CAAb;;AAaAgB,OAAO,CAACC,kBAAR,GAA6B,YAAU;AACnC,SAAOf,IAAI,CAACE,eAAD,CAAX;AACH,CAFD;;AAIAY,OAAO,CAACE,uBAAR,GAAkC,YAAU;AACxC,SAAOf,MAAM,CAACC,eAAD,CAAb;AACH,CAFD;;AAIAY,OAAO,CAACG,kBAAR,GAA6B,UAAUC,EAAV,EAAc;AACvC,SAAOhB,eAAe,CAACgB,EAAD,CAAtB;AACH,CAFD;;AAIAJ,OAAO,CAACK,sBAAR,GAAiC,UAAUC,IAAV,EAAgB;AAC7ClB,EAAAA,eAAe,CAAEkB,IAAI,CAACC,OAAL,EAAF,CAAf,GAAoCD,IAApC;AACH,CAFD;;AAIArB,IAAI,CAACI,MAAD,EAAS,UAAUmB,WAAV,EAAuBC,IAAvB,EAA6B;AACtCT,EAAAA,OAAO,CAACS,IAAD,CAAP,GAAgB,IAAKpB,MAAM,CAACoB,IAAD,CAAX,EAAhB;AACAT,EAAAA,OAAO,CAACK,sBAAR,CAAgCL,OAAO,CAACS,IAAD,CAAvC;AACH,CAHG,CAAJ","sourcesContent":["\n\n    var internals = require('../../internals'),\n        each = internals.each,\n        keys = internals.keys,\n        values = internals.values,\n        implementations = {};\n\n    var strats = {\n        SINGLE_COMPLEMENT: require('./SingleComplementStrategy'),\n        COMPLEMENTARY: require('./ComplementaryStrategy'),\n        SPLIT_COMPLEMENTARY: require('./SplitComplementaryStrategy'),\n        LEFT_SPLIT_COMPLEMENTARY: require('./LeftSplitComplementaryStrategy'),\n        RIGHT_SPLIT_COMPLEMENTARY: require('./RightSplitComplementaryStrategy'),\n        ANALAGOUS: require('./AnalagousStrategy'),\n        MONOCHROME: require('./MonochromeTheoryStrategy'),\n        TRIAD: require('./TriadTheoryStrategy'),\n        TETRAD: require('./TetradTheoryStrategy'),\n        COMPOUND: require('./CompoundTheoryStrategy')\n    };\n\n    exports.getRegisteredNames = function(){\n        return keys(implementations);\n    };\n\n    exports.getRegisteredStrategies = function(){\n        return values(implementations);\n    };\n\n    exports.getStrategyForName = function( id ){\n        return implementations[id];\n    };\n\n    exports.registerImplementation = function( impl ){\n        implementations[ impl.getName() ] = impl;\n    };\n\n    each(strats, function( Constructor, type ){\n        exports[type] = new (strats[type])();\n        exports.registerImplementation( exports[type] );\n    });\n\n\n\n"]},"metadata":{},"sourceType":"script"}