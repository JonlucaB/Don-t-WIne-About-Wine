{"ast":null,"code":"var Vec2D = require('../../geom/Vec2D'),\n    has = require('../../internals/has'),\n    Ray2D = require('../../geom/Ray2D'),\n    Rect = require('../../geom/Rect');\n\nvar RectConstraint = function (a, b) {\n  if (arguments.length == 1) {\n    if (typeof a.copy === 'function') {\n      //if passed in as a toxi.geom.Rect\n      this.rect = a.copy();\n    } else if (has.XYWidthHeight(a)) {\n      //if passed in as { x: y: width: height: }\n      this.rect = new Rect(a);\n    }\n  } else if (arguments.length > 1) {\n    this.rect = new Rect(a, b);\n  }\n\n  if (!this.rect) {\n    throw new Error('Received Incorrect arguments');\n  }\n\n  this.intersectRay = new Ray2D(this.rect.getCentroid(), new Vec2D());\n};\n\nRectConstraint.prototype = {\n  applyConstraint: function (p) {\n    if (this.rect.containsPoint(p)) {\n      p.set(this.rect.intersectsRay(this.intersectRay.setDirection(this.intersectRay.sub(p)), 0, Number.MAX_VALUE));\n    }\n  },\n  getBox: function () {\n    return this.rect.copy();\n  },\n  setBox: function (rect) {\n    this.rect = rect.copy();\n    this.intersectRay.set(this.rect.getCentroid());\n  }\n};\nmodule.exports = RectConstraint;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/physics2d/constraints/RectConstraint.js"],"names":["Vec2D","require","has","Ray2D","Rect","RectConstraint","a","b","arguments","length","copy","rect","XYWidthHeight","Error","intersectRay","getCentroid","prototype","applyConstraint","p","containsPoint","set","intersectsRay","setDirection","sub","Number","MAX_VALUE","getBox","setBox","module","exports"],"mappings":"AAEI,IAAIA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAAnB;AAAA,IACIC,GAAG,GAAGD,OAAO,CAAC,qBAAD,CADjB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAAC,kBAAD,CAFnB;AAAA,IAGIG,IAAI,GAAGH,OAAO,CAAC,iBAAD,CAHlB;;AAKA,IAAII,cAAc,GAAG,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC9B,MAAGC,SAAS,CAACC,MAAV,IAAoB,CAAvB,EAAyB;AACrB,QAAG,OAAOH,CAAC,CAACI,IAAT,KAAkB,UAArB,EAAiC;AAC7B;AACA,WAAKC,IAAL,GAAYL,CAAC,CAACI,IAAF,EAAZ;AACH,KAHD,MAGO,IAAIR,GAAG,CAACU,aAAJ,CAAkBN,CAAlB,CAAJ,EAA0B;AAC7B;AACA,WAAKK,IAAL,GAAY,IAAIP,IAAJ,CAASE,CAAT,CAAZ;AACH;AACJ,GARD,MAQO,IAAGE,SAAS,CAACC,MAAV,GAAmB,CAAtB,EAAwB;AAC3B,SAAKE,IAAL,GAAY,IAAIP,IAAJ,CAASE,CAAT,EAAWC,CAAX,CAAZ;AACH;;AACD,MAAI,CAAC,KAAKI,IAAV,EAAgB;AACZ,UAAM,IAAIE,KAAJ,CAAU,8BAAV,CAAN;AACH;;AACD,OAAKC,YAAL,GAAoB,IAAIX,KAAJ,CAAU,KAAKQ,IAAL,CAAUI,WAAV,EAAV,EAAmC,IAAIf,KAAJ,EAAnC,CAApB;AACH,CAhBD;;AAkBAK,cAAc,CAACW,SAAf,GAA2B;AACvBC,EAAAA,eAAe,EAAE,UAASC,CAAT,EAAW;AACxB,QAAG,KAAKP,IAAL,CAAUQ,aAAV,CAAwBD,CAAxB,CAAH,EAA8B;AAC1BA,MAAAA,CAAC,CAACE,GAAF,CAAM,KAAKT,IAAL,CAAUU,aAAV,CAAwB,KAAKP,YAAL,CAAkBQ,YAAlB,CAA+B,KAAKR,YAAL,CAAkBS,GAAlB,CAAsBL,CAAtB,CAA/B,CAAxB,EAAiF,CAAjF,EAAmFM,MAAM,CAACC,SAA1F,CAAN;AACH;AACJ,GALsB;AAOvBC,EAAAA,MAAM,EAAE,YAAU;AACd,WAAO,KAAKf,IAAL,CAAUD,IAAV,EAAP;AACH,GATsB;AAWvBiB,EAAAA,MAAM,EAAE,UAAShB,IAAT,EAAc;AAClB,SAAKA,IAAL,GAAYA,IAAI,CAACD,IAAL,EAAZ;AACA,SAAKI,YAAL,CAAkBM,GAAlB,CAAsB,KAAKT,IAAL,CAAUI,WAAV,EAAtB;AACH;AAdsB,CAA3B;AAiBAa,MAAM,CAACC,OAAP,GAAiBxB,cAAjB","sourcesContent":["\n\n    var Vec2D = require('../../geom/Vec2D'),\n        has = require('../../internals/has'),\n        Ray2D = require('../../geom/Ray2D'),\n        Rect = require('../../geom/Rect');\n\n    var\tRectConstraint = function(a,b){\n        if(arguments.length == 1){\n            if(typeof a.copy === 'function' ){\n                //if passed in as a toxi.geom.Rect\n                this.rect = a.copy();\n            } else if( has.XYWidthHeight(a) ){\n                //if passed in as { x: y: width: height: }\n                this.rect = new Rect(a);\n            }\n        } else if(arguments.length > 1){\n            this.rect = new Rect(a,b);\n        }\n        if( !this.rect ){\n            throw new Error('Received Incorrect arguments');\n        }\n        this.intersectRay = new Ray2D(this.rect.getCentroid(), new Vec2D());\n    };\n\n    RectConstraint.prototype = {\n        applyConstraint: function(p){\n            if(this.rect.containsPoint(p)){\n                p.set(this.rect.intersectsRay(this.intersectRay.setDirection(this.intersectRay.sub(p)),0,Number.MAX_VALUE));\n            }\n        },\n\n        getBox: function(){\n            return this.rect.copy();\n        },\n\n        setBox: function(rect){\n            this.rect = rect.copy();\n            this.intersectRay.set(this.rect.getCentroid());\n        }\n    };\n\n    module.exports = RectConstraint;\n\n"]},"metadata":{},"sourceType":"script"}