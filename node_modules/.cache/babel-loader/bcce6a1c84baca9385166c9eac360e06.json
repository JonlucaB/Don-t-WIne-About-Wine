{"ast":null,"code":"var extend = require('../../internals').extend,\n    AbstractWave = require('./AbstractWave');\n/**\n * @module toxi/math/waves/FMSineWave\n * @augments toxi/math/waves/AbstractWave\n */\n\n\nvar FMSineWave = function (a, b, c, d, e) {\n  if (typeof c == \"number\") {\n    AbstractWave.call(this, a, b, c, d);\n    this.fmod = e;\n  } else {\n    AbstractWave.call(this, a, b);\n    this.fmod = c;\n  }\n};\n\nextend(FMSineWave, AbstractWave);\n\nFMSineWave.prototype.getClass = function () {\n  return \"FMSineWave\";\n};\n\nFMSineWave.prototype.pop = function () {\n  this.parent.pop.call(this);\n  this.fmod.pop();\n};\n\nFMSineWave.prototype.push = function () {\n  this.parent.push.call(this);\n  this.fmod.push();\n};\n\nFMSineWave.prototype.reset = function () {\n  this.parent.reset.call(this);\n  this.fmod.reset();\n};\n\nFMSineWave.prototype.update = function () {\n  this.value = Math.sin(this.phase) * this.amp + this.offset;\n  this.cyclePhase(this.frequency + this.fmod.update());\n  return this.value;\n};\n\nmodule.exports = FMSineWave;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/math/waves/FMSineWave.js"],"names":["extend","require","AbstractWave","FMSineWave","a","b","c","d","e","call","fmod","prototype","getClass","pop","parent","push","reset","update","value","Math","sin","phase","amp","offset","cyclePhase","frequency","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,MAAxC;AAAA,IACCE,YAAY,GAAGD,OAAO,CAAC,gBAAD,CADvB;AAGA;AACA;AACA;AACA;;;AACA,IAAIE,UAAU,GAAG,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAeC,CAAf,EAAiBC,CAAjB,EAAmB;AACnC,MAAG,OAAOF,CAAP,IAAa,QAAhB,EAAyB;AACxBJ,IAAAA,YAAY,CAACO,IAAb,CAAkB,IAAlB,EAAuBL,CAAvB,EAAyBC,CAAzB,EAA2BC,CAA3B,EAA6BC,CAA7B;AACA,SAAKG,IAAL,GAAYF,CAAZ;AACA,GAHD,MAGK;AACJN,IAAAA,YAAY,CAACO,IAAb,CAAkB,IAAlB,EAAuBL,CAAvB,EAAyBC,CAAzB;AACA,SAAKK,IAAL,GAAYJ,CAAZ;AACA;AACD,CARD;;AAUAN,MAAM,CAACG,UAAD,EAAYD,YAAZ,CAAN;;AAEAC,UAAU,CAACQ,SAAX,CAAqBC,QAArB,GAAgC,YAAU;AACzC,SAAO,YAAP;AACA,CAFD;;AAIAT,UAAU,CAACQ,SAAX,CAAqBE,GAArB,GAA2B,YAAU;AACpC,OAAKC,MAAL,CAAYD,GAAZ,CAAgBJ,IAAhB,CAAqB,IAArB;AACA,OAAKC,IAAL,CAAUG,GAAV;AACA,CAHD;;AAKAV,UAAU,CAACQ,SAAX,CAAqBI,IAArB,GAA4B,YAAU;AACrC,OAAKD,MAAL,CAAYC,IAAZ,CAAiBN,IAAjB,CAAsB,IAAtB;AACA,OAAKC,IAAL,CAAUK,IAAV;AACA,CAHD;;AAKAZ,UAAU,CAACQ,SAAX,CAAqBK,KAArB,GAA6B,YAAU;AACtC,OAAKF,MAAL,CAAYE,KAAZ,CAAkBP,IAAlB,CAAuB,IAAvB;AACA,OAAKC,IAAL,CAAUM,KAAV;AACA,CAHD;;AAKAb,UAAU,CAACQ,SAAX,CAAqBM,MAArB,GAA8B,YAAU;AACvC,OAAKC,KAAL,GAAcC,IAAI,CAACC,GAAL,CAAS,KAAKC,KAAd,IAAqB,KAAKC,GAA3B,GAAkC,KAAKC,MAApD;AACA,OAAKC,UAAL,CAAgB,KAAKC,SAAL,GAAiB,KAAKf,IAAL,CAAUO,MAAV,EAAjC;AACA,SAAO,KAAKC,KAAZ;AACA,CAJD;;AAMAQ,MAAM,CAACC,OAAP,GAAiBxB,UAAjB","sourcesContent":["\n\nvar extend = require('../../internals').extend,\n\tAbstractWave = require('./AbstractWave');\n\n/**\n * @module toxi/math/waves/FMSineWave\n * @augments toxi/math/waves/AbstractWave\n */\nvar\tFMSineWave = function(a,b,c,d,e){\n\tif(typeof(c) == \"number\"){\n\t\tAbstractWave.call(this,a,b,c,d);\n\t\tthis.fmod = e;\n\t}else{\n\t\tAbstractWave.call(this,a,b);\n\t\tthis.fmod = c;\n\t}\n};\n\nextend(FMSineWave,AbstractWave);\n\nFMSineWave.prototype.getClass = function(){\n\treturn \"FMSineWave\";\n};\n\nFMSineWave.prototype.pop = function(){\n\tthis.parent.pop.call(this);\n\tthis.fmod.pop();\n};\n\nFMSineWave.prototype.push = function(){\n\tthis.parent.push.call(this);\n\tthis.fmod.push();\n};\n\nFMSineWave.prototype.reset = function(){\n\tthis.parent.reset.call(this);\n\tthis.fmod.reset();\n};\n\nFMSineWave.prototype.update = function(){\n\tthis.value = (Math.sin(this.phase)*this.amp) + this.offset;\n\tthis.cyclePhase(this.frequency + this.fmod.update());\n\treturn this.value;\n};\n\nmodule.exports = FMSineWave;\n\n"]},"metadata":{},"sourceType":"script"}