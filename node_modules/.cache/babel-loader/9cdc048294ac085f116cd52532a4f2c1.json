{"ast":null,"code":"/*\n  You can use these lines of code to create a priority queue and then\n  fill it with wines after the matching process\n\n  var wineMatches = new PriorityQueue();\n  wineMatches = match(priceScale, sweetScale, yearScale, location, type);\n  \n  while(!wineMatches.isEmpty()) {\n    console.log(wineMatches.dequeue().element.name);\n                                      ^You have to use '.element' to get the wine,\n                                      or else you will get a QElement(element, priority)\n                                      object!\n  \n*/\nimport PriorityQueue from \"./PriorityQueue.js\";\nimport twentyWines from \"./wine_data.js\";\n\nfunction match(price, sweetness, year, location, type) {\n  var wineMatches = new PriorityQueue();\n\n  var _price, _sweetness, _year, _location, _type;\n  /*\n    The matching takes 5 characteristics of the wine, and then we generate \n    a score based on similarities that is on a scale of 1-100 (1 being the worst match)\n    We do this for every wine and add them to a priority queue and give them\n    a priority based on their similarity score. Each trait is worth 20%\n  */\n\n\n  twentyWines.map(wine => {\n    _price = wine.price;\n    _sweetness = wine.sweetness;\n    _year = wine.year;\n    _location = wine.region;\n    _type = _type;\n    var match = 0; //generate price similarity\n\n    match += Math.abs((_price - price) / price * 100 / 25); //generate sweetness similarity\n\n    match += Math.abs((_sweetness - sweetness) / _sweetness * 100 / 25); //generate year similarity\n\n    match += Math.abs((_year - year) / year * 100 / 25); //does location match?\n\n    match += _location == location ? 25 : 0; //does the type of wine match? \n\n    match += type.includes(_type) ? 25 : 0; //console.log(wine.name+\" \"+match);\n\n    wineMatches.enqueue(wine, match);\n  });\n  return wineMatches;\n}\n\nexport default match;","map":{"version":3,"sources":["/Users/jessicagarcia-tejeda/Wine/Don-t-WIne-About-Wine/src/Data/Match.js"],"names":["PriorityQueue","twentyWines","match","price","sweetness","year","location","type","wineMatches","_price","_sweetness","_year","_location","_type","map","wine","region","Math","abs","includes","enqueue"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,SAAtB,EAAiCC,IAAjC,EAAuCC,QAAvC,EAAiDC,IAAjD,EAAuD;AACrD,MAAIC,WAAW,GAAG,IAAIR,aAAJ,EAAlB;;AAEA,MAAIS,MAAJ,EAAYC,UAAZ,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0CC,KAA1C;AACA;AACF;AACA;AACA;AACA;AACA;;;AACEZ,EAAAA,WAAW,CAACa,GAAZ,CAAiBC,IAAD,IAAU;AACtBN,IAAAA,MAAM,GAAGM,IAAI,CAACZ,KAAd;AACAO,IAAAA,UAAU,GAAGK,IAAI,CAACX,SAAlB;AACAO,IAAAA,KAAK,GAAGI,IAAI,CAACV,IAAb;AACAO,IAAAA,SAAS,GAAGG,IAAI,CAACC,MAAjB;AACAH,IAAAA,KAAK,GAAGA,KAAR;AAEF,QAAIX,KAAK,GAAG,CAAZ,CAPwB,CAStB;;AACAA,IAAAA,KAAK,IAAIe,IAAI,CAACC,GAAL,CAAW,CAACT,MAAM,GAAGN,KAAV,IAAiBA,KAAlB,GAA2B,GAA5B,GAAiC,EAA1C,CAAT,CAVsB,CAWtB;;AACAD,IAAAA,KAAK,IAAIe,IAAI,CAACC,GAAL,CAAW,CAACR,UAAU,GAAGN,SAAd,IAAyBM,UAA1B,GAAuC,GAAxC,GAA6C,EAAtD,CAAT,CAZsB,CAatB;;AACAR,IAAAA,KAAK,IAAIe,IAAI,CAACC,GAAL,CAAW,CAACP,KAAK,GAAGN,IAAT,IAAeA,IAAhB,GAAwB,GAAzB,GAA8B,EAAvC,CAAT,CAdsB,CAetB;;AACAH,IAAAA,KAAK,IAAKU,SAAS,IAAIN,QAAd,GAA0B,EAA1B,GAA+B,CAAxC,CAhBsB,CAiBtB;;AACAJ,IAAAA,KAAK,IAAKK,IAAI,CAACY,QAAL,CAAcN,KAAd,CAAD,GAAyB,EAAzB,GAA8B,CAAvC,CAlBsB,CAoBtB;;AAEAL,IAAAA,WAAW,CAACY,OAAZ,CAAoBL,IAApB,EAA0Bb,KAA1B;AACH,GAvBD;AAwBA,SAAOM,WAAP;AACD;;AAED,eAAeN,KAAf","sourcesContent":["/*\n  You can use these lines of code to create a priority queue and then\n  fill it with wines after the matching process\n\n  var wineMatches = new PriorityQueue();\n  wineMatches = match(priceScale, sweetScale, yearScale, location, type);\n  \n  while(!wineMatches.isEmpty()) {\n    console.log(wineMatches.dequeue().element.name);\n                                      ^You have to use '.element' to get the wine,\n                                      or else you will get a QElement(element, priority)\n                                      object!\n  \n*/\nimport PriorityQueue from \"./PriorityQueue.js\";\nimport twentyWines from \"./wine_data.js\";\n\nfunction match(price, sweetness, year, location, type) {\n  var wineMatches = new PriorityQueue();\n\n  var _price, _sweetness, _year, _location, _type;\n  /*\n    The matching takes 5 characteristics of the wine, and then we generate \n    a score based on similarities that is on a scale of 1-100 (1 being the worst match)\n    We do this for every wine and add them to a priority queue and give them\n    a priority based on their similarity score. Each trait is worth 20%\n  */\n  twentyWines.map((wine) => {\n      _price = wine.price;\n      _sweetness = wine.sweetness;\n      _year = wine.year;\n      _location = wine.region;\n      _type = _type;\n\n    var match = 0;\n\n      //generate price similarity\n      match += Math.abs((((_price - price)/price) * 100)/25);\n      //generate sweetness similarity\n      match += Math.abs((((_sweetness - sweetness)/_sweetness) *100)/25);\n      //generate year similarity\n      match += Math.abs((((_year - year)/year) * 100)/25);\n      //does location match?\n      match += (_location == location) ? 25 : 0;\n      //does the type of wine match? \n      match += (type.includes(_type)) ? 25 : 0;\n\n      //console.log(wine.name+\" \"+match);\n\n      wineMatches.enqueue(wine, match);\n  });\n  return wineMatches;\n}\n\nexport default match;\n\n\n"]},"metadata":{},"sourceType":"module"}