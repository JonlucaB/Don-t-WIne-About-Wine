{"ast":null,"code":"/**\n * @class\n * @member toxi\n */\nvar VertexSelector = function (mesh) {\n  this.mesh = mesh;\n  this.selection = [];\n};\n\nVertexSelector.prototype = {\n  /**\n      * Adds all vertices selected by the given selector to the current\n      * selection. The other selector needs to be assigned to the same mesh\n      * instance.\n      * @param sel2 other selector\n      * @return itself\n      */\n  addSelection: function (sel2) {\n    this.checkMeshIdentity(sel2.getMesh());\n    this.selection = this.selection.concat(sel2.getSelection());\n    return this;\n  },\n\n  /**\n      * Utility function to check if the given mesh is the same instance as ours.\n      * @param mesh2\n      */\n  checkMeshIdentity: function (mesh2) {\n    if (mesh2 != this.mesh) {\n      throw new Error(\"The given selector is not using the same mesh instance\");\n    }\n  },\n  clearSelection: function () {\n    this.selection = [];\n    return this;\n  },\n  getMesh: function () {\n    return this.mesh;\n  },\n  getSelection: function () {\n    return this.selection;\n  },\n\n  /**\n   * Creates a new selection of all vertices NOT currently selected.\n   * @return itself\n   */\n  invertSelection: function () {\n    var newSel = [];\n    var vertices = this.mesh.getVertices();\n    var l = vertices.length;\n\n    for (var i = 0; i < l; i++) {\n      var v = vertices[i];\n\n      if (this.selection.indexOf(v) < 0) {\n        newSel.push(v);\n      }\n    }\n\n    this.selection = newSel;\n    return this;\n  },\n\n  /**\n      * Selects vertices identical or closest to the ones given in the list of\n      * points.\n      * @param points\n      * @return itself\n      */\n  selectSimilar: function (points) {\n    var l = points.length;\n\n    for (var i = 0; i < l; i++) {\n      var v = points[i];\n      this.selection.push(this.mesh.getClosestVertexToPoint(v));\n    }\n\n    return this;\n  },\n\n  /**\n  * Selects vertices using an implementation specific method. This is the\n  * only method which needs to be implemented by any selector subclass.\n  * @return itself\n  */\n  selectVertices: function () {\n    return this;\n  },\n  setMesh: function (mesh) {\n    this.mesh = mesh;\n    this.clearSelection();\n  },\n  size: function () {\n    return this.selection.length;\n  },\n\n  /**\n      * Removes all vertices selected by the given selector from the current\n      * selection. The other selector needs to be assigned to the same mesh\n      * instance.\n      * @param sel2 other selector\n      * @return itself\n      */\n  subtractSelection: function (sel2) {\n    this.checkMeshIdentity(sel2.getMesh());\n    var removeThese = sel2.getSelection();\n    var i,\n        l = removeThese.length;\n\n    for (i = 0; i < l; i++) {\n      this.selection.splice(this.selection.indexOf(removeThese[i]), 1);\n    }\n\n    return this;\n  }\n};\nmodule.exports = VertexSelector;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/mesh/VertexSelector.js"],"names":["VertexSelector","mesh","selection","prototype","addSelection","sel2","checkMeshIdentity","getMesh","concat","getSelection","mesh2","Error","clearSelection","invertSelection","newSel","vertices","getVertices","l","length","i","v","indexOf","push","selectSimilar","points","getClosestVertexToPoint","selectVertices","setMesh","size","subtractSelection","removeThese","splice","module","exports"],"mappings":"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","sourcesContent":["\n/**\n * @class\n * @member toxi\n */\nvar VertexSelector = function(mesh){\n\tthis.mesh = mesh;\n\tthis.selection = [];\n};\n\nVertexSelector.prototype = {\n\t/**\n     * Adds all vertices selected by the given selector to the current\n     * selection. The other selector needs to be assigned to the same mesh\n     * instance.\n     * @param sel2 other selector\n     * @return itself\n     */\n\taddSelection: function(sel2){\n\t\tthis.checkMeshIdentity(sel2.getMesh());\n\t\tthis.selection = this.selection.concat(sel2.getSelection());\n\t\treturn this;\n\t},\n\t/**\n     * Utility function to check if the given mesh is the same instance as ours.\n     * @param mesh2\n     */\n    checkMeshIdentity: function(mesh2) {\n        if (mesh2 != this.mesh) {\n            throw new Error(\"The given selector is not using the same mesh instance\");\n        }\n    },\n    \n    clearSelection: function() {\n        this.selection = [];\n        return this;\n    },\n\n\tgetMesh: function() {\n        return this.mesh;\n    },\n    \n    getSelection: function() {\n        return this.selection;\n    },\n    /**\n     * Creates a new selection of all vertices NOT currently selected.\n     * @return itself\n     */\n    invertSelection: function() {\n        var newSel = [];\n        var vertices = this.mesh.getVertices();\n        var l = vertices.length;\n        for (var i=0;i<l;i++) {\n\t\t\tvar v = vertices[i];\n            if (this.selection.indexOf(v) < 0 ) {\n                newSel.push(v);\n            }\n        }\n        this.selection = newSel;\n        return this;\n    },\n\n\t/**\n     * Selects vertices identical or closest to the ones given in the list of\n     * points.\n     * @param points\n     * @return itself\n     */\n    selectSimilar: function(points) {\n\t\tvar l = points.length;\n        for (var i=0;i<l;i++) {\n\t\t\tvar v = points[i];\n            this.selection.push( this.mesh.getClosestVertexToPoint(v) );\n        }\n        return this;\n    },\n    \n     /**\n     * Selects vertices using an implementation specific method. This is the\n     * only method which needs to be implemented by any selector subclass.\n     * @return itself\n     */\n   selectVertices: function(){\n        return this;\n   },\n\t\n\tsetMesh: function(mesh) {\n        this.mesh = mesh;\n        this.clearSelection();\n    },\n    \n    size: function() {\n        return this.selection.length;\n    },\n\t/**\n     * Removes all vertices selected by the given selector from the current\n     * selection. The other selector needs to be assigned to the same mesh\n     * instance.\n     * @param sel2 other selector\n     * @return itself\n     */\n\tsubtractSelection: function(sel2) {\n        this.checkMeshIdentity(sel2.getMesh());\n        var removeThese = sel2.getSelection();\n        var i,l = removeThese.length;\n        for ( i=0; i<l; i++ ) {\n            this.selection.splice( this.selection.indexOf(removeThese[i]), 1 );\n        }\n        return this;\n\t}\n};\n\nmodule.exports = VertexSelector;\n\n   \n  \n\n"]},"metadata":{},"sourceType":"script"}