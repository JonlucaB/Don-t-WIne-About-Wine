{"ast":null,"code":"var has = require('./has');\n\nvar apply = function (properties) {\n  return function (o) {\n    return has.all(o, properties);\n  };\n};\n\nexports.Array = Array.isArray || function (a) {\n  return a.toString() == '[object Array]';\n};\n\nexports.Object = function (a) {\n  return typeof a === 'object';\n};\n\nexports.undef = function (a) {\n  return a === void 0;\n}; //determines if a value is undefined or null\n\n\nexports.existy = function (a) {\n  return a != null;\n};\n\nexports.String = function (a) {\n  return typeof a === 'string';\n};\n\nexports.Number = function (a) {\n  return typeof a === 'number';\n};\n\nexports.Function = function (a) {\n  return typeof a === 'function';\n};\n\nexports.AABB = apply(['setExtent', 'getNormalForPoint']);\nexports.ColorGradient = apply(['gradient', 'interpolator', 'maxDither', 'addColorAt', 'calcGradient']);\nexports.ColorList = apply(['add', 'addAll', 'adjustBrightness', 'adjustSaturation']);\nexports.ColorRange = apply(['add', 'addAlphaRange', 'addBrightnessRange', 'addHueRange']);\nexports.Circle = apply(['getCircumference', 'getRadius', 'intersectsCircle']);\nexports.FloatRange = apply(['min', 'max', 'adjustCurrentBy', 'getMedian']);\nexports.Hue = apply(['getHue', 'isPrimary']);\nexports.Line2D = apply(['closestPointTo', 'intersectLine', 'getLength']);\nexports.Matrix4x4 = apply(['identity', 'invert', 'setFrustrum']);\nexports.Rect = apply(['x', 'y', 'width', 'height', 'getArea', 'getCentroid', 'getDimensions']);\nexports.Sphere = apply(['x', 'y', 'z', 'radius', 'toMesh']);\nexports.ScaleMap = apply(['mapFunction', 'setInputRange', 'setOutputRange', 'getMappedValueFor']);\nexports.TColor = apply(['rgb', 'cmyk', 'hsv']);\nexports.ParticleBehavior = apply(['applyBehavior', 'configure']);\nexports.VerletParticle2D = apply(['x', 'y', 'weight']);","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/internals/is.js"],"names":["has","require","apply","properties","o","all","exports","Array","isArray","a","toString","Object","undef","existy","String","Number","Function","AABB","ColorGradient","ColorList","ColorRange","Circle","FloatRange","Hue","Line2D","Matrix4x4","Rect","Sphere","ScaleMap","TColor","ParticleBehavior","VerletParticle2D"],"mappings":"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","sourcesContent":["var has = require('./has');\n\n    var apply = function(properties){\n        return function( o ){\n            return has.all(o, properties);\n        };\n    };\n\n    exports.Array = Array.isArray || function(a){\n        return a.toString() == '[object Array]';\n    };\n    exports.Object = function(a){\n        return typeof a === 'object';\n    };\n    exports.undef = function(a){\n        return a === void 0;\n    };\n    //determines if a value is undefined or null\n    exports.existy = function(a){\n        return a != null;\n    };\n    exports.String = function(a){\n        return typeof a === 'string';\n    };\n    exports.Number = function(a){\n        return typeof a === 'number';\n    };\n    exports.Function = function(a){\n        return typeof a === 'function';\n    };\n\texports.AABB = apply(['setExtent','getNormalForPoint']);\n    exports.ColorGradient = apply(['gradient','interpolator','maxDither','addColorAt','calcGradient']);\n    exports.ColorList = apply(['add','addAll','adjustBrightness','adjustSaturation']);\n    exports.ColorRange = apply(['add', 'addAlphaRange','addBrightnessRange','addHueRange']);\n    exports.Circle = apply(['getCircumference','getRadius','intersectsCircle']);\n    exports.FloatRange = apply(['min','max','adjustCurrentBy','getMedian']);\n    exports.Hue = apply(['getHue','isPrimary']);\n\texports.Line2D = apply(['closestPointTo','intersectLine','getLength']);\n\texports.Matrix4x4 = apply(['identity', 'invert', 'setFrustrum']);\n\texports.Rect = apply(['x','y','width','height','getArea','getCentroid','getDimensions']);\n\texports.Sphere = apply(['x','y','z','radius','toMesh']);\n    exports.ScaleMap = apply(['mapFunction','setInputRange','setOutputRange','getMappedValueFor']);\n\texports.TColor = apply(['rgb','cmyk','hsv']);\n\texports.ParticleBehavior = apply(['applyBehavior','configure']);\n\texports.VerletParticle2D = apply(['x','y','weight']);\n\n"]},"metadata":{},"sourceType":"script"}