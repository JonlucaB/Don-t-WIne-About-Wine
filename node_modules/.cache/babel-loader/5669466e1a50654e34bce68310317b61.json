{"ast":null,"code":"var extend = require('../internals').extend,\n    Vec3D = require('./Vec3D'),\n    Line3D = require('./Line3D');\n/**\n * @class\n * @member toxi\n */\n\n\nvar Ray3D = function (a, b, c, d) {\n  var o, dir;\n\n  if (arguments.length == 4) {\n    o = new Vec3D(a, b, c);\n    dir = d;\n  } else if (arguments.length == 2) {\n    o = a;\n    dir = b;\n  } else {\n    o = new Vec3D();\n    dir = Vec3D.Y_AXIS.copy();\n  }\n\n  Vec3D.apply(this, [o]);\n  this.dir = dir;\n};\n\nextend(Ray3D, Vec3D);\n/**\n\tReturns a copy of the ray's direction vector.\n\t@return vector\n*/\n\nRay3D.prototype.getDirection = function () {\n  return this.dir.copy();\n};\n/**\n\tCalculates the distance between the given point and the infinite line\n\tcoinciding with this ray.\n\t@param p\n*/\n\n\nRay3D.prototype.getDistanceToPoint = function (p) {\n  var sp = p.sub(this);\n  return sp.distanceTo(this.dir.scale(sp.dot(this.dir)));\n};\n/**\n\tReturns the point at the given distance on the ray. The distance can be\n\tany real number.\n\t@param dist\n\t@return vector\n*/\n\n\nRay3D.prototype.getPointAtDistance = function (dist) {\n  return this.add(this.dir.scale(dist));\n};\n/**\n  Uses a normalized copy of the given vector as the ray direction.\n  @param d new direction\n  @return itself\n*/\n\n\nRay3D.prototype.setDirection = function (d) {\n  this.dir.set(d).normalize();\n  return this;\n};\n/**\n  Converts the ray into a 3D Line segment with its start point coinciding\n  with the ray origin and its other end point at the given distance along\n  the ray.\n\n  @param dist end point distance\n  @return line segment\n*/\n\n\nRay3D.prototype.toLine3DWithPointAtDistance = function (dist) {\n  Line3D = require('./Line3D');\n  return new Line3D(this, this.getPointAtDistance(dist));\n};\n\nRay3D.prototype.toString = function () {\n  return \"origin: \" + this.parent.toString.call(this) + \" dir: \" + this.dir;\n};\n\nmodule.exports = Ray3D;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/Ray3D.js"],"names":["extend","require","Vec3D","Line3D","Ray3D","a","b","c","d","o","dir","arguments","length","Y_AXIS","copy","apply","prototype","getDirection","getDistanceToPoint","p","sp","sub","distanceTo","scale","dot","getPointAtDistance","dist","add","setDirection","set","normalize","toLine3DWithPointAtDistance","toString","parent","call","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,MAArC;AAAA,IACCE,KAAK,GAAGD,OAAO,CAAC,SAAD,CADhB;AAAA,IAECE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAFjB;AAIA;AACA;AACA;AACA;;;AACA,IAAIG,KAAK,GAAG,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAeC,CAAf,EAAiB;AAC5B,MAAIC,CAAJ,EAAOC,GAAP;;AACA,MAAGC,SAAS,CAACC,MAAV,IAAoB,CAAvB,EAAyB;AACxBH,IAAAA,CAAC,GAAG,IAAIP,KAAJ,CAAUG,CAAV,EAAYC,CAAZ,EAAcC,CAAd,CAAJ;AACAG,IAAAA,GAAG,GAAGF,CAAN;AACA,GAHD,MAIK,IAAGG,SAAS,CAACC,MAAV,IAAoB,CAAvB,EAAyB;AAC7BH,IAAAA,CAAC,GAAGJ,CAAJ;AACAK,IAAAA,GAAG,GAAGJ,CAAN;AACA,GAHI,MAIA;AACJG,IAAAA,CAAC,GAAG,IAAIP,KAAJ,EAAJ;AACAQ,IAAAA,GAAG,GAAGR,KAAK,CAACW,MAAN,CAAaC,IAAb,EAAN;AACA;;AACDZ,EAAAA,KAAK,CAACa,KAAN,CAAY,IAAZ,EAAiB,CAACN,CAAD,CAAjB;AACA,OAAKC,GAAL,GAAWA,GAAX;AACA,CAhBD;;AAkBAV,MAAM,CAACI,KAAD,EAAOF,KAAP,CAAN;AAEA;AACA;AACA;AACA;;AACAE,KAAK,CAACY,SAAN,CAAgBC,YAAhB,GAA+B,YAAW;AACtC,SAAO,KAAKP,GAAL,CAASI,IAAT,EAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAV,KAAK,CAACY,SAAN,CAAgBE,kBAAhB,GAAqC,UAASC,CAAT,EAAY;AAC7C,MAAIC,EAAE,GAAGD,CAAC,CAACE,GAAF,CAAM,IAAN,CAAT;AACA,SAAOD,EAAE,CAACE,UAAH,CAAc,KAAKZ,GAAL,CAASa,KAAT,CAAeH,EAAE,CAACI,GAAH,CAAO,KAAKd,GAAZ,CAAf,CAAd,CAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAN,KAAK,CAACY,SAAN,CAAgBS,kBAAhB,GAAqC,UAASC,IAAT,EAAe;AAChD,SAAO,KAAKC,GAAL,CAAS,KAAKjB,GAAL,CAASa,KAAT,CAAeG,IAAf,CAAT,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAtB,KAAK,CAACY,SAAN,CAAgBY,YAAhB,GAA+B,UAASpB,CAAT,EAAY;AACvC,OAAKE,GAAL,CAASmB,GAAT,CAAarB,CAAb,EAAgBsB,SAAhB;AACA,SAAO,IAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,KAAK,CAACY,SAAN,CAAgBe,2BAAhB,GAA8C,UAASL,IAAT,EAAe;AACzDvB,EAAAA,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAhB;AACA,SAAO,IAAIE,MAAJ,CAAW,IAAX,EAAiB,KAAKsB,kBAAL,CAAwBC,IAAxB,CAAjB,CAAP;AACH,CAHD;;AAKAtB,KAAK,CAACY,SAAN,CAAgBgB,QAAhB,GAA2B,YAAW;AAClC,SAAO,aAAa,KAAKC,MAAL,CAAYD,QAAZ,CAAqBE,IAArB,CAA0B,IAA1B,CAAb,GAA+C,QAA/C,GAA0D,KAAKxB,GAAtE;AACH,CAFD;;AAIAyB,MAAM,CAACC,OAAP,GAAiBhC,KAAjB","sourcesContent":["\n\nvar extend = require('../internals').extend,\n\tVec3D = require('./Vec3D'),\n\tLine3D = require('./Line3D');\n\n/**\n * @class\n * @member toxi\n */\nvar\tRay3D = function(a,b,c,d){\n\tvar o, dir;\n\tif(arguments.length == 4){\n\t\to = new Vec3D(a,b,c);\n\t\tdir = d;\n\t}\n\telse if(arguments.length == 2){\n\t\to = a;\n\t\tdir = b;\n\t}\n\telse {\n\t\to = new Vec3D();\n\t\tdir = Vec3D.Y_AXIS.copy();\n\t}\n\tVec3D.apply(this,[o]);\n\tthis.dir = dir;\n};\n\nextend(Ray3D,Vec3D);\n\n/**\n\tReturns a copy of the ray's direction vector.\n\t@return vector\n*/\nRay3D.prototype.getDirection = function() {\n    return this.dir.copy();\n};\n\n/**\n\tCalculates the distance between the given point and the infinite line\n\tcoinciding with this ray.\n\t@param p\n*/\nRay3D.prototype.getDistanceToPoint = function(p) {\n    var sp = p.sub(this);\n    return sp.distanceTo(this.dir.scale(sp.dot(this.dir)));\n};\n\n/**\n\tReturns the point at the given distance on the ray. The distance can be\n\tany real number.\n\t@param dist\n\t@return vector\n*/\nRay3D.prototype.getPointAtDistance = function(dist) {\n    return this.add(this.dir.scale(dist));\n};\n\n/**\n  Uses a normalized copy of the given vector as the ray direction.\n  @param d new direction\n  @return itself\n*/\nRay3D.prototype.setDirection = function(d) {\n    this.dir.set(d).normalize();\n    return this;\n};\n\n/**\n  Converts the ray into a 3D Line segment with its start point coinciding\n  with the ray origin and its other end point at the given distance along\n  the ray.\n\n  @param dist end point distance\n  @return line segment\n*/\nRay3D.prototype.toLine3DWithPointAtDistance = function(dist) {\n    Line3D = require('./Line3D');\n    return new Line3D(this, this.getPointAtDistance(dist));\n};\n\nRay3D.prototype.toString = function() {\n    return \"origin: \" + this.parent.toString.call(this) + \" dir: \" + this.dir;\n};\n\nmodule.exports = Ray3D;\n\n"]},"metadata":{},"sourceType":"script"}