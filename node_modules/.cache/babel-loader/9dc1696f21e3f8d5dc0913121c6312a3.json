{"ast":null,"code":"/**\n* @class Bezier curve interpolation with configurable coefficients. The curve\n* parameters need to be normalized offsets relative to the start and end values\n* passed to the {@link #interpolate(float, float, float)} method, but can\n* exceed the normal 0 .. 1.0 interval. Use symmetrical offsets to create a\n* symmetrical curve, e.g. this will create a curve with 2 dips reaching the\n* minimum and maximum values at 25% and 75% of the interval...\n* @member toxi\n*\n* @example\n* <p>\n* <code>BezierInterpolation b=new BezierInterpolation(3,-3);</code>\n* </p>\n*\n* The curve will be a straight line with this configuration:\n*\n* <p>\n* <code>BezierInterpolation b=new BezierInterpolation(1f/3,-1f/3);</code>\n* </p>\n*/\nvar BezierInterpolation = function (h1, h2) {\n  this.c1 = h1;\n  this.c2 = h2;\n};\n\nBezierInterpolation.interpolate = function (a, b, t, c1, c2) {\n  var tSquared = t * t;\n  var invT = 1.0 - t;\n  var invTSquared = invT * invT;\n  return a * invTSquared * invT + 3 * (c1 * (b - a) + a) * t * invTSquared + 3 * (c2 * (b - a) + b) * tSquared * invT + b * tSquared * t;\n};\n\nBezierInterpolation.prototype = {\n  interpolate: function (a, b, t) {\n    var tSquared = t * t;\n    var invT = 1.0 - t;\n    var invTSquared = invT * invT;\n    return a * invTSquared * invT + 3 * (this.c1 * (b - a) + a) * t * invTSquared + 3 * (this.c2 * (b - a) + b) * tSquared * invT + b * tSquared * t;\n  },\n  setCoefficients: function (a, b) {\n    this.c1 = a;\n    this.c2 = b;\n  }\n};\nmodule.exports = BezierInterpolation;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/math/BezierInterpolation.js"],"names":["BezierInterpolation","h1","h2","c1","c2","interpolate","a","b","t","tSquared","invT","invTSquared","prototype","setCoefficients","module","exports"],"mappings":"AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAIA,mBAAmB,GAAG,UAASC,EAAT,EAAYC,EAAZ,EAAgB;AACtC,OAAKC,EAAL,GAAUF,EAAV;AACA,OAAKG,EAAL,GAAUF,EAAV;AACH,CAHD;;AAKAF,mBAAmB,CAACK,WAApB,GAAkC,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBL,EAAnB,EAAuBC,EAAvB,EAA2B;AACzD,MAAIK,QAAQ,GAAGD,CAAC,GAAGA,CAAnB;AACA,MAAIE,IAAI,GAAG,MAAMF,CAAjB;AACA,MAAIG,WAAW,GAAGD,IAAI,GAAGA,IAAzB;AACA,SAAQJ,CAAC,GAAGK,WAAJ,GAAkBD,IAAnB,GAA4B,KAAKP,EAAE,IAAII,CAAC,GAAGD,CAAR,CAAF,GAAeA,CAApB,IAAyBE,CAAzB,GAA6BG,WAAzD,GAAyE,KAAKP,EAAE,IAAIG,CAAC,GAAGD,CAAR,CAAF,GAAeC,CAApB,IAAyBE,QAAzB,GAAoCC,IAA7G,GAAsHH,CAAC,GAAGE,QAAJ,GAAeD,CAA5I;AACH,CALD;;AAOAR,mBAAmB,CAACY,SAApB,GAAgC;AAC5BP,EAAAA,WAAW,EAAE,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAgB;AACzB,QAAIC,QAAQ,GAAGD,CAAC,GAAGA,CAAnB;AACA,QAAIE,IAAI,GAAG,MAAMF,CAAjB;AACA,QAAIG,WAAW,GAAGD,IAAI,GAAGA,IAAzB;AACA,WAAQJ,CAAC,GAAGK,WAAJ,GAAkBD,IAAnB,GAA4B,KAAK,KAAKP,EAAL,IAAWI,CAAC,GAAGD,CAAf,IAAoBA,CAAzB,IAA8BE,CAA9B,GAAkCG,WAA9D,GAA8E,KAAK,KAAKP,EAAL,IAAWG,CAAC,GAAGD,CAAf,IAAoBC,CAAzB,IAA8BE,QAA9B,GAAyCC,IAAvH,GAAgIH,CAAC,GAAGE,QAAJ,GAAeD,CAAtJ;AACH,GAN2B;AAQ5BK,EAAAA,eAAe,EAAC,UAASP,CAAT,EAAYC,CAAZ,EAAe;AAC3B,SAAKJ,EAAL,GAAUG,CAAV;AACA,SAAKF,EAAL,GAAUG,CAAV;AACH;AAX2B,CAAhC;AAeAO,MAAM,CAACC,OAAP,GAAiBf,mBAAjB","sourcesContent":["\n    /**\n    * @class Bezier curve interpolation with configurable coefficients. The curve\n    * parameters need to be normalized offsets relative to the start and end values\n    * passed to the {@link #interpolate(float, float, float)} method, but can\n    * exceed the normal 0 .. 1.0 interval. Use symmetrical offsets to create a\n    * symmetrical curve, e.g. this will create a curve with 2 dips reaching the\n    * minimum and maximum values at 25% and 75% of the interval...\n    * @member toxi\n    *\n    * @example\n    * <p>\n    * <code>BezierInterpolation b=new BezierInterpolation(3,-3);</code>\n    * </p>\n    *\n    * The curve will be a straight line with this configuration:\n    *\n    * <p>\n    * <code>BezierInterpolation b=new BezierInterpolation(1f/3,-1f/3);</code>\n    * </p>\n    */\n    var BezierInterpolation = function(h1,h2) {\n        this.c1 = h1;\n        this.c2 = h2;\n    };\n\n    BezierInterpolation.interpolate = function( a, b, t, c1, c2 ){\n        var tSquared = t * t;\n        var invT = 1.0 - t;\n        var invTSquared = invT * invT;\n        return (a * invTSquared * invT) + (3 * (c1 * (b - a) + a) * t * invTSquared) + (3 * (c2 * (b - a) + b) * tSquared * invT) + (b * tSquared * t);\n    };\n\n    BezierInterpolation.prototype = {\n        interpolate: function(a,b,t) {\n            var tSquared = t * t;\n            var invT = 1.0 - t;\n            var invTSquared = invT * invT;\n            return (a * invTSquared * invT) + (3 * (this.c1 * (b - a) + a) * t * invTSquared) + (3 * (this.c2 * (b - a) + b) * tSquared * invT) + (b * tSquared * t);\n        },\n\n        setCoefficients:function(a, b) {\n            this.c1 = a;\n            this.c2 = b;\n        }\n\n    };\n\n    module.exports = BezierInterpolation;\n\n\n\n"]},"metadata":{},"sourceType":"script"}