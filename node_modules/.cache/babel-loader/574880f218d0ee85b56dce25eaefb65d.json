{"ast":null,"code":"var extend = require('../internals').extend,\n    mathUtils = require('../math/mathUtils'),\n    Vec3D = require('./Vec3D'),\n    AxisAlignedCylinder = require('./AxisAlignedCylinder');\n/**\n @member toxi\n @class Y-axis aligned Cylinder\n */\n\n\nvar YAxisCylinder = function (pos, radius, length) {\n  AxisAlignedCylinder.apply(this, [pos, radius, length]);\n};\n\nextend(YAxisCylinder, AxisAlignedCylinder);\n\nYAxisCylinder.prototype.containsPoint = function (p) {\n  if (mathUtils.abs(p.y - this.pos.y) < this.length * 0.5) {\n    var dx = p.x - this.pos.x;\n    var dz = p.z - this.pos.z;\n\n    if (Math.abs(dz * dz + dx * dx) < this.radiusSquared) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nYAxisCylinder.prototype.getMajorAxis = function () {\n  return Vec3D.Axis.Y;\n};\n\nmodule.exports = YAxisCylinder;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/YAxisCylinder.js"],"names":["extend","require","mathUtils","Vec3D","AxisAlignedCylinder","YAxisCylinder","pos","radius","length","apply","prototype","containsPoint","p","abs","y","dx","x","dz","z","Math","radiusSquared","getMajorAxis","Axis","Y","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,MAArC;AAAA,IACCE,SAAS,GAAGD,OAAO,CAAC,mBAAD,CADpB;AAAA,IAECE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAFhB;AAAA,IAGCG,mBAAmB,GAAGH,OAAO,CAAC,uBAAD,CAH9B;AAKA;AACA;AACA;AACA;;;AACA,IAAII,aAAa,GAAG,UAASC,GAAT,EAAaC,MAAb,EAAoBC,MAApB,EAA2B;AAC9CJ,EAAAA,mBAAmB,CAACK,KAApB,CAA0B,IAA1B,EAA+B,CAACH,GAAD,EAAKC,MAAL,EAAYC,MAAZ,CAA/B;AACA,CAFD;;AAGAR,MAAM,CAACK,aAAD,EAAeD,mBAAf,CAAN;;AAEAC,aAAa,CAACK,SAAd,CAAwBC,aAAxB,GAAwC,UAASC,CAAT,EAAW;AAClD,MAAGV,SAAS,CAACW,GAAV,CAAcD,CAAC,CAACE,CAAF,GAAM,KAAKR,GAAL,CAASQ,CAA7B,IAAkC,KAAKN,MAAL,GAAc,GAAnD,EAAuD;AACtD,QAAIO,EAAE,GAAGH,CAAC,CAACI,CAAF,GAAM,KAAKV,GAAL,CAASU,CAAxB;AACA,QAAIC,EAAE,GAAGL,CAAC,CAACM,CAAF,GAAM,KAAKZ,GAAL,CAASY,CAAxB;;AACA,QAAGC,IAAI,CAACN,GAAL,CAASI,EAAE,GAAGA,EAAL,GAAUF,EAAE,GAAGA,EAAxB,IAA8B,KAAKK,aAAtC,EAAoD;AACnD,aAAO,IAAP;AACA;AACD;;AACD,SAAO,KAAP;AACA,CATD;;AAUAf,aAAa,CAACK,SAAd,CAAwBW,YAAxB,GAAuC,YAAU;AAChD,SAAOlB,KAAK,CAACmB,IAAN,CAAWC,CAAlB;AACA,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiBpB,aAAjB","sourcesContent":["\n\nvar extend = require('../internals').extend,\n\tmathUtils = require('../math/mathUtils'),\n\tVec3D = require('./Vec3D'),\n\tAxisAlignedCylinder = require('./AxisAlignedCylinder');\n\t\n/**\n @member toxi\n @class Y-axis aligned Cylinder\n */\nvar\tYAxisCylinder = function(pos,radius,length){\n\tAxisAlignedCylinder.apply(this,[pos,radius,length]);\n};\nextend(YAxisCylinder,AxisAlignedCylinder);\n\nYAxisCylinder.prototype.containsPoint = function(p){\n\tif(mathUtils.abs(p.y - this.pos.y) < this.length * 0.5){\n\t\tvar dx = p.x - this.pos.x;\n\t\tvar dz = p.z - this.pos.z;\n\t\tif(Math.abs(dz * dz + dx * dx) < this.radiusSquared){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\nYAxisCylinder.prototype.getMajorAxis = function(){\n\treturn Vec3D.Axis.Y;\n};\n\nmodule.exports = YAxisCylinder;\n\n\n"]},"metadata":{},"sourceType":"script"}