{"ast":null,"code":"var extend = require('../internals').extend,\n    mathUtils = require('../math/mathUtils'),\n    Vec3D = require('./Vec3D'),\n    AxisAlignedCylinder = require('./AxisAlignedCylinder');\n/**\n @member toxi\n @constructor Z-axis aligned Cylinder\n */\n\n\nvar ZAxisCylinder = function (pos, radius, length) {\n  AxisAlignedCylinder.apply(this, [pos, radius, length]);\n};\n\nextend(ZAxisCylinder, AxisAlignedCylinder);\n\nZAxisCylinder.prototype.containsPoint = function (p) {\n  if (mathUtils.abs(p.z - this.pos.z) < this.length * 0.5) {\n    var dx = p.x - this.pos.x;\n    var dy = p.y - this.pos.y;\n\n    if (Math.abs(dx * dx + dy * dy) < this.radiusSquared) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nZAxisCylinder.prototype.getMajorAxis = function () {\n  return Vec3D.Axis.Z;\n};\n\nmodule.exports = ZAxisCylinder;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/ZAxisCylinder.js"],"names":["extend","require","mathUtils","Vec3D","AxisAlignedCylinder","ZAxisCylinder","pos","radius","length","apply","prototype","containsPoint","p","abs","z","dx","x","dy","y","Math","radiusSquared","getMajorAxis","Axis","Z","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,MAArC;AAAA,IACCE,SAAS,GAAGD,OAAO,CAAC,mBAAD,CADpB;AAAA,IAECE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAFhB;AAAA,IAGCG,mBAAmB,GAAGH,OAAO,CAAC,uBAAD,CAH9B;AAKA;AACA;AACA;AACA;;;AACA,IAAII,aAAa,GAAG,UAASC,GAAT,EAAaC,MAAb,EAAoBC,MAApB,EAA2B;AAC9CJ,EAAAA,mBAAmB,CAACK,KAApB,CAA0B,IAA1B,EAA+B,CAACH,GAAD,EAAKC,MAAL,EAAYC,MAAZ,CAA/B;AACA,CAFD;;AAGAR,MAAM,CAACK,aAAD,EAAeD,mBAAf,CAAN;;AACAC,aAAa,CAACK,SAAd,CAAwBC,aAAxB,GAAwC,UAASC,CAAT,EAAW;AACjD,MAAIV,SAAS,CAACW,GAAV,CAAcD,CAAC,CAACE,CAAF,GAAM,KAAKR,GAAL,CAASQ,CAA7B,IAAkC,KAAKN,MAAL,GAAc,GAApD,EAAyD;AAC/C,QAAIO,EAAE,GAAGH,CAAC,CAACI,CAAF,GAAM,KAAKV,GAAL,CAASU,CAAxB;AACA,QAAIC,EAAE,GAAGL,CAAC,CAACM,CAAF,GAAM,KAAKZ,GAAL,CAASY,CAAxB;;AACA,QAAIC,IAAI,CAACN,GAAL,CAASE,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAAxB,IAA8B,KAAKG,aAAvC,EAAsD;AAClD,aAAO,IAAP;AACH;AACX;;AACD,SAAO,KAAP;AACA,CATD;;AAUAf,aAAa,CAACK,SAAd,CAAwBW,YAAxB,GAAuC,YAAU;AAChD,SAAOlB,KAAK,CAACmB,IAAN,CAAWC,CAAlB;AACA,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiBpB,aAAjB","sourcesContent":["\n\nvar extend = require('../internals').extend,\n\tmathUtils = require('../math/mathUtils'),\n\tVec3D = require('./Vec3D'),\n\tAxisAlignedCylinder = require('./AxisAlignedCylinder');\n\n/**\n @member toxi\n @constructor Z-axis aligned Cylinder\n */\nvar\tZAxisCylinder = function(pos,radius,length){\n\tAxisAlignedCylinder.apply(this,[pos,radius,length]);\n};\nextend(ZAxisCylinder,AxisAlignedCylinder);\nZAxisCylinder.prototype.containsPoint = function(p){\n\t if (mathUtils.abs(p.z - this.pos.z) < this.length * 0.5) {\n            var dx = p.x - this.pos.x;\n            var dy = p.y - this.pos.y;\n            if (Math.abs(dx * dx + dy * dy) < this.radiusSquared) {\n                return true;\n            }\n\t}\n\treturn false;\n};\nZAxisCylinder.prototype.getMajorAxis = function(){\n\treturn Vec3D.Axis.Z;\n};\n\nmodule.exports = ZAxisCylinder;\n\n"]},"metadata":{},"sourceType":"script"}