{"ast":null,"code":"var WaveState = require('./WaveState');\n\nvar defaultNumberTo = function (i, num) {\n  return typeof i === 'number' ? i : num;\n};\n/**\n * @module toxi/math/waves/AbstractWave\n * @description Abstract wave oscillator type which needs to be subclassed to implement\n * different waveforms. Please note that the frequency unit is radians, but\n * conversion methods to & from Hertz ({@link #hertzToRadians(float, float)})\n * are included in this base class.\n */\n\n\nvar AbstractWave = function (phase, freq, amp, offset) {\n  if (typeof arguments[0] === 'object' && !freq && !amp && !offset) {\n    //options object\n    offset = phase.offset;\n    amp = typeof phase.amp === 'number' ? phase.amp : phase.amplitude;\n    freq = typeof phase.freq === 'number' ? phase.freq : phase.frequency;\n    phase = phase.phase;\n  }\n\n  this.setPhase(defaultNumberTo(phase, 0));\n  this.frequency = defaultNumberTo(freq, 0);\n  this.amp = defaultNumberTo(amp, 1.0);\n  this.offset = defaultNumberTo(offset, 0);\n};\n\nAbstractWave.prototype = {\n  /**\n      * Ensures phase remains in the 0...TWO_PI interval.\n      * @param {Number} freq\n      *            normalized progress frequency\n      * @return {Number} current phase\n      */\n  cyclePhase: function (freq) {\n    if (freq === undefined) freq = 0;\n    this.phase = (this.phase + freq) % AbstractWave.TWO_PI;\n\n    if (this.phase < 0) {\n      this.phase += AbstractWave.TWO_PI;\n    }\n\n    return this.phase;\n  },\n  getClass: function () {\n    return \"AbstractWave\";\n  },\n  pop: function () {\n    if (this.stateStack === undefined || this.stateStack !== undefined && this.stateStack.length <= 0) {\n      //throw new Error(\"no wave states on stack\");\n      console.log(this.toString());\n      console.log(\"no wave states on stack\");\n      return;\n    }\n\n    var s = this.stateStack.pop();\n    this.phase = s.phase;\n    this.frequency = s.frequency;\n    this.amp = s.amp;\n    this.offset = s.offset;\n  },\n  push: function () {\n    if (this.stateStack === undefined) {\n      this.stateStack = [];\n    }\n\n    this.stateStack.push(new WaveState(this.phase, this.frequency, this.amp, this.offset));\n  },\n  reset: function () {\n    this.phase = this.origPhase;\n  },\n  setPhase: function (phase) {\n    this.phase = phase;\n    this.cyclePhase();\n    this.origPhase = phase;\n  },\n  toString: function () {\n    return this.getClass() + \" phase:\" + this.phase + \" frequency: \" + this.frequency + \" amp: \" + this.amp + \" offset: \" + this.offset;\n  },\n  update: function () {\n    console.log(this.getClass() + \" this should be overridden\");\n  }\n};\nAbstractWave.PI = 3.14159265358979323846;\nAbstractWave.TWO_PI = 2 * AbstractWave.PI;\n/**\n * Converts a frequency in Hertz into radians.\n *\n * @param hz frequency to convert (in Hz)\n * @param sampleRate sampling rate in Hz (equals period length @ 1 Hz)\n * @return frequency in radians\n */\n\nAbstractWave.hertzToRadians = function (hz, sampleRate) {\n  return hz / sampleRate * AbstractWave.TWO_PI;\n};\n/**\n * Converts a frequency from radians to Hertz.\n *\n * @param f frequency in radians\n * @param sampleRate  sampling rate in Hz (equals period length @ 1 Hz)\n * @return freq in Hz\n */\n\n\nAbstractWave.radiansToHertz = function (f, sampleRate) {\n  return f / AbstractWave.TWO_PI * sampleRate;\n};\n\nmodule.exports = AbstractWave;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/math/waves/AbstractWave.js"],"names":["WaveState","require","defaultNumberTo","i","num","AbstractWave","phase","freq","amp","offset","arguments","amplitude","frequency","setPhase","prototype","cyclePhase","undefined","TWO_PI","getClass","pop","stateStack","length","console","log","toString","s","push","reset","origPhase","update","PI","hertzToRadians","hz","sampleRate","radiansToHertz","f","module","exports"],"mappings":"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","sourcesContent":["\n\nvar WaveState = require('./WaveState');\nvar defaultNumberTo = function( i, num ){\n    return typeof i === 'number' ? i : num;\n};\n\n\n/**\n * @module toxi/math/waves/AbstractWave\n * @description Abstract wave oscillator type which needs to be subclassed to implement\n * different waveforms. Please note that the frequency unit is radians, but\n * conversion methods to & from Hertz ({@link #hertzToRadians(float, float)})\n * are included in this base class.\n */\nvar AbstractWave = function( phase, freq, amp, offset ){\n    if( typeof arguments[0] === 'object' && !freq && !amp && !offset ){\n        //options object\n        offset = phase.offset;\n        amp = typeof phase.amp === 'number' ? phase.amp : phase.amplitude;\n        freq = typeof phase.freq === 'number' ? phase.freq : phase.frequency;\n        phase = phase.phase;\n    }\n    this.setPhase( defaultNumberTo(phase, 0) );\n    this.frequency = defaultNumberTo( freq, 0 );\n    this.amp = defaultNumberTo( amp, 1.0 );\n    this.offset = defaultNumberTo( offset, 0 );\n};\n\n\n\nAbstractWave.prototype = {\n\t/**\n     * Ensures phase remains in the 0...TWO_PI interval.\n     * @param {Number} freq\n     *            normalized progress frequency\n     * @return {Number} current phase\n     */\n\tcyclePhase: function(freq){\n\t\tif(freq === undefined)freq = 0;\n\t\tthis.phase = (this.phase + freq) % AbstractWave.TWO_PI;\n\t\tif(this.phase < 0){\n\t\t\tthis.phase += AbstractWave.TWO_PI;\n\t\t}\n\t\treturn this.phase;\n\t},\n\n\tgetClass: function(){\n\t\treturn \"AbstractWave\";\n\t},\n\n\tpop: function() {\n        if (this.stateStack === undefined || (this.stateStack !== undefined && this.stateStack.length <= 0)) {\n            //throw new Error(\"no wave states on stack\");\n\t\t\tconsole.log(this.toString());\n\t\t\tconsole.log(\"no wave states on stack\");\n            return;\n        }\n        var s = this.stateStack.pop();\n        this.phase = s.phase;\n        this.frequency = s.frequency;\n        this.amp = s.amp;\n        this.offset = s.offset;\n    },\n\n\tpush: function() {\n        if (this.stateStack === undefined) {\n            this.stateStack = [];\n        }\n        this.stateStack.push(new WaveState(this.phase, this.frequency, this.amp, this.offset));\n    },\n\n\treset: function() {\n        this.phase = this.origPhase;\n    },\n\n\tsetPhase: function(phase) {\n        this.phase = phase;\n        this.cyclePhase();\n        this.origPhase = phase;\n    },\n\n\ttoString: function(){\n\t\treturn this.getClass()+\" phase:\" + this.phase+ \" frequency: \"+this.frequency+\" amp: \"+this.amp+ \" offset: \"+this.offset;\n\t},\n\n\tupdate:function(){\n\t\tconsole.log(this.getClass()+ \" this should be overridden\");\n\t}\n\n};\n\nAbstractWave.PI = 3.14159265358979323846;\nAbstractWave.TWO_PI = 2 * AbstractWave.PI;\n\n\n/**\n * Converts a frequency in Hertz into radians.\n *\n * @param hz frequency to convert (in Hz)\n * @param sampleRate sampling rate in Hz (equals period length @ 1 Hz)\n * @return frequency in radians\n */\nAbstractWave.hertzToRadians = function(hz,sampleRate) {\n        return hz / sampleRate * AbstractWave.TWO_PI;\n};\n\n/**\n * Converts a frequency from radians to Hertz.\n *\n * @param f frequency in radians\n * @param sampleRate  sampling rate in Hz (equals period length @ 1 Hz)\n * @return freq in Hz\n */\nAbstractWave.radiansToHertz = function(f,sampleRate) {\n    return f / AbstractWave.TWO_PI * sampleRate;\n};\n\nmodule.exports = AbstractWave;\n\n\n"]},"metadata":{},"sourceType":"script"}