{"ast":null,"code":"var mathUtils = require('../math/mathUtils'),\n    Matrix4x4 = require('./Matrix4x4');\n/**\n * @class\n * @member toxi\n */\n\n\nvar Quaternion = function (qw, vx, y, z) {\n  if (arguments.length == 4) {\n    this.w = qw;\n    this.x = vx;\n    this.y = y;\n    this.z = z;\n  } else if (arguments.length == 2) {\n    this.x = vx.x;\n    this.y = vx.y;\n    this.z = vx.z;\n    this.w = qw;\n  } else if (arguments.length == 1) {\n    this.w = q.w;\n    this.x = q.x;\n    this.y = q.y;\n    this.z = q.z;\n  }\n};\n\nQuaternion.prototype = {\n  add: function (q) {\n    return new Quaternion(this.x + q.x, this.y + q.y, this.z + q.z, this.w + q.w);\n  },\n  addSelf: function (q) {\n    this.x += q.x;\n    this.y += q.y;\n    this.z += q.z;\n    return this;\n  },\n  copy: function () {\n    return new Quaternion(this.w, this.x, this.y, this.z);\n  },\n  dot: function (q) {\n    return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;\n  },\n  getConjugate: function () {\n    var q = new Quaternion();\n    q.x = -this.x;\n    q.y = -this.y;\n    q.z = -this.z;\n    q.w = w;\n    return q;\n  },\n  identity: function () {\n    this.w = 1.0;\n    this.x = 0.0;\n    this.y = 0.0;\n    this.z = 0.0;\n    return this;\n  },\n  interpolateTo: function (target, t, is) {\n    return arguments.length == 3 ? this.copy().interpolateTo(target, is.interpolate(0, 1, t)) : this.copy().interpolateToSelf(target, t);\n  },\n  interpolateToSelf: function (target, t, is) {\n    if (arguments.length == 3) {\n      t = is.interpolate(0, 1, t);\n    }\n\n    var scale,\n        invscale,\n        dot = mathUtils.clip(this.dot(target), -1, 1);\n\n    if (1.0 - dot >= mathUtils.EPS) {\n      var theta = Math.acos(dot);\n      var invsintheta = 1.0 / Math.sin(theta);\n      scale = Math.sin(theta * (1.0 - t)) * invsintheta;\n      invscale = Math.sin(theta * t) * invsintheta;\n    } else {\n      scale = 1 - t;\n      invscale = t;\n    }\n\n    if (dot < 0.0) {\n      this.w = scale * this.w - invscale * target.w;\n      this.x = scale * this.x - invscale * target.x;\n      this.y = scale * this.y - invscale * target.y;\n      this.z = scale * this.z - invscale * target.z;\n    } else {\n      this.w = scale * w + invscale * target.w;\n      this.x = scale * x + invscale * target.x;\n      this.y = scale * y + invscale * target.y;\n      this.z = scale * z + invscale * target.z;\n    }\n\n    return this;\n  },\n  magnitude: function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  },\n  multiply: function (q2) {\n    var res = new Quaternion();\n    res.w = this.w * q2.w - x * q2.x - y * q2.y - z * q2.z;\n    res.x = this.w * q2.x + x * q2.w + y * q2.z - z * q2.y;\n    res.y = this.w * q2.y + y * q2.w + z * q2.x - x * q2.z;\n    res.z = this.w * q2.z + z * q2.w + x * q2.y - y * q2.x;\n    return res;\n  },\n  normalize: function () {\n    var mag = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (mag > mathUtils.EPS) {\n      mag = 1 / mag;\n      this.x *= mag;\n      this.y *= mag;\n      this.z *= mag;\n      this.w *= mag;\n    }\n\n    return this;\n  },\n  scale: function (t) {\n    return new Quaternion(this.x * t, this.y * t, this.z * t, this.w * t);\n  },\n  scaleSelf: function (t) {\n    this.x *= t;\n    this.y *= t;\n    this.z *= t;\n    this.w *= t;\n    return this;\n  },\n  set: function (w, x, y, z) {\n    if (arguments.length == 4) {\n      this.w = w;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    } else if (arguments.length == 2) {\n      this.w = w;\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n    } else {\n      //must be 1\n      this.w = q.w;\n      this.x = q.x;\n      this.y = q.y;\n      this.z = q.z;\n    }\n\n    return this;\n  },\n  sub: function (q) {\n    return new Quaternion(this.x - q.x, this.y - q.y, this.z - q.z, this.w - q.w);\n  },\n  subSelf: function (q) {\n    this.x -= q.x;\n    this.y -= q.y;\n    this.z -= q.z;\n    this.w -= q.w;\n    return this;\n  },\n  toArray: function () {\n    return [this.w, this.x, this.y, this.z];\n  },\n  toAxisAngle: function () {\n    var res = [];\n    var sa = Math.sqrt(1.0 - this.w * this.w);\n\n    if (sa < mathUtils.EPS) {\n      sa = 1.0;\n    } else {\n      sa = 1.0 / sa;\n    }\n\n    res[0] = Math.acos(this.w) * 2.0;\n    res[1] = this.x * sa;\n    res[2] = this.y * sa;\n    res[3] = this.z * sa;\n    return res;\n  },\n  toMatrix4x4: function (result) {\n    if (result === undefined) {\n      result = new Matrix4x4();\n    }\n\n    var x2 = this.x + this.x;\n    var y2 = this.y + this.y;\n    var z2 = this.z + this.z;\n    var xx = this.x * x2;\n    var xy = this.x * y2;\n    var xz = this.x * z2;\n    var yy = this.y * y2;\n    var yz = this.y * z2;\n    var zz = this.z * z2;\n    var wx = this.w * x2;\n    var wy = this.w * y2;\n    var wz = this.w * z2;\n    var st = x2 + ',' + y2 + ',' + z2 + ',' + xx + ',' + xy + ',' + xz + ',' + yy + ',' + yz + ',' + zz + ',' + wx + ',' + wy + ',' + wz;\n    return result.set(1 - (yy + zz), xy - wz, xz + wy, 0, xy + wz, 1 - (xx + zz), yz - wx, 0, xz - wy, yz + wx, 1 - (xx + yy), 0, 0, 0, 0, 1);\n  },\n  toString: function () {\n    return \"{axis: [\" + this.x + \",\" + this.y + \",\" + this.z + \"], w: \" + this.w + \"}\";\n  }\n};\nQuaternion.DOT_THRESHOLD = 0.9995;\n\nQuaternion.createFromAxisAngle = function (axis, angle) {\n  angle *= 0.5;\n  var sin = mathUtils.sin(angle),\n      cos = mathUtils.cos(angle),\n      q = new Quaternion(cos, axis.getNormalizedTo(sin));\n  return q;\n};\n\nQuaternion.createFromEuler = function (pitch, yaw, roll) {\n  pitch *= 0.5;\n  yaw *= 0.5;\n  roll *= 0.5;\n  var sinPitch = mathUtils.sin(pitch),\n      cosPitch = mathUtils.cos(pitch),\n      sinYaw = mathUtils.sin(yaw),\n      cosYaw = mathUtils.cos(yaw),\n      sinRoll = mathUtils.sin(roll),\n      cosRoll = mathUtils.cos(roll);\n  var cosPitchCosYaw = cosPitch * cosYaw,\n      sinPitchSinYaw = sinPitch * sinYaw;\n  var q = new Quaternion();\n  q.x = sinRoll * cosPitchCosYaw - cosRoll * sinPitchSinYaw;\n  q.y = cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;\n  q.z = cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;\n  q.w = cosRoll * cosPitchCosYaw + sinRoll * sinPitchSinYaw;\n  return q;\n};\n\nQuaternion.createFromMatrix = function (m) {\n  var s = 0.0;\n  var q = [];\n  var trace = m.matrix[0][0] + m.matrix[1][1] + m.matrix[2][2];\n\n  if (trace > 0.0) {\n    s = Math.sqrt(trace + 1.0);\n    q[3] = s * 0.5;\n    s = 0.5 / s;\n    q[0] = m.matrix[1][2] - m.matrix[2][1] * s;\n    q[1] = m.matrix[2][0] - m.matrix[0][2] * s;\n    q[2] = m.matrix[0][1] - m.matrix[1][0] * s;\n  } else {\n    var nxt = [1, 2, 0];\n    var i = 0,\n        j = 0,\n        k = 0;\n\n    if (m.matrix[1][1] > m.matrix[0][0]) {\n      i = 1;\n    }\n\n    if (m.matrix[2][2] > m.matrix[i][i]) {\n      i = 2;\n    }\n\n    j = nxt[i];\n    k = nxt[j];\n    s = Math.sqrt(m.matrix[i][i] - (m.matrix[j][j] + m.matrix[k][k]) + 1.0);\n    q[i] = s * 0.5;\n    s = 0.5 / s;\n    q[3] = (m.matrix[j][k] - m.matrix[k][j]) * s;\n    q[j] = (m.matrix[i][j] + m.matrix[j][i]) * s;\n    q[k] = (m.matrix[i][k] + m.matrix[k][i]) * s;\n  }\n\n  return new Quaternion(q[3], q[0], q[1], q[2]);\n};\n\nQuaternion.getAlignmentQuat = function (dir, forward) {\n  var target = dir.getNormalized(),\n      axis = forward.cross(target),\n      length = axis.magnitude() + 0.0001,\n      angle = Math.atan2(length, forward.dot(target));\n  return this.createFromAxisAngle(axis, angle);\n};\n\nmodule.exports = Quaternion;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/Quaternion.js"],"names":["mathUtils","require","Matrix4x4","Quaternion","qw","vx","y","z","arguments","length","w","x","q","prototype","add","addSelf","copy","dot","getConjugate","identity","interpolateTo","target","t","is","interpolate","interpolateToSelf","scale","invscale","clip","EPS","theta","Math","acos","invsintheta","sin","magnitude","sqrt","multiply","q2","res","normalize","mag","scaleSelf","set","v","sub","subSelf","toArray","toAxisAngle","sa","toMatrix4x4","result","undefined","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","st","toString","DOT_THRESHOLD","createFromAxisAngle","axis","angle","cos","getNormalizedTo","createFromEuler","pitch","yaw","roll","sinPitch","cosPitch","sinYaw","cosYaw","sinRoll","cosRoll","cosPitchCosYaw","sinPitchSinYaw","createFromMatrix","m","s","trace","matrix","nxt","i","j","k","getAlignmentQuat","dir","forward","getNormalized","cross","atan2","module","exports"],"mappings":"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","sourcesContent":["\n\nvar mathUtils = require('../math/mathUtils'),\n\tMatrix4x4 = require('./Matrix4x4');\n\n/**\n * @class\n * @member toxi\n */\nvar\tQuaternion = function (qw,vx,y,z){\n\tif(arguments.length == 4){\n\t\tthis.w = qw;\n\t\tthis.x = vx;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t} else if(arguments.length == 2){\n\t\tthis.x = vx.x;\n\t\tthis.y = vx.y;\n\t\tthis.z = vx.z;\n\t\tthis.w = qw;\n\t} else if(arguments.length == 1) {\n\t\tthis.w = q.w;\n\t\tthis.x = q.x;\n\t\tthis.y = q.y;\n\t\tthis.z = q.z;\n\t}\n};\n\n\nQuaternion.prototype = {\n\tadd: function(q){\n\t\treturn new Quaternion(this.x + q.x, this.y + q.y, this.z + q.z, this.w + q.w);\n\t},\n\taddSelf: function(q){\n\t\tthis.x += q.x;\n\t\tthis.y += q.y;\n\t\tthis.z += q.z;\n\t\treturn this;\n\t},\n\tcopy: function(){\n\t\treturn new Quaternion(this.w,this.x,this.y,this.z);\n\t},\n\tdot: function(q){\n\t\treturn (this.x * q.x) + (this.y * q.y) + (this.z * q.z) + (this.w * q.w);\n\t},\n\tgetConjugate: function(){\n\t\tvar q = new Quaternion();\n\t\tq.x = -this.x;\n\t\tq.y = -this.y;\n\t\tq.z = -this.z;\n\t\tq.w = w;\n\t\treturn q;\n\t},\n\tidentity: function(){\n\t\tthis.w = 1.0;\n\t\tthis.x = 0.0;\n\t\tthis.y = 0.0;\n\t\tthis.z = 0.0;\n\t\treturn this;\n\t},\n\tinterpolateTo: function(target,t,is){\n\t\treturn (arguments.length == 3) ? this.copy().interpolateTo(target,is.interpolate(0,1,t)) : this.copy().interpolateToSelf(target,t);\n\t},\n\tinterpolateToSelf: function(target,t,is){\n\t\tif(arguments.length == 3){\n\t\t\tt = is.interpolate(0,1,t);\n\t\t}\n\t\tvar scale,\n\t\t\tinvscale,\n\t\t\tdot = mathUtils.clip(this.dot(target),-1,1);\n\t\t\tif((1.0-dot) >= mathUtils.EPS){\n\t\t\t\tvar theta = Math.acos(dot);\n\t\t\t\tvar invsintheta = 1.0 / Math.sin(theta);\n\t\t\t\tscale = (Math.sin(theta *(1.0 - t)) * invsintheta);\n\t\t\t\tinvscale = (Math.sin(theta * t) * invsintheta);\n\t\t\t} else {\n\t\t\t\tscale = 1 - t;\n\t\t\t\tinvscale = t;\n\t\t\t}\n\t\t\tif(dot < 0.0){\n\t\t\t\tthis.w = scale * this.w - invscale * target.w;\n\t\t\t\tthis.x = scale * this.x - invscale * target.x;\n\t\t\t\tthis.y = scale * this.y - invscale * target.y;\n\t\t\t\tthis.z = scale * this.z - invscale * target.z;\n\t\t\t} else {\n\t\t\t\tthis.w = scale * w + invscale * target.w;\n\t\t\t\tthis.x = scale * x + invscale * target.x;\n\t\t\t\tthis.y = scale * y + invscale * target.y;\n\t\t\t\tthis.z = scale * z + invscale * target.z;\n\t\t\t}\n\t\t\treturn this;\n\t},\n\tmagnitude: function() {\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t},\n\tmultiply: function(q2){\n\t\tvar res = new Quaternion();\n\t\tres.w = this.w * q2.w - x * q2.x - y * q2.y - z * q2.z;\n\t\tres.x = this.w * q2.x + x * q2.w + y * q2.z - z * q2.y;\n\t\tres.y = this.w * q2.y + y * q2.w + z * q2.x - x * q2.z;\n\t\tres.z = this.w * q2.z + z * q2.w + x * q2.y - y * q2.x;\n\t\t\n\t\treturn res;\n\t},\n\tnormalize: function(){\n\t\tvar mag = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\tif(mag > mathUtils.EPS){\n\t\t\tmag = 1 / mag;\n\t\t\tthis.x *= mag;\n\t\t\tthis.y *= mag;\n\t\t\tthis.z *= mag;\n\t\t\tthis.w *= mag;\n\t\t}\n\t\treturn this;\n\t},\n\tscale: function(t){\n\t\treturn new Quaternion(this.x * t, this.y * t, this.z * t, this.w * t);\n\t},\n\tscaleSelf: function(t){\n\t\tthis.x *= t;\n\t\tthis.y *= t;\n\t\tthis.z *= t;\n\t\tthis.w *= t;\n\t\treturn this;\n\t},\n\tset: function(w,x,y,z){\n\t\tif(arguments.length == 4){\n\t\t\tthis.w = w;\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t} else if(arguments.length == 2){\n\t\t\tthis.w = w;\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t}\n\t\telse { //must be 1\n\t\t\tthis.w = q.w;\n\t\t\tthis.x = q.x;\n\t\t\tthis.y = q.y;\n\t\t\tthis.z = q.z;\n\t\t}\n\t\treturn this;\n\t},\n\tsub: function(q){\n\t\treturn new Quaternion(this.x - q.x, this.y - q.y, this.z - q.z, this.w - q.w);\n\t},\n\tsubSelf: function(q){\n\t\tthis.x -= q.x;\n\t\tthis.y -= q.y;\n\t\tthis.z -= q.z;\n\t\tthis.w -= q.w;\n\t\treturn this;\n\t},\n\ttoArray: function(){\n\t\treturn [this.w,this.x,this.y,this.z];\n\t},\n\ttoAxisAngle: function(){\n\t\tvar res = [];\n\t\tvar sa = Math.sqrt(1.0 - this.w * this.w);\n\t\tif(sa < mathUtils.EPS){\n\t\t\tsa = 1.0;\n\t\t} else {\n\t\t\tsa = 1.0 / sa;\n\t\t}\n\t\tres[0] = Math.acos(this.w) * 2.0;\n\t\tres[1] = this.x * sa;\n\t\tres[2] = this.y * sa;\n\t\tres[3] = this.z * sa;\n\t\treturn res;\n\t},\n\ttoMatrix4x4: function(result){\n\t\tif(result === undefined){\n\t\t\tresult = new Matrix4x4();\n\t\t}\n\t\tvar x2 = this.x + this.x;\n\t\tvar y2 = this.y + this.y;\n\t\tvar z2 = this.z + this.z;\n\t\tvar xx = this.x * x2;\n\t\tvar xy = this.x * y2;\n\t\tvar xz = this.x * z2;\n\t\tvar yy = this.y * y2;\n\t\tvar yz = this.y * z2;\n\t\tvar zz = this.z * z2;\n\t\tvar wx = this.w * x2;\n\t\tvar wy = this.w * y2;\n\t\tvar wz = this.w * z2;\n\t\t\n\t\tvar st = x2 +','+y2+','+z2+','+xx+','+xy+','+xz+','+yy+','+yz+','+zz+','+wx+','+wy+','+wz;\n\t\treturn result.set(\n\t\t\t1 - (yy + zz), xy - wz, xz + wy, 0, xy + wz,\n\t\t\t1 - (xx + zz), yz - wx, 0, xz - wy, yz + wx, 1 - (xx + yy), 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\t},\n\ttoString: function(){\n\t\treturn \"{axis: [\"+this.x+\",\"+this.y+\",\"+this.z+\"], w: \"+this.w+\"}\";\n\t}\n\t\n};\n\nQuaternion.DOT_THRESHOLD = 0.9995;\n\nQuaternion.createFromAxisAngle = function(axis,angle){\n\tangle *= 0.5;\n\tvar sin = mathUtils.sin(angle),\n\t\tcos = mathUtils.cos(angle),\n\t\tq = new Quaternion(cos,axis.getNormalizedTo(sin));\n\treturn q;\n};\n\nQuaternion.createFromEuler = function(pitch,yaw,roll){\n\tpitch *= 0.5;\n\tyaw *=0.5;\n\troll *= 0.5;\n\t\n\tvar sinPitch = mathUtils.sin(pitch),\n\t\tcosPitch = mathUtils.cos(pitch),\n\t\tsinYaw = mathUtils.sin(yaw),\n\t\tcosYaw = mathUtils.cos(yaw),\n\t\tsinRoll = mathUtils.sin(roll),\n\t\tcosRoll = mathUtils.cos(roll);\n\t\n\tvar cosPitchCosYaw = cosPitch * cosYaw,\n\t\tsinPitchSinYaw = sinPitch * sinYaw;\n\t\t\n\t\tvar q = new Quaternion();\n\t\tq.x = sinRoll * cosPitchCosYaw - cosRoll * sinPitchSinYaw;\n\t\tq.y = cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;\n\t\tq.z = cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;\n\t\tq.w = cosRoll * cosPitchCosYaw + sinRoll * sinPitchSinYaw;\n\t\t\n\t\treturn q;\n};\n\nQuaternion.createFromMatrix = function(m){\n\tvar s = 0.0;\n\tvar q = [];\n\tvar trace = m.matrix[0][0] + m.matrix[1][1] + m.matrix[2][2];\n\t\n\tif(trace > 0.0){\n\t\ts = Math.sqrt(trace + 1.0);\n\t\tq[3] = s * 0.5;\n\t\ts = 0.5 / s;\n\t\tq[0] = (m.matrix[1][2] - m.matrix[2][1] * s);\n\t\tq[1] = (m.matrix[2][0] - m.matrix[0][2] * s);\n\t\tq[2] = (m.matrix[0][1] - m.matrix[1][0] * s);\n\t} else {\n\t\t\n\t\tvar nxt = [ 1, 2, 0 ];\n        var i = 0, j = 0, k = 0;\n\n        if (m.matrix[1][1] > m.matrix[0][0]) {\n            i = 1;\n        }\n\n        if (m.matrix[2][2] > m.matrix[i][i]) {\n            i = 2;\n        }\n\n        j = nxt[i];\n        k = nxt[j];\n        s = Math.sqrt((m.matrix[i][i] - (m.matrix[j][j] + m.matrix[k][k])) + 1.0);\n\n        q[i] = s * 0.5;\n        s = 0.5 / s;\n        q[3] = (m.matrix[j][k] - m.matrix[k][j]) * s;\n        q[j] = (m.matrix[i][j] + m.matrix[j][i]) * s;\n        q[k] = (m.matrix[i][k] + m.matrix[k][i]) * s;\n    }\n    \n     return new Quaternion(q[3],q[0],q[1],q[2]);\n };\n \n Quaternion.getAlignmentQuat = function(dir,forward){\n\t\tvar target = dir.getNormalized(),\n\t\t\taxis = forward.cross(target),\n\t\t\tlength = axis.magnitude() + 0.0001,\n\t\t\tangle = Math.atan2(length, forward.dot(target));\n        return this.createFromAxisAngle(axis, angle);\n };\n\n module.exports = Quaternion;\n\n"]},"metadata":{},"sourceType":"script"}