{"ast":null,"code":"var TColor = require('./TColor');\n\nvar ColorList = require('./ColorList');\n\nvar FloatRange = require('../util/datatypes/FloatRange');\n\nvar is = require('../internals/is');\n\nvar each = require('../internals/each');\n\nvar MathUtils = require('../math/mathUtils');\n\nvar ColorRange,\n    UNTITLED_ID = 1,\n    addRange,\n    addAll,\n    pickRandom; //@private\n//add all elements to the given array, without creating a new array (like concat)\n\naddAll = function (arr, elementsArr) {\n  arr.push.apply(arr, elementsArr);\n}; //@private\n//the addAlphaRange, addHueRangeâ€¦ methods are identical, so with js,\n//we can generate them without\n\n\naddRange = function (attr) {\n  return function (min, max) {\n    this[attr.toLowerCase() + 'Constraint'].push(is.FloatRange(min) ? min : new FloatRange(min, max));\n    return this;\n  };\n}; //@private\n//pickRandom element from array\n\n\npickRandom = function (arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n/**\n* A ColorRange is a set of constraints to specify possible ranges for hue,\n* saturation, brightness and alpha independently and use these as creation\n* rules for new {@link TColor}s or {@link ColorList}s. The class comes with 11\n* preset ranges reflecting common demands and color characters. You can also\n* construct new ranges and manually add additional constraints. Unless the\n* constraints in a range are very narrow the class will always create random\n* variations within the constraints. Please see the examples for further\n* details.\n*\n* {@link ColorRange}s are a key ingredient for defining {@link ColorTheme}s but\n* can also be used individually.\n*/\n\n/**\n* construct a new ColorRange,\n* this constructor takes a wide variety of param signatures,\n* 1.\n    * @param {toxi.color.ColorList} list\n* 2.\n    * @param {toxi.util.datatypes.FloatRange} [hue]\n    * @param {toxi.util.datatypes.FloatRange} [sat]\n    * @param {toxi.util.datatypes.FloatRange} [bri]\n    * @param {toxi.util.datatypes.FloatRange} [alpha]\n    * @param {toxi.util.datatypes.FloatRange} [black]\n    * @param {toxi.util.datatypes.FloatRange} [white]\n    * @param {String} [name]\n* 3.\n    * @param {toxi.util.datatypes.FloatRange} [hue]\n    * @param {toxi.util.datatypes.FloatRange} [sat]\n    * @param {toxi.util.datatypes.FloatRange} [bri]\n    * @param {toxi.util.datatypes.FloatRange} [alpha]\n    * @param {String} [name]\n* 4.\n    * @param {toxi.util.datatypes.FloatRange} [hue]\n    * @param {toxi.util.datatypes.FloatRange} [sat]\n    * @param {toxi.util.datatypes.FloatRange} [bri]\n    * @param {String} [name]\n* 5.name\n    * @param {toxi.color.Hue} hue\n* 6.\n    * @param {toxi.color.TColor} c\n*/\n\n\nColorRange = function (hue, sat, bri, alpha, black, white, name) {\n  var self = this,\n      list; //if ColorList is supplied\n\n  if (arguments.length === 0) {\n    return this;\n  } //ColorRange( ColorList list)\n\n\n  if (is.ColorList(hue)) {\n    list = hue;\n    hue = list.get(0);\n  } //ColorRange( Hue hue )\n\n\n  if (is.Hue(hue)) {\n    hue = new FloatRange(hue.getHue(), hue.getHue());\n  } //ColorRange( TColor c )\n\n\n  if (is.TColor(hue)) {\n    //transform `hue` from a TColor to FloatRange for hue\n    hue = new FloatRange(hue.hue(), hue.hue());\n  }\n\n  this.hueConstraint = [is.FloatRange(hue) ? hue : new FloatRange(0, 1)];\n  this.saturationConstraint = [is.FloatRange(sat) ? sat : new FloatRange(0, 1)];\n  this.brightnessConstraint = [is.FloatRange(bri) ? bri : new FloatRange(0, 1)];\n  this.alphaConstraint = [is.FloatRange(alpha) ? alpha : new FloatRange(1, 1)]; //not arrays for black & white\n\n  this.black = is.FloatRange(black) ? black : new FloatRange(0, 1);\n  this.white = is.FloatRange(white) ? white : new FloatRange(0, 1); //now that the constraints have all been created\n\n  if (list) {\n    this.hueConstraint = []; //clear the hues\n\n    list.each(function (c) {\n      self.add(c);\n    });\n  } //search arguments for a string that would be the name\n\n\n  var i = arguments.length - 1;\n\n  for (; i >= 0; i--) {\n    if (typeof arguments[i] === 'string') {\n      this.name = arguments[i];\n      break;\n    }\n  }\n\n  if (!this.name) {\n    this.name = \"untitled\" + UNTITLED_ID++;\n  }\n};\n\nColorRange.prototype = {\n  constructor: ColorRange,\n\n  /**\n   * Adds the HSV color components as constraints\n   * @param {toxi.color.ColorRange | toxi.color.TColor} rc\n   * @return itself\n   */\n  add: function (rc) {\n    if (is.ColorRange(rc)) {\n      addAll(this.hueConstraint, rc.hueConstraint);\n      addAll(this.saturationConstraint, rc.saturationConstraint);\n      addAll(this.brightnessConstraint, rc.brightnessConstraint);\n      addAll(this.alphaConstraint, rc.alphaConstraint);\n      this.black.min = Math.min(this.black.min, rc.black.min);\n      this.black.max = Math.max(this.black.max, rc.black.max);\n      this.white.min = Math.min(this.white.min, rc.white.min);\n      this.white.max = Math.max(this.white.max, rc.white.max);\n    } else {\n      this.hueConstraint.push(new FloatRange(rc.hue(), rc.hue()));\n      this.saturationConstraint.push(new FloatRange(rc.saturation(), rc.saturation()));\n      this.brightnessConstraint.push(new FloatRange(rc.brightness(), rc.brightness()));\n      this.alphaConstraint.push(new FloatRange(rc.alpha(), rc.alpha()));\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds the range between min-max as possible alpha values for this range\n   * @param {toxi.util.datatypes.FloatRange | Number} min\n   * @param {Number} [max]\n   * @return itself\n   */\n  addAlphaRange: addRange('alpha'),\n  addBrightnessRange: addRange('brightness'),\n  addHue: function (hue) {\n    this.hueConstraint.push(new FloatRange(hue.getHue(), hue.getHue()));\n    return this;\n  },\n  addHueRange: addRange('hue'),\n  addSaturationRange: addRange('saturation'),\n\n  /**\n   * checks if all HSVA components of the given color are within\n   * the constraints define for this range\n   * @param {toxi.color.TColor} c\n   * @return true if is contained\n   */\n  contains: function (c) {\n    var isInRange = this.isValueInConstraint(c.hue(), this.hueConstraint);\n    isInRange &= this.isValueInConstraint(c.saturation(), this.saturationConstraint);\n    isInRange &= this.isValueInConstraint(c.brightness(), this.brightnessConstraint);\n    isInRange &= this.isValueInConstraint(c.alpha(), this.alphaConstraint);\n    return isInRange || false; //if its 0, return false\n  },\n\n  /**\n   * creates a copy of the range but overrides the hue\n   * and alpha constraints taken from the given color (if specified)\n   * @param {toxi.color.TColor} [c]\n   * @param {Number} [variance]\n   * @return copy\n   */\n  copy: function (c, variance) {\n    variance = typeof variance === 'number' ? variance : 0;\n    var range = new ColorRange();\n    range.name = this.name;\n\n    if (c) {\n      var hue = c.hue() + variance * MathUtils.normalizedRandom();\n      range.hueConstraint = [new FloatRange(hue, hue)];\n      range.alphaConstraint = [new FloatRange(c.alpha(), c.alpha())];\n    } else {\n      range.hueConstraint = [].concat(this.hueConstraint);\n      range.alphaConstraint = [].concat(this.alphaConstraint);\n    }\n\n    range.saturationConstraint = [].concat(this.saturationConstraint);\n    range.brightnessConstraint = [].concat(this.brightnessConstraint);\n    range.black = this.black.copy();\n    range.white = this.white.copy();\n    return range;\n  },\n\n  /**\n   * creates a new shade of the given parameter based on the other constraints\n   * of the range. This function has many param options:\n   * 1. no params\n   * 2.\n      * @param {toxi.color.Hue} hue\n   * 3.\n      * @param {toxi.color.TColor} c\n      * @param {Number} variance\n  */\n  getColor: function (hue_c, variance) {\n    if (is.Hue(hue_c)) {\n      return TColor.newHSVA(hue_c.getHue(), pickRandom(this.saturationConstraint).pickRandom(), pickRandom(this.brightnessConstraint).pickRandom(), pickRandom(this.alphaConstraint).pickRandom());\n    } //must be a TColor\n\n\n    var c = hue_c,\n        h,\n        s,\n        b,\n        a;\n\n    if (c) {\n      if (c.isBlack()) {\n        return TColor.newHSVA(c.hue(), 0, this.black.pickRandom(), c.alpha());\n      } else if (c.isWhite()) {\n        return TColor.newHSVA(c.hue(), 0, this.white.pickRandom(), c.alpha());\n      }\n\n      if (c.isGrey()) {\n        return TColor.newHSVA(c.hue(), 0, MathUtils.flipCoin() ? this.black.pickRandom() : this.white.pickRandom(), c.alpha());\n      }\n\n      h = c.hue() + variance * MathUtils.normalizedRandom();\n      a = c.alpha();\n    } else {\n      h = pickRandom(this.hueConstraint).pickRandom();\n      a = pickRandom(this.alphaConstraint).pickRandom();\n    }\n\n    s = pickRandom(this.saturationConstraint).pickRandom();\n    b = pickRandom(this.brightnessConstraint).pickRandom();\n    return TColor.newHSVA(h, s, b, a);\n  },\n\n  /**\n  * creates a new `toxi.color.ColorList` of colors based\n  * on constraints of this range\n  * 1.\n      * @param {Number} num integer of how many colors to get\n  * 2.\n      * @param {toxi.color.TColor} c\n      * @param {Number} num\n      * @param {Number} variance\n  * @return {toxi.color.ColorList} list\n  */\n  getColors: function (c, num, variance) {\n    if (arguments.length < 3) {\n      variance = ColorRange.DEFAULT_VARIANCE;\n    }\n\n    if (arguments.length === 1) {\n      num = c;\n      c = undefined;\n    }\n\n    var list = new ColorList();\n\n    for (var i = 0; i < num; i++) {\n      list.add(this.getColor(c, variance));\n    }\n\n    return list;\n  },\n\n  /**\n   * creates a new shade of gray\n   * @param {Number} brightness\n   * @param {Number} variance\n   */\n  getGrayscale: function (brightness, variance) {\n    return this.getColor(TColor.newGray(brightness), variance);\n  },\n  getName: function () {\n    return this.name;\n  },\n\n  /**\n   * creates a copy of the current range and adds the given one to it\n   * @param {toxi.color.ColorRange} range\n   * @return the summed copy\n   */\n  getSum: function (range) {\n    return this.copy().add(range);\n  },\n  isValueInConstraint: function (val, rangeSet) {\n    var isValid = false;\n    each(rangeSet, function (r) {\n      isValid |= r.isValueInRange(val);\n    });\n    return isValid;\n  }\n}; //default hue variance for #getColor\n\nColorRange.DEFAULT_VARIANCE = 0.035; //build static pre-defined ColorRange's\n\n(function (FR, un) {\n  ColorRange.PRESETS = {};\n  each({\n    'light': [un, new FR(0.3, 0.7), new FR(0.9, 1.0), un, new FR(0.15, 0.3), un],\n    'dark': [un, new FR(0.7, 1.0), new FR(0.15, 0.4), un, un, new FR(0.5, 0.75)],\n    'bright': [un, new FR(0.8, 1.0), new FR(0.8, 1.0)],\n    'weak': [un, new FR(0.15, 0.3), new FR(0.7, 1.0), un, new FR(0.2, 0.2), un],\n    'neutral': [un, new FR(0.25, 0.35), new FR(0.3, 0.7), un, new FR(0.15, 0.15), new FR(0.9, 1.0)],\n    'fresh': [un, new FR(0.4, 0.8), new FR(0.8, 1.0), un, new FR(0.05, 0.3), new FR(0.8, 1.0)],\n    'soft': [un, new FR(0.2, 0.3), new FR(0.6, 0.9), un, new FR(0.05, 0.15), new FR(0.6, 0.9)],\n    'hard': [un, new FR(0.9, 1.0), new FR(0.4, 1.0)],\n    'warm': [un, new FR(0.6, 0.9), new FR(0.4, 0.9), un, new FR(0.2, 0.2), new FR(0.8, 1.0)],\n    'cool': [un, new FR(0.05, 0.2), new FR(0.9, 1.0), un, un, new FR(0.95, 1.0)],\n    'intense': [un, new FR(0.9, 1.0), new FR(0.2, 0.35)]\n  }, function (args, name) {\n    args.push(name);\n    var nameUC = name.toUpperCase(); //construct a new ColorRange without params (only do this internally)\n\n    ColorRange[nameUC] = new ColorRange(); //apply the arguments to the constructor\n\n    ColorRange.apply(ColorRange[nameUC], args); //reference the same object from the PRESETS object\n\n    ColorRange.PRESETS[nameUC] = ColorRange[nameUC];\n  });\n  ColorRange.INTENSE.addBrightnessRange(new FR(0.8, 1.0));\n})(FloatRange, undefined);\n\nColorRange.getPresetForName = function (name) {\n  return ColorRange.PRESETS[name.toUpperCase()];\n};\n\nmodule.exports = ColorRange;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/color/ColorRange.js"],"names":["TColor","require","ColorList","FloatRange","is","each","MathUtils","ColorRange","UNTITLED_ID","addRange","addAll","pickRandom","arr","elementsArr","push","apply","attr","min","max","toLowerCase","Math","floor","random","length","hue","sat","bri","alpha","black","white","name","self","list","arguments","get","Hue","getHue","hueConstraint","saturationConstraint","brightnessConstraint","alphaConstraint","c","add","i","prototype","constructor","rc","saturation","brightness","addAlphaRange","addBrightnessRange","addHue","addHueRange","addSaturationRange","contains","isInRange","isValueInConstraint","copy","variance","range","normalizedRandom","concat","getColor","hue_c","newHSVA","h","s","b","a","isBlack","isWhite","isGrey","flipCoin","getColors","num","DEFAULT_VARIANCE","undefined","getGrayscale","newGray","getName","getSum","val","rangeSet","isValid","r","isValueInRange","FR","un","PRESETS","args","nameUC","toUpperCase","INTENSE","getPresetForName","module","exports"],"mappings":"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","sourcesContent":["var TColor = require('./TColor');\nvar ColorList = require('./ColorList');\nvar FloatRange = require('../util/datatypes/FloatRange');\nvar is = require('../internals/is');\nvar each = require('../internals/each');\nvar MathUtils = require('../math/mathUtils');\n\n    var ColorRange,\n        UNTITLED_ID = 1,\n        addRange,\n        addAll,\n        pickRandom;\n\n\n    //@private\n    //add all elements to the given array, without creating a new array (like concat)\n    addAll = function( arr, elementsArr ){\n        arr.push.apply(arr, elementsArr);\n    };\n\n    //@private\n    //the addAlphaRange, addHueRangeâ€¦ methods are identical, so with js,\n    //we can generate them without\n    addRange = function(attr){\n        return function( min, max ){\n            this[attr.toLowerCase()+'Constraint'].push( is.FloatRange(min) ? min : new FloatRange(min,max) );\n            return this;\n        };\n    };\n\n    //@private\n    //pickRandom element from array\n    pickRandom = function( arr ){\n        return arr[Math.floor(Math.random()*arr.length)];\n    };\n\n    /**\n    * A ColorRange is a set of constraints to specify possible ranges for hue,\n    * saturation, brightness and alpha independently and use these as creation\n    * rules for new {@link TColor}s or {@link ColorList}s. The class comes with 11\n    * preset ranges reflecting common demands and color characters. You can also\n    * construct new ranges and manually add additional constraints. Unless the\n    * constraints in a range are very narrow the class will always create random\n    * variations within the constraints. Please see the examples for further\n    * details.\n    *\n    * {@link ColorRange}s are a key ingredient for defining {@link ColorTheme}s but\n    * can also be used individually.\n    */\n\n\n    /**\n    * construct a new ColorRange,\n    * this constructor takes a wide variety of param signatures,\n    * 1.\n        * @param {toxi.color.ColorList} list\n    * 2.\n        * @param {toxi.util.datatypes.FloatRange} [hue]\n        * @param {toxi.util.datatypes.FloatRange} [sat]\n        * @param {toxi.util.datatypes.FloatRange} [bri]\n        * @param {toxi.util.datatypes.FloatRange} [alpha]\n        * @param {toxi.util.datatypes.FloatRange} [black]\n        * @param {toxi.util.datatypes.FloatRange} [white]\n        * @param {String} [name]\n    * 3.\n        * @param {toxi.util.datatypes.FloatRange} [hue]\n        * @param {toxi.util.datatypes.FloatRange} [sat]\n        * @param {toxi.util.datatypes.FloatRange} [bri]\n        * @param {toxi.util.datatypes.FloatRange} [alpha]\n        * @param {String} [name]\n    * 4.\n        * @param {toxi.util.datatypes.FloatRange} [hue]\n        * @param {toxi.util.datatypes.FloatRange} [sat]\n        * @param {toxi.util.datatypes.FloatRange} [bri]\n        * @param {String} [name]\n    * 5.name\n        * @param {toxi.color.Hue} hue\n    * 6.\n        * @param {toxi.color.TColor} c\n    */\n    ColorRange = function( hue, sat, bri, alpha, black, white, name ){\n        var self = this, list; //if ColorList is supplied\n        if( arguments.length === 0 ){\n            return this;\n        }\n        //ColorRange( ColorList list)\n        if( is.ColorList(hue) ){\n            list = hue;\n            hue = list.get(0);\n        }\n        //ColorRange( Hue hue )\n        if( is.Hue(hue) ){\n            hue = new FloatRange( hue.getHue(), hue.getHue() );\n        }\n        //ColorRange( TColor c )\n        if( is.TColor(hue) ){\n            //transform `hue` from a TColor to FloatRange for hue\n            hue = new FloatRange( hue.hue(), hue.hue() );\n        }\n        this.hueConstraint = [is.FloatRange(hue) ? hue : new FloatRange(0,1)];\n        this.saturationConstraint = [is.FloatRange(sat) ? sat : new FloatRange(0,1)];\n        this.brightnessConstraint = [is.FloatRange(bri) ? bri : new FloatRange(0,1)];\n        this.alphaConstraint = [is.FloatRange(alpha) ? alpha : new FloatRange(1,1)];\n        //not arrays for black & white\n        this.black = is.FloatRange(black) ? black : new FloatRange(0,1);\n        this.white = is.FloatRange(white) ? white : new FloatRange(0,1);\n        //now that the constraints have all been created\n        if( list ){\n            this.hueConstraint = []; //clear the hues\n            list.each(function(c){ self.add(c); });\n        }\n        //search arguments for a string that would be the name\n        var i=arguments.length-1;\n        for(; i>=0; i--){\n            if( typeof arguments[i] === 'string' ){\n                this.name = arguments[i];\n                break;\n            }\n        }\n        if( !this.name ){\n            this.name = \"untitled\"+(UNTITLED_ID++);\n        }\n    };\n\n\n    ColorRange.prototype = {\n        constructor: ColorRange,\n        /**\n         * Adds the HSV color components as constraints\n         * @param {toxi.color.ColorRange | toxi.color.TColor} rc\n         * @return itself\n         */\n        add: function( rc ){\n            if( is.ColorRange(rc) ){\n                addAll(this.hueConstraint, rc.hueConstraint);\n                addAll(this.saturationConstraint, rc.saturationConstraint);\n                addAll(this.brightnessConstraint, rc.brightnessConstraint);\n                addAll(this.alphaConstraint, rc.alphaConstraint);\n                this.black.min = Math.min( this.black.min, rc.black.min );\n                this.black.max = Math.max( this.black.max, rc.black.max );\n                this.white.min = Math.min( this.white.min, rc.white.min );\n                this.white.max = Math.max( this.white.max, rc.white.max );\n            } else {\n                this.hueConstraint.push( new FloatRange(rc.hue(),rc.hue()) );\n                this.saturationConstraint.push( new FloatRange(rc.saturation(),rc.saturation()) );\n                this.brightnessConstraint.push( new FloatRange(rc.brightness(),rc.brightness()) );\n                this.alphaConstraint.push( new FloatRange(rc.alpha(),rc.alpha()) );\n            }\n            return this;\n        },\n        /**\n         * Adds the range between min-max as possible alpha values for this range\n         * @param {toxi.util.datatypes.FloatRange | Number} min\n         * @param {Number} [max]\n         * @return itself\n         */\n        addAlphaRange: addRange('alpha'),\n        addBrightnessRange: addRange('brightness'),\n        addHue: function( hue ){\n            this.hueConstraint.push( new FloatRange( hue.getHue(), hue.getHue() ) );\n            return this;\n        },\n        addHueRange: addRange('hue'),\n        addSaturationRange: addRange('saturation'),\n        /**\n         * checks if all HSVA components of the given color are within\n         * the constraints define for this range\n         * @param {toxi.color.TColor} c\n         * @return true if is contained\n         */\n        contains: function( c ){\n            var isInRange = this.isValueInConstraint(c.hue(), this.hueConstraint);\n            isInRange &= this.isValueInConstraint(c.saturation(), this.saturationConstraint);\n            isInRange &= this.isValueInConstraint(c.brightness(), this.brightnessConstraint);\n            isInRange &= this.isValueInConstraint(c.alpha(), this.alphaConstraint);\n            return isInRange || false; //if its 0, return false\n        },\n        /**\n         * creates a copy of the range but overrides the hue\n         * and alpha constraints taken from the given color (if specified)\n         * @param {toxi.color.TColor} [c]\n         * @param {Number} [variance]\n         * @return copy\n         */\n        copy: function( c, variance ){\n            variance = typeof variance === 'number' ? variance : 0;\n            var range = new ColorRange();\n            range.name = this.name;\n            if( c ){\n                var hue = c.hue() + variance * MathUtils.normalizedRandom();\n                range.hueConstraint = [ new FloatRange(hue,hue) ];\n                range.alphaConstraint = [ new FloatRange(c.alpha(),c.alpha()) ];\n            } else {\n                range.hueConstraint = [].concat(this.hueConstraint);\n                range.alphaConstraint = [].concat(this.alphaConstraint);\n            }\n            range.saturationConstraint = [].concat(this.saturationConstraint);\n            range.brightnessConstraint = [].concat(this.brightnessConstraint);\n            range.black = this.black.copy();\n            range.white = this.white.copy();\n            return range;\n        },\n        /**\n         * creates a new shade of the given parameter based on the other constraints\n         * of the range. This function has many param options:\n         * 1. no params\n         * 2.\n            * @param {toxi.color.Hue} hue\n         * 3.\n            * @param {toxi.color.TColor} c\n            * @param {Number} variance\n        */\n        getColor: function( hue_c, variance ){\n            if( is.Hue(hue_c) ){\n                return TColor.newHSVA(\n                    hue_c.getHue(),\n                    pickRandom(this.saturationConstraint).pickRandom(),\n                    pickRandom(this.brightnessConstraint).pickRandom(),\n                    pickRandom(this.alphaConstraint).pickRandom()\n                );\n            }\n            //must be a TColor\n            var c = hue_c, h, s, b, a;\n            if( c ){\n                if( c.isBlack() ){\n                    return TColor.newHSVA(c.hue(), 0, this.black.pickRandom(), c.alpha() );\n                } else if( c.isWhite() ){\n                    return TColor.newHSVA(c.hue(), 0, this.white.pickRandom(), c.alpha() );\n                }\n                if( c.isGrey() ){\n                    return TColor.newHSVA(\n                        c.hue(),\n                        0,\n                        MathUtils.flipCoin() ? this.black.pickRandom() : this.white.pickRandom(),\n                        c.alpha()\n                    );\n                }\n                h = c.hue() + variance * MathUtils.normalizedRandom();\n                a = c.alpha();\n            } else {\n                h = pickRandom(this.hueConstraint).pickRandom();\n                a = pickRandom(this.alphaConstraint).pickRandom();\n            }\n            s = pickRandom(this.saturationConstraint).pickRandom();\n            b = pickRandom(this.brightnessConstraint).pickRandom();\n            return TColor.newHSVA(h,s,b,a);\n        },\n        /**\n        * creates a new `toxi.color.ColorList` of colors based\n        * on constraints of this range\n        * 1.\n            * @param {Number} num integer of how many colors to get\n        * 2.\n            * @param {toxi.color.TColor} c\n            * @param {Number} num\n            * @param {Number} variance\n        * @return {toxi.color.ColorList} list\n        */\n        getColors: function( c, num, variance ){\n            if( arguments.length < 3 ){\n                variance = ColorRange.DEFAULT_VARIANCE;\n            }\n            if( arguments.length === 1 ){\n                num = c;\n                c = undefined;\n            }\n            var list = new ColorList();\n            for( var i=0; i<num; i++){\n                list.add(this.getColor(c, variance));\n            }\n            return list;\n        },\n        /**\n         * creates a new shade of gray\n         * @param {Number} brightness\n         * @param {Number} variance\n         */\n        getGrayscale: function( brightness, variance ){\n            return this.getColor( TColor.newGray(brightness), variance);\n        },\n        getName: function(){\n            return this.name;\n        },\n        /**\n         * creates a copy of the current range and adds the given one to it\n         * @param {toxi.color.ColorRange} range\n         * @return the summed copy\n         */\n        getSum: function( range ){\n            return this.copy().add(range);\n        },\n        isValueInConstraint: function( val, rangeSet ){\n            var isValid = false;\n            each(rangeSet, function(r){\n                isValid |= r.isValueInRange(val);\n            });\n            return isValid;\n        }\n    };\n\n\n    //default hue variance for #getColor\n    ColorRange.DEFAULT_VARIANCE = 0.035;\n\n    //build static pre-defined ColorRange's\n    (function(FR, un){\n        ColorRange.PRESETS = {};\n        each({\n            'light': [ un, new FR(0.3,0.7),new FR(0.9,1.0), un, new FR(0.15,0.3),un],\n            'dark': [un, new FR(0.7,1.0), new FR(0.15,0.4),un,un, new FR(0.5,0.75)],\n            'bright': [un, new FR(0.8,1.0), new FR(0.8,1.0)],\n            'weak': [un, new FR(0.15,0.3), new FR(0.7,1.0), un, new FR(0.2,0.2),un],\n            'neutral': [un, new FR(0.25,0.35), new FR(0.3,0.7),un,new FR(0.15,0.15), new FR(0.9,1.0)],\n            'fresh': [un, new FR(0.4,0.8), new FR(0.8,1.0), un, new FR(0.05,0.3), new FR(0.8,1.0)],\n            'soft': [un, new FR(0.2,0.3),new FR(0.6,0.9), un, new FR(0.05,0.15), new FR(0.6,0.9)],\n            'hard': [un, new FR(0.9,1.0), new FR(0.4,1.0)],\n            'warm': [un, new FR(0.6,0.9), new FR(0.4,0.9), un, new FR(0.2,0.2), new FR(0.8,1.0)],\n            'cool': [un, new FR(0.05, 0.2), new FR(0.9, 1.0), un, un, new FR(0.95,1.0)],\n            'intense': [un, new FR(0.9,1.0), new FR(0.2,0.35)]\n        }, function( args, name ){\n            args.push(name);\n            var nameUC = name.toUpperCase();\n            //construct a new ColorRange without params (only do this internally)\n            ColorRange[nameUC] = new ColorRange();\n            //apply the arguments to the constructor\n            ColorRange.apply(ColorRange[nameUC], args);\n            //reference the same object from the PRESETS object\n            ColorRange.PRESETS[nameUC] = ColorRange[nameUC];\n        });\n        ColorRange.INTENSE.addBrightnessRange( new FR(0.8,1.0) );\n    }(FloatRange, undefined));\n\n\n    ColorRange.getPresetForName = function( name ){\n        return ColorRange.PRESETS[name.toUpperCase()];\n    };\n\n    module.exports = ColorRange;\n\n"]},"metadata":{},"sourceType":"script"}