{"ast":null,"code":"var Vec3D = require('./Vec3D');\n\nvar is = require('../internals/is');\n\nvar BernsteinPolynomial = require('./BernsteinPolynomial');\n/**\n * @class\n * @member toxi\n * @param {Vec3D[]} points array of Vec3D's\n * @param {BernsteinPolynomial} [bernsteinPoly]\n */\n\n\nvar Spline3D = function (points, bernsteinPoly, tightness) {\n  if (arguments.length === 1 && !is.Array(points) && is.Object(points)) {\n    //if its an options object\n    bernsteinPoly = bernsteinPoly || points.bernsteinPoly;\n    tightness = tightness || points.tightness;\n    points = points.points;\n  }\n\n  var i = 0,\n      l;\n  this.pointList = [];\n\n  if (typeof tightness !== 'number') {\n    tightness = Spline3D.DEFAULT_TIGHTNESS;\n  }\n\n  this.setTightness(tightness); //this may be undefined\n\n  this.bernstein = bernsteinPoly;\n\n  if (points !== undefined) {\n    for (i = 0, l = points.length; i < l; i++) {\n      this.add(points[i].copy());\n    }\n  }\n\n  this.coeffA = [];\n  this.delta = [];\n  this.bi = [];\n\n  for (i = 0; i < this.numP; i++) {\n    this.coeffA[i] = new Vec3D();\n    this.delta[i] = new Vec3D();\n    this.bi[i] = 0;\n  }\n\n  this.bi = [];\n};\n\nSpline3D.prototype = {\n  add: function (p) {\n    this.pointList.push(p.copy());\n    this.numP = this.pointList.length;\n    return this;\n  },\n  computeVertices: function (res) {\n    this.updateCoefficients();\n\n    if (res < 1) {\n      res = 1;\n    }\n\n    res++;\n\n    if (this.bernstein === undefined || this.bernstein.resolution != res) {\n      this.bernstein = new BernsteinPolynomial(res);\n    }\n\n    var bst = this.bernstein;\n    this.vertices = [];\n    this.findCPoints();\n    var deltaP = new Vec3D();\n    var deltaQ = new Vec3D();\n    res--;\n\n    for (var i = 0; i < this.numP - 1; i++) {\n      var p = this.points[i];\n      var q = this.points[i + 1];\n      deltaP.set(this.delta[i]).addSelf(p);\n      deltaQ.set(q).subSelf(this.delta[i + 1]);\n\n      for (var k = 0; k < res; k++) {\n        var x = p.x * bst.b0[k] + deltaP.x * bst.b1[k] + deltaQ.x * bst.b2[k] + q.x * bst.b3[k];\n        var y = p.y * bst.b0[k] + deltaP.y * bst.b1[k] + deltaQ.y * bst.b2[k] + q.y * bst.b3[k];\n        var z = p.z * bst.b0[k] + deltaP.z * bst.b1[k] + deltaQ.z * bst.b2[k] + q.z * bst.b3[k];\n        this.vertices.push(new Vec3D(x, y, z));\n      }\n    }\n\n    this.vertices.push(this.points[this.points.length - 1].copy());\n    return this.vertices;\n  },\n  findCPoints: function () {\n    this.bi[1] = -0.25;\n    var i, p0, p2, d0;\n    p0 = this.pointList[0];\n    p2 = this.pointList[2];\n    d0 = this.delta[0];\n    this.coeffA[1].set((p2.x - p0.x - d0.x) * this.tightness, //x\n    (p2.y - p0.y - d0.y) * this.tightness, //y\n    (p2.z - p0.z - d0.z) * this.tightness //z\n    );\n\n    for (i = 2; i < this.numP - 1; i++) {\n      this.bi[i] = -1 / (this.invTightness + this.bi[i - 1]);\n      this.coeffA[i].set(-(this.points[i + 1].x - this.points[i - 1].x - this.coeffA[i - 1].x) * this.bi[i], -(this.points[i + 1].y - this.points[i - 1].y - this.coeffA[i - 1].y) * this.bi[i], -(this.points[i + 1].z - this.points[i - 1].z - this.coeffA[i - 1].z) * this.bi[i]);\n    }\n\n    for (i = this.numP - 2; i > 0; i--) {\n      this.delta[i].set(this.coeffA[i].x + this.delta[i + 1].x * this.bi[i], this.coeffA[i].y + this.delta[i + 1].y * this.bi[i], this.coeffA[i].z + this.delta[i + 1].z * this.bi[i]);\n    }\n  },\n  getDecimatedVertices: function (step, doAddFinalVertex) {\n    if (doAddFinalVertex === undefined) doAddFinalVertex = true;\n\n    if (this.vertices === undefined || this.vertices.length < 2) {\n      this.computeVertices(Spline3D.DEFAULT_RES);\n    }\n\n    var arcLen = this.getEstimatedArcLength();\n    var uniform = [];\n    var delta = step / arcLen;\n    var currIdx = 0;\n\n    for (var t = 0; t < 1.0; t += delta) {\n      var currT = t * arcLen;\n\n      while (currT >= this.arcLenIndex[currIdx]) {\n        currIdx++;\n      }\n\n      var p = this.vertices[currIdx - 1];\n      var q = this.vertices[currIdx];\n      var frac = (currT - this.arcLenIndex[currIdx - 1]) / (this.arcLenIndex[currIdx] - this.arcLenIndex[currIdx - 1]);\n      var i = p.interpolateTo(q, frac);\n      uniform.push(i);\n    }\n\n    if (doAddFinalVertex) {\n      uniform.push(this.vertices[this.vertices.length - 1]);\n    }\n\n    return uniform;\n  },\n  getEstimatedArcLength: function () {\n    var len;\n    var arcLen = 0;\n\n    if (this.arcLenIndex === undefined || this.arcLenIndex !== undefined && this.arcLenIndex.length != this.vertices.length) {\n      this.arcLenIndex = [0];\n      len = this.vertices.length;\n    } else {\n      len = this.arcLenIndex.length;\n    }\n\n    for (var i = 1; i < len; i++) {\n      var p = this.vertices[i - 1];\n      var q = this.vertices[i];\n      arcLen += p.distanceTo(q);\n      this.arcLenIndex[i] = arcLen;\n    }\n\n    return arcLen;\n  },\n  getNumPoints: function () {\n    return this.numP;\n  },\n  getPointList: function () {\n    return this.pointList;\n  },\n  getTightness: function () {\n    return this.tightness;\n  },\n  setPointList: function (plist) {\n    this.pointList = plist.slice(0);\n    return this;\n  },\n  setTightness: function (tight) {\n    this.tightness = tight;\n    this.invTightness = 1 / this.tightness;\n    return this;\n  },\n  updateCoefficients: function () {\n    this.numP = this.pointList.length;\n\n    if (this.points === undefined || this.points !== undefined && this.points.length != this.numP) {\n      this.coeffA = [];\n      this.delta = [];\n      this.bi = [];\n\n      for (var i = 0; i < this.numP; i++) {\n        this.coeffA[i] = new Vec3D();\n        this.delta[i] = new Vec3D();\n      }\n\n      this.setTightness(this.tightness);\n    }\n\n    this.points = this.pointList.slice(0);\n  }\n};\nSpline3D.DEFAULT_TIGHTNESS = 0.25;\nSpline3D.DEFAULT_RES = 16;\nmodule.exports = Spline3D;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/geom/Spline3D.js"],"names":["Vec3D","require","is","BernsteinPolynomial","Spline3D","points","bernsteinPoly","tightness","arguments","length","Array","Object","i","l","pointList","DEFAULT_TIGHTNESS","setTightness","bernstein","undefined","add","copy","coeffA","delta","bi","numP","prototype","p","push","computeVertices","res","updateCoefficients","resolution","bst","vertices","findCPoints","deltaP","deltaQ","q","set","addSelf","subSelf","k","x","b0","b1","b2","b3","y","z","p0","p2","d0","invTightness","getDecimatedVertices","step","doAddFinalVertex","DEFAULT_RES","arcLen","getEstimatedArcLength","uniform","currIdx","t","currT","arcLenIndex","frac","interpolateTo","len","distanceTo","getNumPoints","getPointList","getTightness","setPointList","plist","slice","tight","module","exports"],"mappings":"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","sourcesContent":["var Vec3D = require('./Vec3D');\nvar is = require('../internals/is');\nvar BernsteinPolynomial = require('./BernsteinPolynomial');\n\n    /**\n     * @class\n     * @member toxi\n     * @param {Vec3D[]} points array of Vec3D's\n     * @param {BernsteinPolynomial} [bernsteinPoly]\n     */\n    var\tSpline3D = function(points, bernsteinPoly, tightness){\n        if( arguments.length === 1 && !is.Array( points ) && is.Object(points) ){\n            //if its an options object\n            bernsteinPoly = bernsteinPoly || points.bernsteinPoly;\n            tightness = tightness || points.tightness;\n            points = points.points;\n        }\n        var i = 0, l;\n        this.pointList = [];\n        if( typeof tightness !== 'number' ){\n            tightness = Spline3D.DEFAULT_TIGHTNESS;\n        }\n        this.setTightness(tightness);\n        //this may be undefined\n        this.bernstein = bernsteinPoly;\n        if( points !== undefined ){\n            for(i = 0, l = points.length; i<l; i++){\n                this.add( points[i].copy() );\n            }\n        }\n        this.coeffA = [];\n        this.delta = [];\n        this.bi = [];\n        for (i = 0; i < this.numP; i++) {\n            this.coeffA[i] = new Vec3D();\n            this.delta[i] = new Vec3D();\n            this.bi[i] = 0;\n        }\n        this.bi = [];\n    };\n\n\n    Spline3D.prototype = {\n        add: function(p){\n            this.pointList.push(p.copy());\n            this.numP = this.pointList.length;\n            return this;\n        },\n\n\n        computeVertices: function(res){\n            this.updateCoefficients();\n            if( res < 1 ){\n                res = 1;\n            }\n            res++;\n            if (this.bernstein === undefined || this.bernstein.resolution != res) {\n                this.bernstein = new BernsteinPolynomial(res);\n            }\n            var bst = this.bernstein;\n            this.vertices = [];\n            this.findCPoints();\n            var deltaP = new Vec3D();\n            var deltaQ = new Vec3D();\n            res--;\n            for (var i = 0; i < this.numP - 1; i++) {\n                var p = this.points[i];\n                var q = this.points[i + 1];\n                deltaP.set(this.delta[i]).addSelf(p);\n                deltaQ.set(q).subSelf(this.delta[i + 1]);\n                for (var k = 0; k < res; k++) {\n                    var x = p.x * bst.b0[k] + deltaP.x * bst.b1[k] +\n                        deltaQ.x * bst.b2[k] +\n                        q.x * bst.b3[k];\n                    var y = p.y * bst.b0[k] + deltaP.y * bst.b1[k] +\n                        deltaQ.y * bst.b2[k] +\n                        q.y * bst.b3[k];\n                    var z = p.z * bst.b0[k] + deltaP.z * bst.b1[k] +\n                        deltaQ.z * bst.b2[k] + q.z * bst.b3[k];\n                    this.vertices.push(new Vec3D(x, y, z));\n                }\n            }\n            this.vertices.push(this.points[this.points.length-1].copy());\n            return this.vertices;\n        },\n\n        findCPoints: function(){\n            this.bi[1] = -0.25;\n            var i, p0, p2, d0;\n            p0 = this.pointList[0];\n            p2 = this.pointList[2];\n            d0 = this.delta[0];\n            this.coeffA[1].set(\n                (p2.x - p0.x - d0.x) * this.tightness, //x\n                (p2.y - p0.y - d0.y) * this.tightness, //y\n                (p2.z - p0.z - d0.z) * this.tightness //z\n            );\n            for (i = 2; i < this.numP - 1; i++) {\n                this.bi[i] = -1 / (this.invTightness + this.bi[i - 1]);\n                this.coeffA[i].set(\n                    -(this.points[i + 1].x - this.points[i - 1].x - this.coeffA[i - 1].x) * this.bi[i],\n                    -(this.points[i + 1].y - this.points[i - 1].y - this.coeffA[i - 1].y) * this.bi[i],\n                    -(this.points[i + 1].z - this.points[i - 1].z - this.coeffA[i - 1].z) * this.bi[i]\n                );\n            }\n            for (i = this.numP - 2; i > 0; i--) {\n                this.delta[i].set(\n                    this.coeffA[i].x + this.delta[i + 1].x * this.bi[i],\n                    this.coeffA[i].y + this.delta[i + 1].y * this.bi[i],\n                    this.coeffA[i].z + this.delta[i + 1].z * this.bi[i]\n                );\n            }\n        },\n\n        getDecimatedVertices: function(step,doAddFinalVertex){\n            if(doAddFinalVertex === undefined)doAddFinalVertex = true;\n            if(this.vertices === undefined || this.vertices.length < 2){\n                this.computeVertices(Spline3D.DEFAULT_RES);\n            }\n            var arcLen = this.getEstimatedArcLength();\n            var uniform = [];\n            var delta = step / arcLen;\n            var currIdx = 0;\n            for(var t =0; t<1.0; t+= delta){\n                var currT = t * arcLen;\n                while(currT >= this.arcLenIndex[currIdx]){\n                    currIdx++;\n                }\n                var p = this.vertices[currIdx - 1];\n                var q = this.vertices[currIdx];\n                var frac = ((currT - this.arcLenIndex[currIdx - 1]) / (this.arcLenIndex[currIdx] - this.arcLenIndex[currIdx - 1]));\n\n                var i = p.interpolateTo(q,frac);\n                uniform.push(i);\n            }\n            if(doAddFinalVertex){\n                uniform.push(this.vertices[this.vertices.length-1]);\n            }\n            return uniform;\n        },\n\n\n        getEstimatedArcLength: function(){\n            var len;\n            var arcLen = 0;\n\n            if(this.arcLenIndex === undefined || (this.arcLenIndex !== undefined && this.arcLenIndex.length != this.vertices.length)){\n                this.arcLenIndex = [0];\n                len = this.vertices.length;\n            }\n            else {\n                len = this.arcLenIndex.length;\n            }\n\n            for(var i=1;i<len;i++){\n                var p = this.vertices[i-1];\n                var q = this.vertices[i];\n                arcLen += p.distanceTo(q);\n                this.arcLenIndex[i] = arcLen;\n            }\n\n            return arcLen;\n        },\n\n\n        getNumPoints: function(){\n            return this.numP;\n        },\n\n        getPointList: function(){\n            return this.pointList;\n        },\n\n        getTightness: function(){\n            return this.tightness;\n        },\n\n        setPointList: function(plist){\n            this.pointList =plist.slice(0);\n            return this;\n        },\n\n        setTightness: function(tight){\n            this.tightness = tight;\n            this.invTightness = 1 / this.tightness;\n            return this;\n        },\n\n        updateCoefficients: function(){\n            this.numP = this.pointList.length;\n            if(this.points === undefined || (this.points !== undefined && this.points.length != this.numP)) {\n                this.coeffA = [];\n                this.delta = [];\n                this.bi = [];\n                for(var i=0;i<this.numP; i++){\n                    this.coeffA[i] = new Vec3D();\n                    this.delta[i] = new Vec3D();\n                }\n                this.setTightness(this.tightness);\n            }\n            this.points = this.pointList.slice(0);\n        }\n\n    };\n\n    Spline3D.DEFAULT_TIGHTNESS = 0.25;\n    Spline3D.DEFAULT_RES = 16;\n\n    module.exports = Spline3D;\n\n"]},"metadata":{},"sourceType":"script"}