{"ast":null,"code":"var LinearInterpolation = require('./LinearInterpolation');\n/**\n* @class Delivers a number of decimated/stepped values for a given interval. E.g. by\n* using 5 steps the interpolation factor is decimated to: 0, 20, 40, 60, 80 and\n* 100%. By default {@link LinearInterpolation} is used, however any other\n* {@link InterpolateStrategy} can be specified via the constructor.\n* @member toxi\n*/\n\n\nvar DecimatedInterpolation = function (steps, strategy) {\n  if (steps === undefined) {\n    throw new Error(\"steps was not passed to constructor\");\n  }\n\n  this.numSteps = steps;\n  this.strategy = strategy || new LinearInterpolation();\n};\n\nDecimatedInterpolation.prototype = {\n  interpolate: function (a, b, f) {\n    var fd = Math.floor(f * this.numSteps) / this.numSteps;\n    return this.strategy.interpolate(a, b, fd);\n  }\n};\nmodule.exports = DecimatedInterpolation;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/math/DecimatedInterpolation.js"],"names":["LinearInterpolation","require","DecimatedInterpolation","steps","strategy","undefined","Error","numSteps","prototype","interpolate","a","b","f","fd","Math","floor","module","exports"],"mappings":"AAAA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,IAAIC,sBAAsB,GAAG,UAASC,KAAT,EAAeC,QAAf,EAAyB;AAClD,MAAGD,KAAK,KAAKE,SAAb,EAAuB;AACnB,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACH;;AACD,OAAKC,QAAL,GAAgBJ,KAAhB;AACA,OAAKC,QAAL,GAAgBA,QAAQ,IAAI,IAAIJ,mBAAJ,EAA5B;AACH,CAND;;AAQAE,sBAAsB,CAACM,SAAvB,GAAmC;AAC/BC,EAAAA,WAAW,EAAE,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAgB;AACzB,QAAIC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,KAAKL,QAApB,IAAiC,KAAKA,QAA/C;AACA,WAAO,KAAKH,QAAL,CAAcK,WAAd,CAA0BC,CAA1B,EAA6BC,CAA7B,EAAgCE,EAAhC,CAAP;AACH;AAJ8B,CAAnC;AAOAG,MAAM,CAACC,OAAP,GAAiBf,sBAAjB","sourcesContent":["var LinearInterpolation = require('./LinearInterpolation');\n    /**\n    * @class Delivers a number of decimated/stepped values for a given interval. E.g. by\n    * using 5 steps the interpolation factor is decimated to: 0, 20, 40, 60, 80 and\n    * 100%. By default {@link LinearInterpolation} is used, however any other\n    * {@link InterpolateStrategy} can be specified via the constructor.\n    * @member toxi\n    */\n    var\tDecimatedInterpolation = function(steps,strategy) {\n        if(steps === undefined){\n            throw new Error(\"steps was not passed to constructor\");\n        }\n        this.numSteps = steps;\n        this.strategy = strategy || new LinearInterpolation();\n    };\n\n    DecimatedInterpolation.prototype = {\n        interpolate: function(a,b,f) {\n            var fd = Math.floor(f * this.numSteps) /  this.numSteps;\n            return this.strategy.interpolate(a, b, fd);\n        }\n    };\n\n    module.exports = DecimatedInterpolation;\n\n"]},"metadata":{},"sourceType":"script"}