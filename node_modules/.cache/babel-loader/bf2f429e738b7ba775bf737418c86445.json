{"ast":null,"code":"var mathUtils = require('../math/mathUtils'),\n    Ray3D = require('./Ray3D');\n/**\n @class\n @member toxi\n */\n\n\nvar Line3D = function (vec_a, vec_b) {\n  this.a = vec_a;\n  this.b = vec_b;\n};\n\nLine3D.prototype = {\n  constructor: Line3D,\n  closestLineTo: function (l) {\n    var p43 = l.a.sub(l.b);\n\n    if (p43.isZeroVector()) {\n      return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n    }\n\n    var p21 = this.b.sub(this.a);\n\n    if (p21.isZeroVector()) {\n      return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n    }\n\n    var p13 = this.a.sub(l.a);\n    var d1343 = p13.x * p43.x + p13.y * p43.y + p13.z * p43.z;\n    var d4321 = p43.x * p21.x + p43.y * p21.y + p43.z * p21.z;\n    var d1321 = p13.x * p21.x + p13.y * p21.y + p13.z * p21.z;\n    var d4343 = p43.x * p43.x + p43.y * p43.y + p43.z * p43.z;\n    var d2121 = p21.x * p21.x + p21.y * p21.y + p21.z * p21.z;\n    var denom = d2121 * d4343 - d4321 * d4321;\n\n    if (Math.abs(denom) < mathUtils.EPS) {\n      return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n    }\n\n    var numer = d1343 * d4321 - d1321 * d4343;\n    var mua = numer / denom;\n    var mub = (d1343 + d4321 * mua) / d4343;\n    var pa = this.a.add(p21.scaleSelf(mua));\n    var pb = l.a.add(p43.scaleSelf(mub));\n    return new Line3D.LineIntersection(Line3D.LineIntersection.Type.INTERSECTING, new Line3D(pa, pb), mua, mub);\n  },\n\n  /**\n  * Computes the closest point on this line to the given one.\n  *\n  * @param p\n  *            point to check against\n  * @return closest point on the line\n  */\n  closestPointTo: function (p) {\n    var v = this.b.sub(this.a);\n    var t = p.sub(this.a).dot(v) / v.magSquared(); // Check to see if t is beyond the extents of the line segment\n\n    if (t < 0.0) {\n      return this.a.copy();\n    } else if (t > 1.0) {\n      return this.b.copy();\n    } // Return the point between 'a' and 'b'\n\n\n    return this.a.add(v.scaleSelf(t));\n  },\n  copy: function () {\n    return new Line3D(this.a.copy(), this.b.copy());\n  },\n  equals: function (obj) {\n    if (this == obj) {\n      return true;\n    }\n\n    if (typeof obj != Line3D) {\n      return false;\n    }\n\n    return (this.a.equals(obj.a) || this.a.equals(l.b)) && (this.b.equals(l.b) || this.b.equals(l.a));\n  },\n  getDirection: function () {\n    return this.b.sub(this.a).normalize();\n  },\n  getLength: function () {\n    return this.a.distanceTo(this.b);\n  },\n  getLengthSquared: function () {\n    return this.a.distanceToSquared(this.b);\n  },\n  getMidPoint: function () {\n    return this.a.add(this.b).scaleSelf(0.5);\n  },\n  getNormal: function () {\n    return this.b.cross(this.a);\n  },\n  hasEndPoint: function (p) {\n    return this.a.equals(p) || this.b.equals(p);\n  },\n  offsetAndGrowBy: function (offset, scale, ref) {\n    var m = this.getMidPoint(),\n        d = this.getDirection(),\n        n = this.a.cross(d).normalize();\n\n    if (ref !== undefined && m.sub(ref).dot(n) < 0) {\n      n.invert();\n    }\n\n    n.normalizeTo(offset);\n    this.a.addSelf(n);\n    this.b.addSelf(n);\n    d.scaleSelf(scale);\n    this.a.subSelf(d);\n    this.b.addSelf(d);\n    return this;\n  },\n  set: function (vec_a, vec_b) {\n    this.a = vec_a;\n    this.b = vec_b;\n    return this;\n  },\n  splitIntoSegments: function (segments, stepLength, addFirst) {\n    return Line3D.splitIntoSegments(this.a, this.b, stepLength, segments, addFirst);\n  },\n  toRay3D: function () {\n    return new Ray3D(this.a.copy(), this.getDirection());\n  },\n  toString: function () {\n    return this.a.toString() + \" -> \" + this.b.toString();\n  }\n};\n/**\n    * Splits the line between A and B into segments of the given length,\n    * starting at point A. The tweened points are added to the given result\n    * list. The last point added is B itself and hence it is likely that the\n    * last segment has a shorter length than the step length requested. The\n    * first point (A) can be omitted and not be added to the list if so\n    * desired.\n    *\n    * @param a\n    *            start point\n    * @param b\n    *            end point (always added to results)\n    * @param stepLength\n    *            desired distance between points\n    * @param segments\n    *            existing array list for results (or a new list, if null)\n    * @param addFirst\n    *            false, if A is NOT to be added to results\n    * @return list of result vectors\n    */\n\nLine3D.splitIntoSegments = function (vec_a, vec_b, stepLength, segments, addFirst) {\n  if (segments === undefined) {\n    segments = [];\n  }\n\n  if (addFirst) {\n    segments.push(vec_a.copy());\n  }\n\n  var dist = vec_a.distanceTo(vec_b);\n\n  if (dist > stepLength) {\n    var pos = vec_a.copy();\n    var step = vec_b.sub(vec_a).limit(stepLength);\n\n    while (dist > stepLength) {\n      pos.addSelf(step);\n      segments.push(pos.copy());\n      dist -= stepLength;\n    }\n  }\n\n  segments.push(vec_b.copy());\n  return segments;\n};\n\nLine3D.LineIntersection = function (type, line, mua, mub) {\n  this.type = type;\n\n  if (mua === undefined) {\n    mua = 0;\n  }\n\n  if (mub === undefined) {\n    mub = 0;\n  }\n\n  this.line = line;\n  this.coeff = [mua, mub];\n};\n\nLine3D.LineIntersection.prototype = {\n  getCoefficient: function () {\n    return this.coeff;\n  },\n  getLength: function () {\n    if (this.line === undefined) {\n      return undefined;\n    }\n\n    return this.line.getLength();\n  },\n  getLine: function () {\n    if (this.line === undefined) {\n      return undefined;\n    }\n\n    return this.line.copy();\n  },\n  getType: function () {\n    return this.type;\n  },\n  isIntersectionInside: function () {\n    return this.type == Line3D.LineIntersection.Type.INTERSECTING && this.coeff[0] >= 0 && this.coeff[0] <= 1 && this.coeff[1] >= 0 && this.coeff[1] <= 1;\n  },\n  toString: function () {\n    return \"type: \" + this.type + \" line: \" + this.line;\n  }\n};\nLine3D.LineIntersection.Type = {\n  NON_INTERSECTING: 0,\n  INTERSECTING: 1\n};\nmodule.exports = Line3D;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/Line3D.js"],"names":["mathUtils","require","Ray3D","Line3D","vec_a","vec_b","a","b","prototype","constructor","closestLineTo","l","p43","sub","isZeroVector","LineIntersection","Type","NON_INTERSECTING","p21","p13","d1343","x","y","z","d4321","d1321","d4343","d2121","denom","Math","abs","EPS","numer","mua","mub","pa","add","scaleSelf","pb","INTERSECTING","closestPointTo","p","v","t","dot","magSquared","copy","equals","obj","getDirection","normalize","getLength","distanceTo","getLengthSquared","distanceToSquared","getMidPoint","getNormal","cross","hasEndPoint","offsetAndGrowBy","offset","scale","ref","m","d","n","undefined","invert","normalizeTo","addSelf","subSelf","set","splitIntoSegments","segments","stepLength","addFirst","toRay3D","toString","push","dist","pos","step","limit","type","line","coeff","getCoefficient","getLine","getType","isIntersectionInside","module","exports"],"mappings":"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","sourcesContent":["\n\nvar mathUtils = require('../math/mathUtils'),\n    Ray3D = require('./Ray3D');\n\n/**\n @class\n @member toxi\n */\nvar Line3D = function(vec_a, vec_b) {\n    this.a = vec_a;\n    this.b = vec_b;\n};\n\nLine3D.prototype = {\n    constructor: Line3D,\n    closestLineTo: function(l) {\n\n        var p43 = l.a.sub(l.b);\n        if (p43.isZeroVector()) {\n            return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n        }\n\n        var p21 = this.b.sub(this.a);\n        if (p21.isZeroVector()) {\n            return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n        }\n        var p13 = this.a.sub(l.a);\n\n        var d1343 = p13.x * p43.x + p13.y * p43.y + p13.z * p43.z;\n        var d4321 = p43.x * p21.x + p43.y * p21.y + p43.z * p21.z;\n        var d1321 = p13.x * p21.x + p13.y * p21.y + p13.z * p21.z;\n        var d4343 = p43.x * p43.x + p43.y * p43.y + p43.z * p43.z;\n        var d2121 = p21.x * p21.x + p21.y * p21.y + p21.z * p21.z;\n\n        var denom = d2121 * d4343 - d4321 * d4321;\n        if (Math.abs(denom) < mathUtils.EPS) {\n            return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n        }\n        var numer = d1343 * d4321 - d1321 * d4343;\n        var mua = numer / denom;\n        var mub = (d1343 + d4321 * mua) / d4343;\n\n        var pa = this.a.add(p21.scaleSelf(mua));\n        var pb = l.a.add(p43.scaleSelf(mub));\n        return new Line3D.LineIntersection(Line3D.LineIntersection.Type.INTERSECTING, new Line3D(pa, pb), mua,mub);\n    },\n\n    /**\n    * Computes the closest point on this line to the given one.\n    *\n    * @param p\n    *            point to check against\n    * @return closest point on the line\n    */\n    closestPointTo: function(p) {\n        var v = this.b.sub(this.a);\n        var t = p.sub(this.a).dot(v) / v.magSquared();\n        // Check to see if t is beyond the extents of the line segment\n        if (t < 0.0) {\n            return this.a.copy();\n        } else if (t > 1.0) {\n            return this.b.copy();\n        }\n        // Return the point between 'a' and 'b'\n        return this.a.add(v.scaleSelf(t));\n    },\n\n    copy: function() {\n        return new Line3D(this.a.copy(), this.b.copy());\n    },\n\n    equals: function(obj) {\n        if (this == obj) {\n            return true;\n        }\n        if ((typeof(obj) != Line3D)) {\n            return false;\n        }\n        return (this.a.equals(obj.a) || this.a.equals(l.b)) && (this.b.equals(l.b) || this.b.equals(l.a));\n    },\n\n    getDirection: function() {\n        return this.b.sub(this.a).normalize();\n    },\n\n    getLength: function() {\n        return this.a.distanceTo(this.b);\n    },\n\n    getLengthSquared: function() {\n        return this.a.distanceToSquared(this.b);\n    },\n\n    getMidPoint: function() {\n        return this.a.add(this.b).scaleSelf(0.5);\n    },\n\n    getNormal: function() {\n        return this.b.cross(this.a);\n    },\n\n    hasEndPoint: function(p) {\n        return this.a.equals(p) || this.b.equals(p);\n    },\n\n\n    offsetAndGrowBy: function(offset,scale,ref) {\n        var m = this.getMidPoint(),\n            d = this.getDirection(),\n            n = this.a.cross(d).normalize();\n        if (ref !== undefined && m.sub(ref).dot(n) < 0) {\n            n.invert();\n        }\n        n.normalizeTo(offset);\n        this.a.addSelf(n);\n        this.b.addSelf(n);\n        d.scaleSelf(scale);\n        this.a.subSelf(d);\n        this.b.addSelf(d);\n        return this;\n    },\n\n    set: function(vec_a, vec_b) {\n        this.a = vec_a;\n        this.b = vec_b;\n        return this;\n    },\n\n    splitIntoSegments: function(segments,stepLength, addFirst) {\n        return Line3D.splitIntoSegments(this.a, this.b, stepLength, segments, addFirst);\n    },\n\n    toRay3D: function(){\n        return new Ray3D( this.a.copy(), this.getDirection() );\n    },\n\n    toString: function() {\n        return this.a.toString() + \" -> \" + this.b.toString();\n    }\n};\n\n/**\n    * Splits the line between A and B into segments of the given length,\n    * starting at point A. The tweened points are added to the given result\n    * list. The last point added is B itself and hence it is likely that the\n    * last segment has a shorter length than the step length requested. The\n    * first point (A) can be omitted and not be added to the list if so\n    * desired.\n    *\n    * @param a\n    *            start point\n    * @param b\n    *            end point (always added to results)\n    * @param stepLength\n    *            desired distance between points\n    * @param segments\n    *            existing array list for results (or a new list, if null)\n    * @param addFirst\n    *            false, if A is NOT to be added to results\n    * @return list of result vectors\n    */\nLine3D.splitIntoSegments = function(vec_a, vec_b, stepLength, segments, addFirst) {\n    if (segments === undefined) {\n        segments = [];\n    }\n    if (addFirst) {\n        segments.push(vec_a.copy());\n    }\n    var dist = vec_a.distanceTo(vec_b);\n    if (dist > stepLength) {\n        var pos = vec_a.copy();\n        var step = vec_b.sub(vec_a).limit(stepLength);\n        while (dist > stepLength) {\n            pos.addSelf(step);\n            segments.push(pos.copy());\n            dist -= stepLength;\n        }\n    }\n    segments.push(vec_b.copy());\n    return segments;\n};\n\n\nLine3D.LineIntersection = function(type,line,mua,mub){\n    this.type = type;\n    if(mua === undefined){ mua = 0; }\n    if(mub === undefined){ mub = 0; }\n    this.line = line;\n    this.coeff = [mua,mub];\n};\n\nLine3D.LineIntersection.prototype = {\n\n    getCoefficient: function(){\n        return this.coeff;\n    },\n\n    getLength: function(){\n        if(this.line === undefined){ return undefined; }\n        return this.line.getLength();\n    },\n\n    getLine: function(){\n        if(this.line === undefined){ return undefined; }\n        return this.line.copy();\n    },\n\n    getType: function(){\n        return this.type;\n    },\n\n    isIntersectionInside: function(){\n        return this.type == Line3D.LineIntersection.Type.INTERSECTING && this.coeff[0] >= 0 && this.coeff[0] <= 1 && this.coeff[1] >=0 && this.coeff[1] <= 1;\n    },\n\n    toString: function(){\n        return \"type: \"+this.type+ \" line: \"+this.line;\n    }\n};\n\nLine3D.LineIntersection.Type = {\n    NON_INTERSECTING: 0,\n    INTERSECTING: 1\n};\n\nmodule.exports = Line3D;\n\n\n"]},"metadata":{},"sourceType":"script"}