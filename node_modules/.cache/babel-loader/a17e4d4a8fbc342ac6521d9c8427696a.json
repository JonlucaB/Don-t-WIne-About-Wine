{"ast":null,"code":"/**\n @class CircleIntersector\n @member toxi\n */\nvar CircleIntersector = function (circle) {\n  this.circle = circle;\n  this.isec = undefined;\n};\n\nCircleIntersector.prototype = {\n  getIntersectionData: function () {\n    return this.isec;\n  },\n  intersectsRay: function (ray) {\n    this.isec.clear();\n    var q = circle.sub(ray),\n        distSquared = q.magSquared(),\n        v = q.dot(ray.getDirection()),\n        r = circle.getRadius(),\n        d = r * r - (distSquared - v * v);\n\n    if (d >= 0.0) {\n      this.isec.isIntersection = true;\n      this.isec.dist = v - Math.sqrt(d);\n      this.isec.pos = ray.getPointAtDistance(isec.dist);\n      this.isec.normal = this.isec.pos.sub(this.circle).normalize();\n    }\n\n    return this.isec.isIntersection;\n  }\n};\nmodule.exports = CircleIntersector;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/geom/CircleIntersector.js"],"names":["CircleIntersector","circle","isec","undefined","prototype","getIntersectionData","intersectsRay","ray","clear","q","sub","distSquared","magSquared","v","dot","getDirection","r","getRadius","d","isIntersection","dist","Math","sqrt","pos","getPointAtDistance","normal","normalize","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA,IAAIA,iBAAiB,GAAG,UAASC,MAAT,EAAiB;AACrC,OAAKA,MAAL,GAAcA,MAAd;AACA,OAAKC,IAAL,GAAYC,SAAZ;AACH,CAHD;;AAKAH,iBAAiB,CAACI,SAAlB,GAA8B;AAE1BC,EAAAA,mBAAmB,EAAE,YAAW;AAC5B,WAAO,KAAKH,IAAZ;AACH,GAJyB;AAM1BI,EAAAA,aAAa,EAAE,UAASC,GAAT,EAAc;AACzB,SAAKL,IAAL,CAAUM,KAAV;AACA,QAAIC,CAAC,GAAGR,MAAM,CAACS,GAAP,CAAWH,GAAX,CAAR;AAAA,QACAI,WAAW,GAAGF,CAAC,CAACG,UAAF,EADd;AAAA,QAEAC,CAAC,GAAGJ,CAAC,CAACK,GAAF,CAAMP,GAAG,CAACQ,YAAJ,EAAN,CAFJ;AAAA,QAGAC,CAAC,GAAGf,MAAM,CAACgB,SAAP,EAHJ;AAAA,QAIAC,CAAC,GAAGF,CAAC,GAAGA,CAAJ,IAASL,WAAW,GAAGE,CAAC,GAAGA,CAA3B,CAJJ;;AAKA,QAAIK,CAAC,IAAI,GAAT,EAAc;AACV,WAAKhB,IAAL,CAAUiB,cAAV,GAA2B,IAA3B;AACA,WAAKjB,IAAL,CAAUkB,IAAV,GAAiBP,CAAC,GAAEQ,IAAI,CAACC,IAAL,CAAUJ,CAAV,CAApB;AACA,WAAKhB,IAAL,CAAUqB,GAAV,GAAgBhB,GAAG,CAACiB,kBAAJ,CAAuBtB,IAAI,CAACkB,IAA5B,CAAhB;AACA,WAAKlB,IAAL,CAAUuB,MAAV,GAAmB,KAAKvB,IAAL,CAAUqB,GAAV,CAAcb,GAAd,CAAkB,KAAKT,MAAvB,EAA+ByB,SAA/B,EAAnB;AACH;;AACD,WAAO,KAAKxB,IAAL,CAAUiB,cAAjB;AACH;AApByB,CAA9B;AAuBAQ,MAAM,CAACC,OAAP,GAAiB5B,iBAAjB","sourcesContent":["\n/**\n @class CircleIntersector\n @member toxi\n */\nvar CircleIntersector = function(circle) {\n    this.circle = circle;\n    this.isec = undefined;\n};\n\nCircleIntersector.prototype = {\n\n    getIntersectionData: function() {\n        return this.isec;\n    },\n\n    intersectsRay: function(ray) {\n        this.isec.clear();\n        var q = circle.sub(ray),\n        distSquared = q.magSquared(),\n        v = q.dot(ray.getDirection()),\n        r = circle.getRadius(),\n        d = r * r - (distSquared - v * v);\n        if (d >= 0.0) {\n            this.isec.isIntersection = true;\n            this.isec.dist = v -Math.sqrt(d);\n            this.isec.pos = ray.getPointAtDistance(isec.dist);\n            this.isec.normal = this.isec.pos.sub(this.circle).normalize();\n        }\n        return this.isec.isIntersection;\n    }\n};\n\nmodule.exports = CircleIntersector;\n\n"]},"metadata":{},"sourceType":"script"}