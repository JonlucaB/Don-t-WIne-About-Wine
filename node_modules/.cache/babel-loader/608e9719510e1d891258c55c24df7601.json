{"ast":null,"code":"var Vec2D = require('../../geom/Vec2D'); //either Vec2D + angle\n\n/**\n * @param {Vec2D | Number} vector | angle\n * @param {Number} [theta]\n */\n\n\nvar AngularConstraint = function (theta_p, theta) {\n  if (arguments.length > 1) {\n    this.theta = theta;\n    this.rootPos = new Vec2D(theta_p);\n  } else {\n    this.rootPos = new Vec2D();\n    this.theta = theta_p;\n  } //due to lack-of int/float types, no support of theta in degrees\n\n};\n\nAngularConstraint.prototype.applyConstraint = function (p) {\n  var delta = p.sub(this.rootPos);\n  var heading = Math.floor(delta.heading() / this.theta) * this.theta;\n  p.set(this.rootPos.add(Vec2D.fromTheta(heading).scaleSelf(delta.magnitude())));\n};\n\nmodule.exports = AngularConstraint;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/physics2d/constraints/AngularConstraint.js"],"names":["Vec2D","require","AngularConstraint","theta_p","theta","arguments","length","rootPos","prototype","applyConstraint","p","delta","sub","heading","Math","floor","set","add","fromTheta","scaleSelf","magnitude","module","exports"],"mappings":"AAEI,IAAIA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAAnB,C,CAEA;;AACA;AACJ;AACA;AACA;;;AACI,IAAIC,iBAAiB,GAAG,UAASC,OAAT,EAAiBC,KAAjB,EAAuB;AAC3C,MAAGC,SAAS,CAACC,MAAV,GAAmB,CAAtB,EAAwB;AACpB,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKG,OAAL,GAAe,IAAIP,KAAJ,CAAUG,OAAV,CAAf;AACH,GAHD,MAGO;AACH,SAAKI,OAAL,GAAe,IAAIP,KAAJ,EAAf;AACA,SAAKI,KAAL,GAAaD,OAAb;AACH,GAP0C,CAQ3C;;AACH,CATD;;AAYAD,iBAAiB,CAACM,SAAlB,CAA4BC,eAA5B,GAA8C,UAASC,CAAT,EAAW;AACrD,MAAIC,KAAK,GAAGD,CAAC,CAACE,GAAF,CAAM,KAAKL,OAAX,CAAZ;AACA,MAAIM,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACE,OAAN,KAAkB,KAAKT,KAAlC,IAA2C,KAAKA,KAA9D;AACAM,EAAAA,CAAC,CAACM,GAAF,CAAM,KAAKT,OAAL,CAAaU,GAAb,CAAiBjB,KAAK,CAACkB,SAAN,CAAgBL,OAAhB,EAAyBM,SAAzB,CAAmCR,KAAK,CAACS,SAAN,EAAnC,CAAjB,CAAN;AACH,CAJD;;AAMAC,MAAM,CAACC,OAAP,GAAiBpB,iBAAjB","sourcesContent":["\n\n    var Vec2D = require('../../geom/Vec2D');\n\n    //either Vec2D + angle\n    /**\n     * @param {Vec2D | Number} vector | angle\n     * @param {Number} [theta]\n     */\n    var\tAngularConstraint = function(theta_p,theta){\n        if(arguments.length > 1){\n            this.theta = theta;\n            this.rootPos = new Vec2D(theta_p);\n        } else {\n            this.rootPos = new Vec2D();\n            this.theta = theta_p;\n        }\n        //due to lack-of int/float types, no support of theta in degrees\n    };\n\n\n    AngularConstraint.prototype.applyConstraint = function(p){\n        var delta = p.sub(this.rootPos);\n        var heading = Math.floor(delta.heading() / this.theta) * this.theta;\n        p.set(this.rootPos.add(Vec2D.fromTheta(heading).scaleSelf(delta.magnitude())));\n    };\n\n    module.exports = AngularConstraint;\n\n"]},"metadata":{},"sourceType":"script"}