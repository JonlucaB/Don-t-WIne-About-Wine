{"ast":null,"code":"var Vec2D = require('./Vec2D'),\n    Line2D = require('./Line2D'),\n    Rect = require('./Rect'),\n    Circle = require('./Circle'),\n    Polygon2D = require('./Polygon2D'),\n    mathUtils = require('../math/mathUtils');\n/**\n * @class\n * @member toxi\n * @param {toxi.Vec2D} a\n * @param {toxi.Vec2D} b\n * @param {toxi.Vec2D} c\n */\n\n\nvar Triangle2D = function (_a, _b, _c) {\n  if (arguments.length === 3) {\n    this.a = _a.copy();\n    this.b = _b.copy();\n    this.c = _c.copy();\n  }\n};\n\nTriangle2D.createEquilateralFrom = function (a, b) {\n  var c = a.interpolateTo(b, 0.5),\n      dir = a.sub(b),\n      n = dir.getPerpendicular();\n  c.addSelf(n.normalizeTo(dir.magnitude() * mathUtils.SQRT3 / 2));\n  return new Triangle2D(a, b, c);\n};\n\nTriangle2D.isClockwise = function (a, b, c) {\n  var determ = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);\n  return determ < 0.0;\n};\n\nTriangle2D.prototype = {\n  adjustTriangleSizeBy: function (offAB, offBC, offCA) {\n    if (arguments.length == 1) {\n      offBC = offAB;\n      offCA = offAB;\n    }\n\n    this.computeCentroid();\n    var ab = new Line2D(this.a.copy(), this.b.copy()).offsetAndGrowBy(offAB, 100000, this.centroid);\n    var bc = new Line2D(this.b.copy(), this.c.copy()).offsetAndGrowBy(offBC, 100000, this.centroid);\n    var ca = new Line2D(this.c.copy(), this.a.copy()).offsetAndGrowBy(offCA, 100000, this.centroid);\n    this.a = ab.intersectLine(ca).getPos();\n    this.b = ab.intersectLine(bc).getPos();\n    this.c = bc.intersectLine(ca).getPos();\n    this.computeCentroid();\n    return this;\n  },\n  computeCentroid: function () {\n    this.centroid = this.a.add(this.b).addSelf(this.c).scaleSelf(1 / 3);\n    return this.centroid;\n  },\n\n  /**\n      * Checks if point vector is inside the triangle created by the points a, b\n      * and c. These points will create a plane and the point checked will have\n      * to be on this plane in the region between a,b,c.\n      * \n      * Note: The triangle must be defined in clockwise order a,b,c\n      * \n      * @return true, if point is in triangle.\n      */\n  containsPoint: function (_p) {\n    var v1 = _p.sub(this.a).normalize(),\n        v2 = _p.sub(this.b).normalize(),\n        v3 = _p.sub(this.c).normalize(),\n        totalAngles = Math.acos(v1.dot(v2));\n\n    totalAngles += Math.acos(v2.dot(v3));\n    totalAngles += Math.acos(v3.dot(v1));\n    return mathUtils.abs(totalAngles - mathUtils.TWO_PI) <= 0.01;\n  },\n  copy: function () {\n    return new Triangle2D(this.a.copy(), this.b.copy(), this.c.copy());\n  },\n  flipVertexOrder: function () {\n    var t = this.a;\n    this.a = this.c;\n    this.c = t;\n    return this;\n  },\n  getArea: function () {\n    return this.b.sub(this.a).cross(this.c.sub(this.a)) * 0.5;\n  },\n  getBounds: function () {\n    return new Rect(Vec2D.min(Vec2D.min(this.a, this.b), this.c), Vec2D.max(Vec2D.max(this.a, this.b), this.c));\n  },\n  getCircumCircle: function () {\n    var cr = this.a.bisect(this.b).cross(this.b.bisect(this.c)),\n        circa = new Vec2D(cr.x / cr.z, cr.y / cr.z),\n        sa = this.a.distanceTo(this.b),\n        sb = this.b.distanceTo(this.c),\n        sc = this.c.distanceTo(this.a);\n    var radius = sa * sb * sc / Math.sqrt((sa + sb + sc) * (-sa + sb + sc) * (sa - sb + sc) * (sa + sb - sc));\n    return new Circle(circa, radius);\n  },\n  getCircumference: function () {\n    return this.a.distanceTo(this.b) + this.b.distanceTo(this.c) + this.c.distanceTo(this.a);\n  },\n  getClosestPointTo: function (_p) {\n    var edge = new Line2D(this.a, this.b),\n        Rab = edge.closestPointTo(_p),\n        Rbc = edge.set(this.b, this.c).closestPointTo(_p),\n        Rca = edge.set(this.c, this.a).closestPointTo(_p),\n        dAB = _p.sub(Rab).magSquared(),\n        dBC = _p.sub(Rbc).magSquared(),\n        dCA = _p.sub(Rca).magSquared(),\n        min = dAB,\n        result = Rab;\n\n    if (dBC < min) {\n      min = dBC;\n      result = Rbc;\n    }\n\n    if (dCA < min) {\n      result = Rca;\n    }\n\n    return result;\n  },\n  intersectsTriangle: function (tri) {\n    if (this.containsPoint(tri.a) || this.containsPoint(tri.b) || this.containsPoint(tri.c)) {\n      return true;\n    }\n\n    if (tri.containsPoint(this.a) || tri.containsPoint(this.b) || tri.containsPoint(this.c)) {\n      return true;\n    }\n\n    var ea = [new Line2D(this.a, this.b), new Line2D(this.b, this.c), new Line2D(this.c, this.a)];\n    var eb = [new Line2D(tri.a, tri.b), new Line2D(tri.b, tri.c), new Line2D(tri.c, tri.a)];\n\n    for (var i = 0, eaLen = ea.length; i < eaLen; i++) {\n      var la = ea[i];\n\n      for (var j = 0, ebLen = eb.length; j < ebLen; j++) {\n        var lb = eb[j];\n        var type = la.intersectLine(lb).getType();\n\n        if (type != Line2D.LineIntersection.Type.NON_INTERSECTING && type != Line2D.LineIntersection.Type.PARALLEL) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n  isClockwise: function () {\n    return Triangle2D.isClockwise(this.a, this.b, this.c);\n  },\n  set: function (a2, b2, c2) {\n    this.a = a2;\n    this.b = b2;\n    this.c = c2;\n  },\n  toPolygon2D: function () {\n    var poly = new Polygon2D();\n    poly.add(this.a.copy());\n    poly.add(this.b.copy());\n    poly.add(this.c.copy());\n    return poly;\n  },\n  toString: function () {\n    return \"Triangle2D: \" + this.a + \",\" + this.b + \",\" + this.c;\n  }\n};\nmodule.exports = Triangle2D;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/Triangle2D.js"],"names":["Vec2D","require","Line2D","Rect","Circle","Polygon2D","mathUtils","Triangle2D","_a","_b","_c","arguments","length","a","copy","b","c","createEquilateralFrom","interpolateTo","dir","sub","n","getPerpendicular","addSelf","normalizeTo","magnitude","SQRT3","isClockwise","determ","x","y","prototype","adjustTriangleSizeBy","offAB","offBC","offCA","computeCentroid","ab","offsetAndGrowBy","centroid","bc","ca","intersectLine","getPos","add","scaleSelf","containsPoint","_p","v1","normalize","v2","v3","totalAngles","Math","acos","dot","abs","TWO_PI","flipVertexOrder","t","getArea","cross","getBounds","min","max","getCircumCircle","cr","bisect","circa","z","sa","distanceTo","sb","sc","radius","sqrt","getCircumference","getClosestPointTo","edge","Rab","closestPointTo","Rbc","set","Rca","dAB","magSquared","dBC","dCA","result","intersectsTriangle","tri","ea","eb","i","eaLen","la","j","ebLen","lb","type","getType","LineIntersection","Type","NON_INTERSECTING","PARALLEL","a2","b2","c2","toPolygon2D","poly","toString","module","exports"],"mappings":"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","sourcesContent":["\n\nvar Vec2D = require('./Vec2D'),\n\tLine2D = require('./Line2D'),\n\tRect = require('./Rect'),\n\tCircle = require('./Circle'),\n\tPolygon2D = require('./Polygon2D'),\n\tmathUtils = require('../math/mathUtils');\n\n/**\n * @class\n * @member toxi\n * @param {toxi.Vec2D} a\n * @param {toxi.Vec2D} b\n * @param {toxi.Vec2D} c\n */\nvar\tTriangle2D = function(_a,_b,_c){\n\tif(arguments.length === 3){\n\t\tthis.a = _a.copy();\n\t\tthis.b = _b.copy();\n\t\tthis.c = _c.copy();\n\t}\n};\n\nTriangle2D.createEquilateralFrom = function(a,b){\n\tvar c = a.interpolateTo(b,0.5),\n\t\tdir = a.sub(b),\n\t\tn = dir.getPerpendicular();\n\t\tc.addSelf(n.normalizeTo(dir.magnitude() * mathUtils.SQRT3 / 2));\n\t\treturn new Triangle2D(a,b,c);\n};\n\nTriangle2D.isClockwise = function(a,b,c){\n\tvar determ = (b.x-a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);\n\treturn (determ < 0.0);\n};\n\n\nTriangle2D.prototype = {\n\tadjustTriangleSizeBy: function(offAB,offBC,offCA){\n\t\tif(arguments.length == 1){\n\t\t\toffBC = offAB;\n\t\t\toffCA = offAB;\n\t\t}\n\t\tthis.computeCentroid();\n\t\tvar ab = new Line2D(this.a.copy(),this.b.copy()).offsetAndGrowBy(offAB,100000,this.centroid);\n\t\tvar bc = new Line2D(this.b.copy(),this.c.copy()).offsetAndGrowBy(offBC,100000,this.centroid);\n\t\tvar ca = new Line2D(this.c.copy(),this.a.copy()).offsetAndGrowBy(offCA,100000,this.centroid);\n\t\t\n\t\tthis.a = ab.intersectLine(ca).getPos();\n\t\tthis.b = ab.intersectLine(bc).getPos();\n\t\tthis.c = bc.intersectLine(ca).getPos();\n\t\tthis.computeCentroid();\n\t\treturn this;\n\t},\n\t\n\tcomputeCentroid: function(){\n\t\tthis.centroid = this.a.add(this.b).addSelf(this.c).scaleSelf(1/3);\n\t\treturn this.centroid;\n\t},\n\t/**\n     * Checks if point vector is inside the triangle created by the points a, b\n     * and c. These points will create a plane and the point checked will have\n     * to be on this plane in the region between a,b,c.\n     * \n     * Note: The triangle must be defined in clockwise order a,b,c\n     * \n     * @return true, if point is in triangle.\n     */\n     containsPoint: function(_p){\n\t\tvar v1 = _p.sub(this.a).normalize(),\n\t\t\tv2 = _p.sub(this.b).normalize(),\n\t\t\tv3 = _p.sub(this.c).normalize(),\n\t\t\ttotalAngles = Math.acos(v1.dot(v2));\n\t\t\ttotalAngles += Math.acos(v2.dot(v3));\n\t\t\ttotalAngles += Math.acos(v3.dot(v1));\n\t\t\treturn (mathUtils.abs(totalAngles- mathUtils.TWO_PI) <= 0.01);\n     },\n     \n     copy: function(){\n\t\treturn new Triangle2D(this.a.copy(),this.b.copy(),this.c.copy());\n     },\n     \n     flipVertexOrder: function(){\n\t\tvar t = this.a;\n\t\tthis.a = this.c;\n\t\tthis.c = t;\n\t\treturn this;\n     },\n     \n     getArea: function(){\n\t\treturn this.b.sub(this.a).cross(this.c.sub(this.a)) * 0.5;\n     },\n     \n     getBounds: function(){\n\t\treturn new Rect(Vec2D.min(Vec2D.min(this.a,this.b),this.c),Vec2D.max(Vec2D.max(this.a,this.b),this.c));\n     },\n     \n     getCircumCircle: function(){\n\t\tvar cr = this.a.bisect(this.b).cross(this.b.bisect(this.c)),\n\t\t\tcirca = new Vec2D(cr.x/cr.z, cr.y / cr.z),\n\t\t\tsa = this.a.distanceTo(this.b),\n\t\t\tsb = this.b.distanceTo(this.c),\n\t\t\tsc = this.c.distanceTo(this.a);\n\t\tvar radius = sa * sb * sc / Math.sqrt((sa+sb+sc) * (-sa+sb+sc)*(sa-sb+sc)*(sa+sb-sc));\n\t\treturn new Circle(circa,radius);\n     },\n     \n     getCircumference: function(){\n\t\treturn this.a.distanceTo(this.b) + this.b.distanceTo(this.c) + this.c.distanceTo(this.a);\n     },\n     \n     getClosestPointTo: function(_p){\n\t\tvar edge = new Line2D(this.a,this.b),\n\t\t\tRab = edge.closestPointTo(_p),\n\t\t\tRbc = edge.set(this.b,this.c).closestPointTo(_p),\n\t\t\tRca = edge.set(this.c,this.a).closestPointTo(_p),\n\t\t\tdAB = _p.sub(Rab).magSquared(),\n\t\t\tdBC = _p.sub(Rbc).magSquared(),\n\t\t\tdCA = _p.sub(Rca).magSquared(),\n\t\t\tmin = dAB,\n\t\t\tresult = Rab;\n\n\t\tif(dBC < min){\n\t\t\tmin = dBC;\n\t\t\tresult = Rbc;\n\t\t}\n\t\tif(dCA < min){\n\t\t\tresult = Rca;\n\t\t}\n\t\treturn result;\n\t},\n     \n\tintersectsTriangle: function(tri){\n\t\tif(this.containsPoint(tri.a) || this.containsPoint(tri.b) || this.containsPoint(tri.c)){\n\t\t\treturn true;\n\t\t}\n\t\tif(tri.containsPoint(this.a) || tri.containsPoint(this.b) || tri.containsPoint(this.c)){\n\t\t\treturn true;\n\t\t}\n\t\tvar ea = [\n\t\t\tnew Line2D(this.a,this.b),\n\t\t\tnew Line2D(this.b,this.c),\n\t\t\tnew Line2D(this.c,this.a)\n\t\t];\n\t\tvar eb = [\n\t\t\tnew Line2D(tri.a,tri.b),\n\t\t\tnew Line2D(tri.b,tri.c),\n\t\t\tnew Line2D(tri.c,tri.a)\n\t\t];\n\t\tfor(var i=0,eaLen = ea.length;i<eaLen;i++){\n\t\t\tvar la = ea[i];\n\t\t\tfor(var j=0,ebLen = eb.length;j<ebLen;j++){\n\t\t\t\tvar lb = eb[j];\n\t\t\t\tvar type = la.intersectLine(lb).getType();\n\t\t\t\tif(type != Line2D.LineIntersection.Type.NON_INTERSECTING && type != Line2D.LineIntersection.Type.PARALLEL){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\t\n\tisClockwise: function(){\n\t\treturn Triangle2D.isClockwise(this.a,this.b,this.c);\n\t},\n\t\n\tset: function(a2,b2,c2){\n\t\tthis.a = a2;\n\t\tthis.b = b2;\n\t\tthis.c = c2;\n\t},\n\t\n\ttoPolygon2D: function(){\n\t\tvar poly = new Polygon2D();\n\t\tpoly.add(this.a.copy());\n\t\tpoly.add(this.b.copy());\n\t\tpoly.add(this.c.copy());\n\t\treturn poly;\n\t},\n\t\n\ttoString: function(){\n\t\treturn \"Triangle2D: \"+this.a+ \",\"+this.b+\",\"+this.c;\n\t}\n\n};\n\nmodule.exports = Triangle2D;\n\n"]},"metadata":{},"sourceType":"script"}