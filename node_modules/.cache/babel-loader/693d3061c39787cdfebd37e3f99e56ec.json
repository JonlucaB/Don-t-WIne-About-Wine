{"ast":null,"code":"var VerletParticle2D = require('./VerletParticle2D'),\n    VerletSpring2D = require('./VerletSpring2D');\n/**\n* Utility builder/grouping/management class to connect a set of particles into\n* a physical string/thread. Custom spring types can be used by subclassing this\n* class and overwriting the\n* {@link #createSpring(VerletParticle2D, VerletParticle2D, float, float)}\nmethod.\n*/\n\n/**\n Construct a ParticleString2D,\n parameter options:\n 1 - options object\n 3 - VerletPhysics2D physics, Array<VerletParticle2D> plist, Number strength\n 6 - VerletPhysics2D physic, Vec2D pos, Vec2D step, Number num, Number mass, Number strength\n */\n\n\nvar ParticleString2D = function () {\n  var opts = {\n    physics: undefined,\n    plist: undefined,\n    pos: undefined,\n    step: undefined,\n    num: undefined,\n    mass: undefined,\n    strength: undefined\n  },\n      is6ParamConstructor = false;\n\n  if (arguments.length === 0) {\n    throw new Error(\"Incorrect Parameters\");\n  } else if (arguments.length == 1) {\n    //options object\n    var arg = arguments[0];\n\n    for (var prop in arg) {\n      opts[prop] = arg[prop];\n    }\n  } else {\n    opts.physics = arguments[0];\n\n    if (arguments.length == 6) {\n      opts.pos = arguments[1];\n      opts.step = arguments[2];\n      opts.num = arguments[3];\n      opts.mass = arguments[4];\n      opts.strength = arguments[5];\n    } else {\n      opts.plist = arguments[1];\n      opts.strength = arguments[2];\n    }\n  }\n\n  if (opts.num !== undefined && opts.pos !== undefined && opts.step !== undefined && opts.mass !== undefined) {\n    is6ParamConstructor = true;\n  }\n\n  if (!is6ParamConstructor && opts.plist === undefined) {\n    throw new Error(\"Incorrect Parameters, please supply plist or num, pos, step & mass\");\n  }\n\n  this.physics = opts.physics;\n  this.links = [];\n  var prev,\n      p,\n      s,\n      strength,\n      i = 0;\n\n  if (is6ParamConstructor) {\n    var pos = opts.pos.copy(),\n        step = opts.step,\n        mass = opts.mass,\n        len = step.magnitude();\n    this.particles = [];\n    strength = opts.strength;\n\n    for (i = 0; i < opts.num; i++) {\n      p = new VerletParticle2D(pos.copy(), mass);\n      this.particles.push(p);\n      this.physics.particles.push(p);\n\n      if (prev !== undefined) {\n        s = this.createSpring(prev, p, len, strength);\n        this.links.push(s);\n        this.physics.addSpring(s);\n      }\n\n      prev = p;\n      pos.addSelf(step);\n    }\n  } else {\n    strength = opts.strength;\n    this.particles = opts.plist || [];\n\n    for (i = 0; i < this.particles.length; i++) {\n      p = this.particles[i];\n      this.physics.addParticle(p);\n\n      if (prev !== undefined) {\n        s = this.createSpring(prev, p, prev.distanceTo(p), strength);\n        this.links.push(s);\n        this.physics.addSpring(s);\n      }\n\n      prev = p;\n    }\n  }\n};\n\nParticleString2D.prototype = {\n  clear: function () {\n    for (var i = 0, len = this.links.length; i < len; i++) {\n      this.physics.removeSpringElements(this.links[i]);\n    }\n\n    this.particles = [];\n    this.links = [];\n  },\n  createSpring: function (a, b, len, strength) {\n    return new VerletSpring2D(a, b, len, strength);\n  },\n  getHead: function () {\n    return this.particles[0];\n  },\n  getNumParticles: function () {\n    return this.particles.length;\n  },\n  getTail: function () {\n    return this.particles[this.particles.length - 1];\n  }\n};\nmodule.exports = ParticleString2D;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/physics2d/ParticleString2D.js"],"names":["VerletParticle2D","require","VerletSpring2D","ParticleString2D","opts","physics","undefined","plist","pos","step","num","mass","strength","is6ParamConstructor","arguments","length","Error","arg","prop","links","prev","p","s","i","copy","len","magnitude","particles","push","createSpring","addSpring","addSelf","addParticle","distanceTo","prototype","clear","removeSpringElements","a","b","getHead","getNumParticles","getTail","module","exports"],"mappings":"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","sourcesContent":["\n\nvar VerletParticle2D = require('./VerletParticle2D'),\n\tVerletSpring2D = require('./VerletSpring2D');\n\n/**\n* Utility builder/grouping/management class to connect a set of particles into\n* a physical string/thread. Custom spring types can be used by subclassing this\n* class and overwriting the\n* {@link #createSpring(VerletParticle2D, VerletParticle2D, float, float)}\nmethod.\n*/\n\n /**\n  Construct a ParticleString2D,\n  parameter options:\n  1 - options object\n  3 - VerletPhysics2D physics, Array<VerletParticle2D> plist, Number strength\n  6 - VerletPhysics2D physic, Vec2D pos, Vec2D step, Number num, Number mass, Number strength\n  */\n  \nvar\tParticleString2D = function(){\n\tvar opts = {\n\t\tphysics: undefined,\n\t\tplist: undefined,\n\t\tpos: undefined,\n\t\tstep: undefined,\n\t\tnum: undefined,\n\t\tmass: undefined,\n\t\tstrength: undefined\n\t},\n\tis6ParamConstructor = false;\n\tif(arguments.length === 0){\n\t\tthrow new Error(\"Incorrect Parameters\");\n\t} else if(arguments.length == 1){ //options object\n\t\tvar arg = arguments[0];\n\t\tfor(var prop in arg){\n\t\t\topts[prop] = arg[prop];\n\t\t}\n\t} else {\n\t\topts.physics = arguments[0];\n\t\tif(arguments.length == 6){\n\t\t\topts.pos = arguments[1];\n\t\t\topts.step = arguments[2];\n\t\t\topts.num = arguments[3];\n\t\t\topts.mass = arguments[4];\n\t\t\topts.strength = arguments[5];\n\t\t} else {\n\t\t\topts.plist = arguments[1];\n\t\t\topts.strength = arguments[2];\n\t\t}\n\t}\n\tif(opts.num !== undefined && opts.pos !== undefined && opts.step !== undefined && opts.mass !== undefined){\n\t\tis6ParamConstructor = true;\n\t}\n\tif(!is6ParamConstructor && opts.plist === undefined){\n\t\tthrow new Error(\"Incorrect Parameters, please supply plist or num, pos, step & mass\");\n\t}\n\t\n\t\n\tthis.physics = opts.physics;\n\tthis.links = [];\n\t\n\tvar prev,\n\t\tp,\n\t\ts,\n\t\tstrength,\n\t\ti = 0;\n\t\n\t\n\tif(is6ParamConstructor){\n\t\tvar pos = opts.pos.copy(),\n\t\t\tstep = opts.step,\n\t\t\tmass = opts.mass,\n\t\t\tlen = step.magnitude();\n\t\tthis.particles = [];\n\t\tstrength = opts.strength;\n\t\t\n\t\tfor(i = 0; i < opts.num; i++){\n\t\t\tp = new VerletParticle2D(pos.copy(),mass);\n\t\t\tthis.particles.push(p);\n\t\t\tthis.physics.particles.push(p);\n\t\t\tif(prev !== undefined){\n\t\t\t\ts = this.createSpring(prev,p,len,strength);\n\t\t\t\tthis.links.push(s);\n\t\t\t\tthis.physics.addSpring(s);\n\t\t\t}\n\t\t\tprev = p;\n\t\t\tpos.addSelf(step);\n\t\t}\n\t} else {\n\t\tstrength = opts.strength;\n\t\tthis.particles = opts.plist || [];\n\n\t\t\n\t\tfor(i = 0; i < this.particles.length; i++){\n\t\t\tp = this.particles[i];\n\t\t\tthis.physics.addParticle(p);\n\t\t\tif(prev !== undefined){\n\t\t\t\ts = this.createSpring(prev,p,prev.distanceTo(p),strength);\n\t\t\t\tthis.links.push(s);\n\t\t\t\tthis.physics.addSpring(s);\t\n\t\t\t}\n\t\t\tprev = p;\n\t\t}\n\t}\n }; \nParticleString2D.prototype = {\n\tclear: function(){\n\t\tfor(var i = 0, len = this.links.length; i < len; i++){\n\t\t\tthis.physics.removeSpringElements(this.links[i]);\n\t\t}\n\t\tthis.particles = [];\n\t\tthis.links = [];\n\t},\n\tcreateSpring: function(a,b,len,strength){\n\t\treturn new VerletSpring2D(a,b,len,strength);\n\t},\n\t\n\tgetHead: function(){\n\t\treturn this.particles[0];\n\t},\n\t\n\tgetNumParticles: function(){\n\t\treturn this.particles.length;\n\t},\n\t\n\tgetTail: function(){\n\t\treturn this.particles[this.particles.length-1];\n\t}\n};\n\nmodule.exports = ParticleString2D;\n\n"]},"metadata":{},"sourceType":"script"}