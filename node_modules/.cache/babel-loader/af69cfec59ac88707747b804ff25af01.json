{"ast":null,"code":"/*global THREE*/\nvar is = require('../internals/is');\n/**\n * @author Kyle Phillips  / haptic-data.com\n * a bridge between Toxiclibs.js and Three.js\n *\n * Three.js does type-checking to ensure that vectors, vertices and faces are of THREE's types\n * this helps to do that conversion process.\n */\n\n\nvar ToxiclibsSupport = function (scene) {\n  if (THREE === undefined) {\n    throw new Error(\"THREE.js has not been loaded\");\n  }\n\n  this.scene = scene;\n  this.objectDictionary = {};\n};\n\nToxiclibsSupport.createLineGeometry = function (line3d, geometry) {\n  return ToxiclibsSupport.createMeshGeometry({\n    vertices: [line3d.a, line3d.b]\n  }, geometry);\n};\n/**\n * create a THREE.Geometry with matching vertices to your triangleMesh\n * @param {toxi.geom.mesh.TriangleMesh} triangleMesh the toxiclibs.js triangle mesh to convert\n * @param {THREE.Geometry} [geometry] optional geometry to pass in if you would prefer to update\n * a geometry instead of create a new one\n * @returns {THREE.Geometry}\n */\n\n\nToxiclibsSupport.createMeshGeometry = function createMeshGeometry(obj, geometry) {\n  geometry = geometry || new THREE.Geometry(); //create a map where the unique id of the Vertex\n  //references the index in the array\n\n  var idIndexMap = {};\n  var v, i, f, len, vertices; //add all vertices\n\n  vertices = is.Array(obj) ? obj : obj.vertices;\n  len = vertices.length;\n\n  if (!vertices) {\n    throw new Error('no vertices found');\n  }\n\n  for (i = 0; i < len; i++) {\n    v = vertices[i];\n    geometry.vertices[i] = new THREE.Vector3(v.x, v.y, v.z);\n    idIndexMap[v.id] = i;\n  }\n\n  if (obj.faces) {\n    len = obj.faces.length;\n\n    for (i = 0; i < len; i++) {\n      f = obj.faces[i]; //normal.y *= -1;\n      //unlike toxiclibs, a face in three.js are indices related to the vertices array\n\n      geometry.faces[i] = new THREE.Face3(idIndexMap[f.a.id], idIndexMap[f.b.id], idIndexMap[f.c.id], new THREE.Vector3(f.normal.x, f.normal.y, f.normal.z));\n    }\n  }\n\n  geometry.computeCentroids();\n  geometry.computeVertexNormals();\n  return geometry;\n};\n\nToxiclibsSupport.createMesh = function (triangleMesh, material) {\n  if (material === undefined) {\n    material = new THREE.MeshBasicMaterial();\n  }\n\n  var geometry = ToxiclibsSupport.createMeshGeometry(triangleMesh);\n  return new THREE.Mesh(geometry, material);\n};\n\nToxiclibsSupport.createParticle = function (position, materials) {\n  var particle = new THREE.Particle(materials);\n  particle.position.x = position.x;\n  particle.position.y = position.y;\n  particle.position.z = position.z;\n  return particle;\n};\n\nToxiclibsSupport.prototype = {\n  addLine: function (line3d, material) {\n    if (material === undefined) {\n      material = new THREE.LineBasicMaterial();\n    }\n\n    var geom = ToxiclibsSupport.createLineGeometry(line3d);\n    var line = new THREE.Line(geom, material);\n    this.scene.add(line);\n    return line;\n  },\n\n  /**\n   * add a toxiclibs.js mesh to the three.js scene\n   * @param {Object|toxi.geom.mesh.TriangleMesh} obj_or_mesh either an options object or\n   * the toxiclibsjs mesh\n   * --\n   * @param {toxi.geom.mesh.Trianglemesh} [obj_or_mesh.geometry] the mesh in the options object\n   * @param {THREE.Material} [obj_or_mesh.material] the three.js material for the mesh\n   * @param {boolean} [obj_or_mesh.holdInDictionary] should ToxiclibsSupport hold a reference?\n   * --\n   * @param {THREE.Material} [threeMaterials] the three.js material for the mesh\n   */\n  addMesh: function (obj_or_mesh, threeMaterials) {\n    var toxiTriangleMesh;\n\n    if (arguments.length == 1) {\n      //it needs to be an param object\n      toxiTriangleMesh = obj_or_mesh.geometry;\n      threeMaterials = obj_or_mesh.materials;\n    } else {\n      toxiTriangleMesh = obj_or_mesh;\n    }\n\n    var threeMesh = this.createMesh(toxiTriangleMesh, threeMaterials);\n    this.scene.add(threeMesh);\n    return threeMesh;\n  },\n  addParticles: function (positions, material) {\n    if (material === undefined) {\n      material = new THREE.ParticleBasicMaterial();\n    }\n\n    positions = is.Array(positions) ? positions : [positions];\n    var particle = new THREE.Geometry(),\n        pos;\n\n    for (var i = 0, len = positions.length; i < len; i++) {\n      pos = positions[i];\n      particle.vertices[i] = new THREE.Vector3(pos.x, pos.y, pos.z);\n    }\n\n    var particleSystem = new THREE.ParticleSystem(particle, material);\n    this.scene.add(particleSystem);\n    return particle;\n  },\n  createMeshGeometry: function (triangleMesh) {\n    return ToxiclibsSupport.createMeshGeometry(triangleMesh);\n  },\n  createMesh: function (triangleMesh, material) {\n    return ToxiclibsSupport.createMesh(triangleMesh, material);\n  }\n};\nmodule.exports = ToxiclibsSupport;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/THREE/ToxiclibsSupport.js"],"names":["is","require","ToxiclibsSupport","scene","THREE","undefined","Error","objectDictionary","createLineGeometry","line3d","geometry","createMeshGeometry","vertices","a","b","obj","Geometry","idIndexMap","v","i","f","len","Array","length","Vector3","x","y","z","id","faces","Face3","c","normal","computeCentroids","computeVertexNormals","createMesh","triangleMesh","material","MeshBasicMaterial","Mesh","createParticle","position","materials","particle","Particle","prototype","addLine","LineBasicMaterial","geom","line","Line","add","addMesh","obj_or_mesh","threeMaterials","toxiTriangleMesh","arguments","threeMesh","addParticles","positions","ParticleBasicMaterial","pos","particleSystem","ParticleSystem","module","exports"],"mappings":"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","sourcesContent":["/*global THREE*/\nvar is = require('../internals/is');\n    /**\n     * @author Kyle Phillips  / haptic-data.com\n     * a bridge between Toxiclibs.js and Three.js\n     *\n     * Three.js does type-checking to ensure that vectors, vertices and faces are of THREE's types\n     * this helps to do that conversion process.\n     */\n    var\tToxiclibsSupport = function(scene){\n        if(THREE === undefined){\n            throw new Error(\"THREE.js has not been loaded\");\n        }\n        this.scene = scene;\n        this.objectDictionary = {};\n    };\n\n    ToxiclibsSupport.createLineGeometry = function(line3d, geometry){\n        return ToxiclibsSupport.createMeshGeometry({ vertices: [line3d.a, line3d.b] }, geometry);\n    };\n    /**\n     * create a THREE.Geometry with matching vertices to your triangleMesh\n     * @param {toxi.geom.mesh.TriangleMesh} triangleMesh the toxiclibs.js triangle mesh to convert\n     * @param {THREE.Geometry} [geometry] optional geometry to pass in if you would prefer to update\n     * a geometry instead of create a new one\n     * @returns {THREE.Geometry}\n     */\n\n    ToxiclibsSupport.createMeshGeometry = function createMeshGeometry(obj, geometry){\n        geometry = geometry || new THREE.Geometry();\n        //create a map where the unique id of the Vertex\n        //references the index in the array\n        var idIndexMap = {};\n        var v, i, f, len, vertices;\n        //add all vertices\n        vertices = is.Array(obj) ? obj : obj.vertices;\n        len = vertices.length;\n        if( !vertices ){\n            throw new Error('no vertices found');\n        }\n        for( i= 0; i<len; i++ ){\n            v = vertices[i];\n            geometry.vertices[i] = new THREE.Vector3(v.x, v.y, v.z);\n            idIndexMap[v.id] = i;\n        }\n\n        if( obj.faces ){\n            len = obj.faces.length;\n            for( i=0; i<len; i++ ){\n                f = obj.faces[i];\n                //normal.y *= -1;\n                //unlike toxiclibs, a face in three.js are indices related to the vertices array\n                geometry.faces[i] = new THREE.Face3(\n                    idIndexMap[f.a.id], idIndexMap[f.b.id], idIndexMap[f.c.id],\n                    new THREE.Vector3(f.normal.x, f.normal.y, f.normal.z )\n                );\n            }\n        }\n        geometry.computeCentroids();\n        geometry.computeVertexNormals();\n        return geometry;\n    };\n\n\n    ToxiclibsSupport.createMesh = function(triangleMesh,material){\n        if(material === undefined){\n            material = new THREE.MeshBasicMaterial();\n        }\n        var geometry = ToxiclibsSupport.createMeshGeometry(triangleMesh);\n        return new THREE.Mesh(geometry,material);\n    };\n\n    ToxiclibsSupport.createParticle = function(position, materials){\n        var particle = new THREE.Particle(materials);\n        particle.position.x = position.x;\n        particle.position.y = position.y;\n        particle.position.z = position.z;\n        return particle;\n    };\n\n    ToxiclibsSupport.prototype = {\n        addLine: function(line3d, material){\n            if(material === undefined){\n                material = new THREE.LineBasicMaterial();\n            }\n            var geom = ToxiclibsSupport.createLineGeometry(line3d);\n            var line = new THREE.Line(geom,material);\n            this.scene.add(line);\n            return line;\n        },\n        /**\n         * add a toxiclibs.js mesh to the three.js scene\n         * @param {Object|toxi.geom.mesh.TriangleMesh} obj_or_mesh either an options object or\n         * the toxiclibsjs mesh\n         * --\n         * @param {toxi.geom.mesh.Trianglemesh} [obj_or_mesh.geometry] the mesh in the options object\n         * @param {THREE.Material} [obj_or_mesh.material] the three.js material for the mesh\n         * @param {boolean} [obj_or_mesh.holdInDictionary] should ToxiclibsSupport hold a reference?\n         * --\n         * @param {THREE.Material} [threeMaterials] the three.js material for the mesh\n         */\n        addMesh: function(obj_or_mesh,threeMaterials){\n            var toxiTriangleMesh;\n            if(arguments.length == 1){ //it needs to be an param object\n                toxiTriangleMesh = obj_or_mesh.geometry;\n                threeMaterials = obj_or_mesh.materials;\n            } else {\n                toxiTriangleMesh = obj_or_mesh;\n            }\n            var threeMesh = this.createMesh(toxiTriangleMesh,threeMaterials);\n            this.scene.add(threeMesh);\n            return threeMesh;\n        },\n        addParticles: function(positions, material){\n            if(material === undefined){\n                material = new THREE.ParticleBasicMaterial();\n            }\n            positions =  is.Array( positions ) ? positions : [ positions ];\n            var particle = new THREE.Geometry(),\n                pos;\n            for(var i=0,len = positions.length;i<len;i++){\n                pos = positions[i];\n                particle.vertices[i] = new THREE.Vector3( pos.x, pos.y, pos.z );\n            }\n            var particleSystem = new THREE.ParticleSystem(particle,material);\n            this.scene.add(particleSystem);\n            return particle;\n        },\n        createMeshGeometry: function(triangleMesh){\n            return ToxiclibsSupport.createMeshGeometry(triangleMesh);\n        },\n        createMesh: function(triangleMesh,material){\n            return ToxiclibsSupport.createMesh(triangleMesh,material);\n        }\n    };\n\n    module.exports = ToxiclibsSupport;\n\n"]},"metadata":{},"sourceType":"script"}