{"ast":null,"code":"var mathUtils = require('../../math/mathUtils');\n\nvar TriangleMesh = require('./TriangleMesh');\n/**\n * @class\n * @member toxi\n */\n\n\nvar SuperEllipsoid = function (n1, n2) {\n  this.p1 = n1;\n  this.p2 = n2;\n};\n\nSuperEllipsoid.prototype = {\n  computeVertexFor: function (p, phi, theta) {\n    phi -= mathUtils.HALF_PI;\n    var cosPhi = mathUtils.cos(phi),\n        cosTheta = mathUtils.cos(theta),\n        sinPhi = mathUtils.sin(phi),\n        sinTheta = mathUtils.sin(theta);\n    var t = mathUtils.sign(cosPhi) * Math.pow(mathUtils.abs(cosPhi), this.p1);\n    p.x = t * mathUtils.sign(cosTheta) * Math.pow(Math.abs(cosTheta), this.p2);\n    p.y = mathUtils.sign(sinPhi) * Math.pow(Math.abs(sinPhi), this.p1);\n    p.z = t * mathUtils.sign(sinTheta) * Math.pow(mathUtils.abs(sinTheta), this.p2);\n    return p;\n  },\n  getPhiRange: function () {\n    return mathUtils.TWO_PI;\n  },\n  getPhiResolutionLimit: function (res) {\n    return res / 2;\n  },\n  getThetaRange: function () {\n    return mathUtils.TWO_PI;\n  },\n  getThetaResolutionLimit: function (res) {\n    return res;\n  }\n};\nmodule.exports = SuperEllipsoid;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/mesh/SuperEllipsoid.js"],"names":["mathUtils","require","TriangleMesh","SuperEllipsoid","n1","n2","p1","p2","prototype","computeVertexFor","p","phi","theta","HALF_PI","cosPhi","cos","cosTheta","sinPhi","sin","sinTheta","t","sign","Math","pow","abs","x","y","z","getPhiRange","TWO_PI","getPhiResolutionLimit","res","getThetaRange","getThetaResolutionLimit","module","exports"],"mappings":"AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,sBAAD,CAAvB;;AAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;AAEA;AACA;AACA;AACA;;;AACA,IAAIE,cAAc,GAAG,UAASC,EAAT,EAAYC,EAAZ,EAAgB;AACpC,OAAKC,EAAL,GAAUF,EAAV;AACA,OAAKG,EAAL,GAAUF,EAAV;AACA,CAHD;;AAKAF,cAAc,CAACK,SAAf,GAA2B;AAC1BC,EAAAA,gBAAgB,EAAE,UAASC,CAAT,EAAWC,GAAX,EAAeC,KAAf,EAAsB;AACvCD,IAAAA,GAAG,IAAIX,SAAS,CAACa,OAAjB;AACA,QAAIC,MAAM,GAAGd,SAAS,CAACe,GAAV,CAAcJ,GAAd,CAAb;AAAA,QACCK,QAAQ,GAAGhB,SAAS,CAACe,GAAV,CAAcH,KAAd,CADZ;AAAA,QAECK,MAAM,GAAGjB,SAAS,CAACkB,GAAV,CAAcP,GAAd,CAFV;AAAA,QAGCQ,QAAQ,GAAGnB,SAAS,CAACkB,GAAV,CAAcN,KAAd,CAHZ;AAKA,QAAIQ,CAAC,GAAGpB,SAAS,CAACqB,IAAV,CAAeP,MAAf,IAAyBQ,IAAI,CAACC,GAAL,CAASvB,SAAS,CAACwB,GAAV,CAAcV,MAAd,CAAT,EAAgC,KAAKR,EAArC,CAAjC;AACAI,IAAAA,CAAC,CAACe,CAAF,GAAML,CAAC,GAAGpB,SAAS,CAACqB,IAAV,CAAeL,QAAf,CAAJ,GAA+BM,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASR,QAAT,CAAT,EAA6B,KAAKT,EAAlC,CAArC;AACAG,IAAAA,CAAC,CAACgB,CAAF,GAAM1B,SAAS,CAACqB,IAAV,CAAeJ,MAAf,IAAyBK,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASP,MAAT,CAAT,EAA2B,KAAKX,EAAhC,CAA/B;AACAI,IAAAA,CAAC,CAACiB,CAAF,GAAMP,CAAC,GAAGpB,SAAS,CAACqB,IAAV,CAAeF,QAAf,CAAJ,GAA+BG,IAAI,CAACC,GAAL,CAASvB,SAAS,CAACwB,GAAV,CAAcL,QAAd,CAAT,EAAkC,KAAKZ,EAAvC,CAArC;AACA,WAAOG,CAAP;AACA,GAbyB;AAe1BkB,EAAAA,WAAW,EAAE,YAAW;AACvB,WAAO5B,SAAS,CAAC6B,MAAjB;AACA,GAjByB;AAmB1BC,EAAAA,qBAAqB,EAAE,UAASC,GAAT,EAAc;AACpC,WAAOA,GAAG,GAAG,CAAb;AACA,GArByB;AAuB1BC,EAAAA,aAAa,EAAE,YAAW;AACzB,WAAOhC,SAAS,CAAC6B,MAAjB;AACA,GAzByB;AA2B1BI,EAAAA,uBAAuB,EAAE,UAASF,GAAT,EAAc;AACtC,WAAOA,GAAP;AACA;AA7ByB,CAA3B;AAgCAG,MAAM,CAACC,OAAP,GAAiBhC,cAAjB","sourcesContent":["\n\nvar mathUtils = require('../../math/mathUtils');\n\nvar TriangleMesh = require('./TriangleMesh');\n\n/**\n * @class\n * @member toxi\n */\nvar\tSuperEllipsoid = function(n1,n2) {\n\tthis.p1 = n1;\n\tthis.p2 = n2;\n};\n\nSuperEllipsoid.prototype = {\n\tcomputeVertexFor: function(p,phi,theta) {\n\t\tphi -= mathUtils.HALF_PI;\n\t\tvar cosPhi = mathUtils.cos(phi),\n\t\t\tcosTheta = mathUtils.cos(theta),\n\t\t\tsinPhi = mathUtils.sin(phi),\n\t\t\tsinTheta = mathUtils.sin(theta);\n\n\t\tvar t = mathUtils.sign(cosPhi) * Math.pow(mathUtils.abs(cosPhi), this.p1);\n\t\tp.x = t * mathUtils.sign(cosTheta) * Math.pow(Math.abs(cosTheta), this.p2);\n\t\tp.y = mathUtils.sign(sinPhi) * Math.pow(Math.abs(sinPhi), this.p1);\n\t\tp.z = t * mathUtils.sign(sinTheta) * Math.pow(mathUtils.abs(sinTheta), this.p2);\n\t\treturn p;\n\t},\n \n\tgetPhiRange: function() {\n\t\treturn mathUtils.TWO_PI;\n\t},\n\n\tgetPhiResolutionLimit: function(res) {\n\t\treturn res / 2;\n\t},\n\n\tgetThetaRange: function() {\n\t\treturn mathUtils.TWO_PI;\n\t},\n\n\tgetThetaResolutionLimit: function(res) {\n\t\treturn res;\n\t}\n};\n\nmodule.exports = SuperEllipsoid;\n\n"]},"metadata":{},"sourceType":"script"}