{"ast":null,"code":"var each = require('../internals').each,\n    Iterator = require('../internals').Iterator,\n    HistEntry = require('./HistEntry'),\n    ColorList = require('./ColorList');\n/**\n * Histogram constructor\n * @param {toxi.color.ColorList} palette\n */\n\n\nvar Histogram = function (palette) {\n  this.palette = palette;\n};\n\nHistogram.prototype = {\n  constructor: Histogram,\n\n  /**\n   * @param {Number} tolerance color tolerance used to merge similar colors\n   * (based on RGB distance)\n   * @param {Boolean} blendCols switch to enable color blending of binned colors\n   * @type sorted histogram as List of HistEntry\n   */\n  compute: function (tolerance, blendCols) {\n    var self = this;\n    this.entries = [];\n    var maxFreq = 1;\n    this.palette.each(function (c) {\n      var existing,\n          e,\n          i = 0,\n          l = self.entries.length;\n\n      for (i = 0; i < l; i++) {\n        e = self.entries[i];\n\n        if (e.col.distanceToRGB(c) < tolerance) {\n          if (blendCols) {\n            e.col.blend(c, 1 / (e.freq + 1));\n          }\n\n          existing = e;\n          break;\n        }\n      }\n\n      if (existing !== undefined) {\n        existing.freq++;\n\n        if (existing.freq > maxFreq) {\n          maxFreq = existing.freq;\n        }\n      } else {\n        self.entries.push(new HistEntry(c));\n      }\n    });\n    this.entries.sort();\n    maxFreq = 1 / this.palette.size();\n    each(this.entries, function (e) {\n      e.freq *= maxFreq;\n    });\n    return this.entries;\n  },\n  getEntries: function () {\n    return this.entries;\n  },\n  getPalette: function () {\n    return this.palette;\n  },\n  iterator: function () {\n    return new Iterator(this.entries);\n  },\n  setPalette: function (palette) {\n    this.palette = palette;\n  }\n};\n\nHistogram.newFromARGBArray = function (pixels, numSamples, tolerance, blendCols) {\n  var h = new Histogram(ColorList.createFromARGBArray(pixels, numSamples, false));\n  h.compute(tolerance, blendCols);\n  return h;\n};\n\nmodule.exports = Histogram;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/color/Histogram.js"],"names":["each","require","Iterator","HistEntry","ColorList","Histogram","palette","prototype","constructor","compute","tolerance","blendCols","self","entries","maxFreq","c","existing","e","i","l","length","col","distanceToRGB","blend","freq","undefined","push","sort","size","getEntries","getPalette","iterator","setPalette","newFromARGBArray","pixels","numSamples","h","createFromARGBArray","module","exports"],"mappings":"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","sourcesContent":["\n\n\tvar each = require('../internals').each,\n\t\tIterator = require('../internals').Iterator,\n\t\tHistEntry = require('./HistEntry'),\n\t\tColorList = require('./ColorList');\n\n\t/**\n\t * Histogram constructor\n\t * @param {toxi.color.ColorList} palette\n\t */\n\tvar Histogram = function( palette ){\n\t\tthis.palette = palette;\n\t};\n\n\tHistogram.prototype = {\n\t\tconstructor: Histogram,\n\t\t/**\n\t\t * @param {Number} tolerance color tolerance used to merge similar colors\n\t\t * (based on RGB distance)\n\t\t * @param {Boolean} blendCols switch to enable color blending of binned colors\n\t\t * @type sorted histogram as List of HistEntry\n\t\t */\n\t\tcompute: function( tolerance, blendCols ){\n\t\t\tvar self = this;\n\t\t\tthis.entries = [];\n\t\t\tvar maxFreq = 1;\n\t\t\tthis.palette.each(function( c ){\n\t\t\t\tvar existing, e, i=0, l=self.entries.length;\n\t\t\t\tfor( i=0; i<l; i++ ){\n\t\t\t\t\te = self.entries[i];\n\t\t\t\t\tif( e.col.distanceToRGB(c) < tolerance ){\n\t\t\t\t\t\tif( blendCols ){\n\t\t\t\t\t\t\te.col.blend( c, 1/(e.freq+1) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\texisting = e;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( existing !== undefined ){\n\t\t\t\t\texisting.freq++;\n\t\t\t\t\tif( existing.freq > maxFreq ){\n\t\t\t\t\t\tmaxFreq = existing.freq;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tself.entries.push( new HistEntry(c) );\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.entries.sort();\n\t\t\tmaxFreq = 1/this.palette.size();\n\n\t\t\teach( this.entries, function( e ){\n\t\t\t\te.freq *= maxFreq;\n\t\t\t});\n\n\t\t\treturn this.entries;\n\t\t},\n\t\tgetEntries: function(){\n\t\t\treturn this.entries;\n\t\t},\n\t\tgetPalette: function(){\n\t\t\treturn this.palette;\n\t\t},\n\t\titerator: function(){\n\t\t\treturn new Iterator( this.entries );\n\t\t},\n\t\tsetPalette: function( palette ){\n\t\t\tthis.palette = palette;\n\t\t}\n\t};\n\n\tHistogram.newFromARGBArray = function( pixels, numSamples, tolerance, blendCols ){\n\t\tvar h = new Histogram( ColorList.createFromARGBArray(pixels, numSamples, false) );\n\t\th.compute( tolerance, blendCols );\n\t\treturn h;\n\t};\n\n\tmodule.exports = Histogram;\n"]},"metadata":{},"sourceType":"script"}