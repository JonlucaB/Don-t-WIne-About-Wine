{"ast":null,"code":"var internals = require('../internals'),\n    mathUtils = require('../math/mathUtils'),\n    Vec2D = require('./Vec2D'),\n    Line2D = require('./Line2D');\n/**\n * @class\n * @member toxi\n * @param {Number} [x]\n * @param {Number} [y]\n * @param {Number} [width]\n * @param {Number} [height]\n */\n\n\nvar Rect = function (a, b, width, height) {\n  if (arguments.length === 2) {\n    //then it should've been 2 Vec2D's\n    if (!internals.has.XY(a)) {\n      throw new Error(\"Rect received incorrect parameters\");\n    } else {\n      this.x = a.x;\n      this.y = a.y;\n      this.width = b.x - this.x;\n      this.height = b.y - this.y;\n    }\n  } else if (arguments.length == 4) {\n    this.x = a;\n    this.y = b;\n    this.width = width;\n    this.height = height;\n  } else if (arguments.length === 1) {\n    //object literal with x,y,width,height\n    var o = arguments[0];\n\n    if (internals.has.XYWidthHeight(o)) {\n      this.x = o.x;\n      this.y = o.y;\n      this.width = o.width;\n      this.height = o.height;\n    }\n  } else if (arguments.length > 0) {\n    throw new Error(\"Rect received incorrect parameters\");\n  }\n};\n\nRect.fromCenterExtent = function (center, extent) {\n  return new Rect(center.sub(extent), center.add(extent));\n};\n\nRect.getBoundingRect = function (points) {\n  var first = points[0];\n  var bounds = new Rect(first.x, first.y, 0, 0);\n\n  for (var i = 1, num = points.length; i < num; i++) {\n    bounds.growToContainPoint(points[i]);\n  }\n\n  return bounds;\n};\n\nRect.prototype = {\n  containsPoint: function (p) {\n    var px = p.x;\n    var py = p.y;\n\n    if (px < this.x || px >= this.x + this.width) {\n      return false;\n    }\n\n    if (py < this.y || py >= this.y + this.height) {\n      return false;\n    }\n\n    return true;\n  },\n  copy: function () {\n    return new Rect(this.x, this.y, this.width, this.height);\n  },\n  getArea: function () {\n    return this.width * this.height;\n  },\n  getAspect: function () {\n    return this.width / this.height;\n  },\n  getBottom: function () {\n    return this.y + this.height;\n  },\n  getBottomRight: function () {\n    return new Vec2D(this.x + this.width, this.y + this.height);\n  },\n  getCentroid: function () {\n    return new Vec2D(this.x + this.width * 0.5, this.y + this.height * 0.5);\n  },\n  getDimensions: function () {\n    return new Vec2D(this.width, this.height);\n  },\n  getEdge: function (id) {\n    var edge;\n\n    switch (id) {\n      case 0:\n        edge = new Line2D(new Vec2D(this.x, this.y), new Vec2D(this.x + this.width, this.y));\n        break;\n\n      case 1:\n        edge = new Line2D(new Vec2D(this.x + this.width, this.y), new Vec2D(this.x + this.width, this.y + this.height));\n        break;\n\n      case 2:\n        edge = new Line2D(new Vec2D(this.x, this.y + this.height), new Vec2D(this.x + this.width, this.y + this.height));\n        break;\n\n      case 3:\n        edge = new Line2D(new Vec2D(this.x, this.y), new Vec2D(this.x, this.y + this.height));\n        break;\n\n      default:\n        throw new Error(\"edge ID needs to be 0...3\");\n    }\n\n    return edge;\n  },\n  getLeft: function () {\n    return this.x;\n  },\n  getRight: function () {\n    return this.x + this.width;\n  },\n  getTop: function () {\n    return this.y;\n  },\n  getTopLeft: function () {\n    return new Vec2D(this.x, this.y);\n  },\n  growToContainPoint: function (p) {\n    if (!this.containsPoint(p)) {\n      if (p.x < this.x) {\n        this.width = this.getRight() - p.x;\n        this.x = p.x;\n      } else if (p.x > this.getRight()) {\n        this.width = p.x - this.x;\n      }\n\n      if (p.y < this.y) {\n        this.height = this.getBottom() - p.y;\n        this.y = p.y;\n      } else if (p.y > this.getBottom()) {\n        this.height = p.y - this.y;\n      }\n    }\n\n    return this;\n  },\n  intersectsRay: function (ray, minDist, maxDist) {\n    //returns Vec2D of point intersection\n    var invDir = ray.getDirection().reciprocal();\n    var signDirX = invDir.x < 0;\n    var signDirY = invDir.y < 0;\n    var min = this.getTopLeft();\n    var max = this.getBottomRight();\n    var bbox = signDirX ? max : min;\n    var tmin = (bbox.x - ray.x) * invDir.x;\n    bbox = signDirX ? min : max;\n    var tmax = (bbox.x - ray.x) * invDir.x;\n    bbox = signDirY ? max : min;\n    var tymin = (bbox.y - ray.y) * invDir.y;\n    bbox = signDirY ? min : max;\n    var tymax = (bbox.y - ray.y) * invDir.y;\n\n    if (tmin > tymax || tymin > tmax) {\n      return undefined;\n    }\n\n    if (tymin > tmin) {\n      tmin = tymin;\n    }\n\n    if (tymax < tmax) {\n      tmax = tymax;\n    }\n\n    if (tmin < maxDist && tmax > minDist) {\n      return ray.getPointAtDistance(tmin);\n    }\n\n    return undefined;\n  },\n  intersectsRect: function (r) {\n    return !(this.x > r.x + r.width || this.x + this.width < r.x || this.y > r.y + r.height || this.y + this.height < r.y);\n  },\n  scale: function (s) {\n    var c = this.getCentroid();\n    this.width *= s;\n    this.height *= s;\n    this.x = c.x - this.width * 0.5;\n    this.y = c.y - this.height * 0.5;\n    return this;\n  },\n  set: function (x, y, width, height) {\n    if (arguments.length === 1) {\n      this.y = x.y;\n      this.width = x.width;\n      this.height = x.height;\n      this.x = x.x;\n    } else if (arguments.length === 4) {\n      this.x = x;\n      this.y = y;\n      this.width = width;\n      this.height = height;\n    } else {\n      throw new Error(\"Rect set() received wrong parameters\");\n    }\n  },\n  setDimensions: function (dim) {\n    if (arguments.length == 2) {\n      dim = {\n        x: arguments[0],\n        y: arguments[1]\n      };\n    }\n\n    this.width = dim.x;\n    this.height = dim.y;\n    return this;\n  },\n  setPosition: function (pos) {\n    this.x = pos.x;\n    this.y = pos.y;\n    return this;\n  },\n  toPolygon2D: function () {\n    var Polygon2D = require('./Polygon2D');\n\n    var poly = new Polygon2D();\n    poly.add(new Vec2D(this.x, this.y));\n    poly.add(new Vec2D(this.x + this.width, this.y));\n    poly.add(new Vec2D(this.x + this.width, this.y + this.height));\n    poly.add(new Vec2D(this.x, this.y + this.height));\n    return poly;\n  },\n  toString: function () {\n    return \"rect: {x: \" + this.x + \", y: \" + this.y + \", width: \" + this.width + \", height: \" + this.height + \"}\";\n  },\n  union: function (r) {\n    var tmp = mathUtils.max(this.x + this.width, r.x + r.width);\n    this.x = mathUtils.min(this.x, r.x);\n    this.width = tmp - this.x;\n    tmp = mathUtils.max(this.y + this.height, r.y + r.height);\n    this.y = mathUtils.min(this.y, r.y);\n    this.height = tmp - this.y;\n    return this;\n  }\n};\nmodule.exports = Rect;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/geom/Rect.js"],"names":["internals","require","mathUtils","Vec2D","Line2D","Rect","a","b","width","height","arguments","length","has","XY","Error","x","y","o","XYWidthHeight","fromCenterExtent","center","extent","sub","add","getBoundingRect","points","first","bounds","i","num","growToContainPoint","prototype","containsPoint","p","px","py","copy","getArea","getAspect","getBottom","getBottomRight","getCentroid","getDimensions","getEdge","id","edge","getLeft","getRight","getTop","getTopLeft","intersectsRay","ray","minDist","maxDist","invDir","getDirection","reciprocal","signDirX","signDirY","min","max","bbox","tmin","tmax","tymin","tymax","undefined","getPointAtDistance","intersectsRect","r","scale","s","c","set","setDimensions","dim","setPosition","pos","toPolygon2D","Polygon2D","poly","toString","union","tmp","module","exports"],"mappings":"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","sourcesContent":["\n\n    var\tinternals = require('../internals'),\n        mathUtils = require('../math/mathUtils'),\n        Vec2D = require('./Vec2D'),\n        Line2D = require('./Line2D');\n\n    /**\n     * @class\n     * @member toxi\n     * @param {Number} [x]\n     * @param {Number} [y]\n     * @param {Number} [width]\n     * @param {Number} [height]\n     */\n    var\tRect = function(a,b,width,height){\n        if(arguments.length === 2){ //then it should've been 2 Vec2D's\n            if( !( internals.has.XY( a ) ) ){\n                throw new Error(\"Rect received incorrect parameters\");\n            } else {\n                this.x = a.x;\n                this.y = a.y;\n                this.width = b.x - this.x;\n                this.height = b.y - this.y;\n            }\n        } else if(arguments.length == 4){\n            this.x = a;\n            this.y = b;\n            this.width = width;\n            this.height = height;\n        } else if(arguments.length === 1){ //object literal with x,y,width,height\n            var o = arguments[0];\n            if( internals.has.XYWidthHeight( o ) ){\n                this.x = o.x;\n                this.y = o.y;\n                this.width = o.width;\n                this.height = o.height;\n            }\n        } else if(arguments.length > 0){\n            throw new Error(\"Rect received incorrect parameters\");\n        }\n    };\n\n    Rect.fromCenterExtent = function(center,extent){\n        return new Rect(center.sub(extent),center.add(extent));\n    };\n\n\n    Rect.getBoundingRect = function( points ){\n        var first = points[0];\n        var bounds = new Rect(first.x, first.y, 0, 0);\n        for (var i = 1, num = points.length; i < num; i++) {\n            bounds.growToContainPoint(points[i]);\n        }\n        return bounds;\n    };\n\n    Rect.prototype = {\n        containsPoint: function(p){\n            var px = p.x;\n            var py = p.y;\n            if(px < this.x || px >= this.x + this.width){\n                return false;\n            }\n            if(py < this.y || py >= this.y + this.height){\n                return false;\n            }\n            return true;\n        },\n\n        copy: function(){\n            return new Rect(this.x,this.y,this.width,this.height);\n        },\n\n        getArea: function(){\n            return this.width * this.height;\n        },\n\n        getAspect: function(){\n            return this.width / this.height;\n        },\n\n        getBottom: function(){\n            return this.y + this.height;\n        },\n\n        getBottomRight: function(){\n            return new Vec2D(this.x + this.width, this.y + this.height);\n        },\n\n        getCentroid: function(){\n            return new Vec2D(this.x + this.width * 0.5, this.y + this.height * 0.5);\n        },\n\n        getDimensions: function(){\n            return new Vec2D(this.width,this.height);\n        },\n\n        getEdge: function(id){\n            var edge;\n            switch(id){\n                case 0:\n                    edge = new Line2D(\n                        new Vec2D(this.x,this.y),\n                        new Vec2D(this.x + this.width, this.y)\n                    );\n                    break;\n                case 1:\n                    edge = new Line2D(\n                        new Vec2D(this.x + this.width, this.y),\n                        new Vec2D(this.x + this.width, this.y + this.height)\n                    );\n                    break;\n                case 2:\n                    edge = new Line2D(\n                        new Vec2D(this.x, this.y + this.height),\n                        new Vec2D(this.x + this.width, this.y + this.height)\n                    );\n                    break;\n                case 3:\n                    edge = new Line2D(\n                        new Vec2D(this.x,this.y),\n                        new Vec2D(this.x,this.y+this.height)\n                    );\n                    break;\n                default:\n                    throw new Error(\"edge ID needs to be 0...3\");\n            }\n            return edge;\n        },\n\n        getLeft: function(){\n            return this.x;\n        },\n\n        getRight: function(){\n            return this.x + this.width;\n        },\n\n        getTop: function(){\n            return this.y;\n        },\n\n        getTopLeft: function(){\n            return new Vec2D(this.x,this.y);\n        },\n\n        growToContainPoint: function( p ){\n            if (!this.containsPoint(p)) {\n                if (p.x < this.x) {\n                    this.width = this.getRight() - p.x;\n                    this.x = p.x;\n                } else if (p.x > this.getRight()) {\n                    this.width = p.x - this.x;\n                }\n                if (p.y < this.y) {\n                    this.height = this.getBottom() - p.y;\n                    this.y = p.y;\n                } else if (p.y > this.getBottom()) {\n                    this.height = p.y - this.y;\n                }\n            }\n            return this;\n        },\n\n        intersectsRay: function(ray,minDist,maxDist){\n            //returns Vec2D of point intersection\n            var invDir = ray.getDirection().reciprocal();\n            var signDirX = invDir.x < 0;\n            var signDirY = invDir.y < 0;\n            var min = this.getTopLeft();\n            var max = this.getBottomRight();\n            var bbox = signDirX ? max : min;\n            var tmin = (bbox.x - ray.x) * invDir.x;\n            bbox = signDirX ? min : max;\n            var tmax = (bbox.x - ray.x) * invDir.x;\n            bbox = signDirY ? max : min;\n            var tymin = (bbox.y - ray.y) * invDir.y;\n            bbox = signDirY ? min : max;\n            var tymax = (bbox.y - ray.y) * invDir.y;\n            if((tmin > tymax) || (tymin > tmax)){\n                return undefined;\n            }\n            if(tymin > tmin){\n                tmin = tymin;\n            }\n            if (tymax < tmax) {\n                tmax = tymax;\n            }\n            if ((tmin < maxDist) && (tmax > minDist)) {\n                return ray.getPointAtDistance(tmin);\n            }\n            return undefined;\n        },\n\n        intersectsRect: function(r){\n            return !(this.x > r.x + r.width || this.x + this.width < r.x || this.y > r.y + r.height || this.y + this.height < r.y);\n        },\n\n        scale: function(s){\n            var c = this.getCentroid();\n            this.width *= s;\n            this.height *= s;\n            this.x = c.x - this.width * 0.5;\n            this.y = c.y - this.height * 0.5;\n            return this;\n        },\n\n        set: function(x,y,width,height){\n            if(arguments.length === 1){\n                this.y = x.y;\n                this.width = x.width;\n                this.height = x.height;\n                this.x = x.x;\n            } else if(arguments.length === 4) {\n                this.x = x;\n                this.y = y;\n                this.width = width;\n                this.height = height;\n            } else {\n                throw new Error(\"Rect set() received wrong parameters\");\n            }\n        },\n\n        setDimensions: function(dim){\n            if( arguments.length == 2 ){\n                dim = { x: arguments[0], y: arguments[1] };\n            }\n            this.width = dim.x;\n            this.height = dim.y;\n            return this;\n        },\n\n        setPosition: function(pos){\n            this.x = pos.x;\n            this.y = pos.y;\n            return this;\n        },\n\n        toPolygon2D: function(){\n            var Polygon2D = require('./Polygon2D');\n            var poly = new Polygon2D();\n            poly.add(new Vec2D(this.x,this.y));\n            poly.add(new Vec2D(this.x+this.width,this.y));\n            poly.add(new Vec2D(this.x+this.width,this.y+this.height));\n            poly.add(new Vec2D(this.x,this.y+this.height));\n            return poly;\n        },\n\n        toString: function(){\n            return \"rect: {x: \"+this.x +\", y: \"+this.y+ \", width: \"+this.width+ \", height: \"+this.height+\"}\";\n        },\n\n        union: function(r){\n            var tmp = mathUtils.max(this.x + this.width, r.x + r.width);\n            this.x = mathUtils.min(this.x,r.x);\n            this.width = tmp - this.x;\n            tmp = mathUtils.max(this.y + this.height, r.y + r.height);\n            this.y = mathUtils.min(this.y,r.y);\n            this.height = tmp - this.y;\n            return this;\n        }\n    };\n\n\n    module.exports = Rect;\n\n"]},"metadata":{},"sourceType":"script"}