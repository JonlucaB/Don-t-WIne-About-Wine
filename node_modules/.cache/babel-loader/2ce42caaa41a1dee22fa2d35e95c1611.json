{"ast":null,"code":"var extend = require('../../internals').extend,\n    mathUtils = require('../mathUtils'),\n    AbstractWave = require('./AbstractWave'),\n    ConstantWave = require('./ConstantWave');\n/**\n * @module toxi/math/waves/FMTriangleWave\n * @augments toxi/math/waves/AbstractWave\n */\n\n\nvar FMTriangleWave = function (a, b, c, d, e) {\n  if (typeof c == \"number\") {\n    if (e !== undefined) {\n      AbstractWave.call(this, a, b, c, d);\n      this.fmod = e;\n    } else {\n      AbstractWave.call(this, a, b, c, d, new ConstantWave(0));\n    }\n  } else {\n    AbstractWave.call(this, a, b, 1, 0);\n  }\n};\n\nextend(FMTriangleWave, AbstractWave);\n\nFMTriangleWave.prototype.getClass = function () {\n  return \"FMTriangleWave\";\n};\n\nFMTriangleWave.prototype.pop = function () {\n  this.parent.pop.call(this);\n  this.fmod.pop();\n};\n\nFMTriangleWave.prototype.push = function () {\n  this.parent.push.call(this);\n  this.fmod.push();\n};\n\nFMTriangleWave.prototype.reset = function () {\n  this.parent.reset.call(this);\n  this.fmod.reset();\n};\n\nFMTriangleWave.prototype.update = function () {\n  this.value = 2 * this.amp * (Math.abs(AbstractWave.PI - this.phase) * mathUtils.INV_PI - 0.5) + this.offset;\n  this.cyclePhase(this.frequency + this.fmod.update());\n  return this.value;\n};\n\nmodule.exports = FMTriangleWave;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/math/waves/FMTriangleWave.js"],"names":["extend","require","mathUtils","AbstractWave","ConstantWave","FMTriangleWave","a","b","c","d","e","undefined","call","fmod","prototype","getClass","pop","parent","push","reset","update","value","amp","Math","abs","PI","phase","INV_PI","offset","cyclePhase","frequency","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,MAAxC;AAAA,IACCE,SAAS,GAAGD,OAAO,CAAC,cAAD,CADpB;AAAA,IAECE,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAFvB;AAAA,IAGCG,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAHvB;AAKA;AACA;AACA;AACA;;;AACA,IAAII,cAAc,GAAG,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAeC,CAAf,EAAiBC,CAAjB,EAAmB;AACvC,MAAG,OAAOF,CAAP,IAAY,QAAf,EAAwB;AACvB,QAAGE,CAAC,KAAKC,SAAT,EAAmB;AAClBR,MAAAA,YAAY,CAACS,IAAb,CAAkB,IAAlB,EAAuBN,CAAvB,EAAyBC,CAAzB,EAA2BC,CAA3B,EAA6BC,CAA7B;AACA,WAAKI,IAAL,GAAYH,CAAZ;AACA,KAHD,MAGO;AACNP,MAAAA,YAAY,CAACS,IAAb,CAAkB,IAAlB,EAAuBN,CAAvB,EAAyBC,CAAzB,EAA2BC,CAA3B,EAA6BC,CAA7B,EAAgC,IAAIL,YAAJ,CAAiB,CAAjB,CAAhC;AACA;AACD,GAPD,MAOO;AACND,IAAAA,YAAY,CAACS,IAAb,CAAkB,IAAlB,EAAuBN,CAAvB,EAAyBC,CAAzB,EAA2B,CAA3B,EAA6B,CAA7B;AACA;AACD,CAXD;;AAaAP,MAAM,CAACK,cAAD,EAAgBF,YAAhB,CAAN;;AAEAE,cAAc,CAACS,SAAf,CAAyBC,QAAzB,GAAoC,YAAU;AAC7C,SAAO,gBAAP;AACA,CAFD;;AAIAV,cAAc,CAACS,SAAf,CAAyBE,GAAzB,GAA+B,YAAU;AACxC,OAAKC,MAAL,CAAYD,GAAZ,CAAgBJ,IAAhB,CAAqB,IAArB;AACA,OAAKC,IAAL,CAAUG,GAAV;AACA,CAHD;;AAKAX,cAAc,CAACS,SAAf,CAAyBI,IAAzB,GAAgC,YAAU;AACzC,OAAKD,MAAL,CAAYC,IAAZ,CAAiBN,IAAjB,CAAsB,IAAtB;AACA,OAAKC,IAAL,CAAUK,IAAV;AACA,CAHD;;AAKAb,cAAc,CAACS,SAAf,CAAyBK,KAAzB,GAAiC,YAAU;AAC1C,OAAKF,MAAL,CAAYE,KAAZ,CAAkBP,IAAlB,CAAuB,IAAvB;AACA,OAAKC,IAAL,CAAUM,KAAV;AACA,CAHD;;AAKAd,cAAc,CAACS,SAAf,CAAyBM,MAAzB,GAAkC,YAAU;AAC3C,OAAKC,KAAL,GAAa,IAAI,KAAKC,GAAT,IAAgBC,IAAI,CAACC,GAAL,CAASrB,YAAY,CAACsB,EAAb,GAAkB,KAAKC,KAAhC,IAAyCxB,SAAS,CAACyB,MAAnD,GAA4D,GAA5E,IAAmF,KAAKC,MAArG;AACA,OAAKC,UAAL,CAAgB,KAAKC,SAAL,GAAiB,KAAKjB,IAAL,CAAUO,MAAV,EAAjC;AACA,SAAO,KAAKC,KAAZ;AACA,CAJD;;AAMAU,MAAM,CAACC,OAAP,GAAiB3B,cAAjB","sourcesContent":["\n\nvar extend = require('../../internals').extend,\n\tmathUtils = require('../mathUtils'),\n\tAbstractWave = require('./AbstractWave'),\n\tConstantWave = require('./ConstantWave');\n\n/**\n * @module toxi/math/waves/FMTriangleWave\n * @augments toxi/math/waves/AbstractWave\n */\nvar\tFMTriangleWave = function(a,b,c,d,e){\n\tif(typeof c == \"number\"){\n\t\tif(e !== undefined){\n\t\t\tAbstractWave.call(this,a,b,c,d);\n\t\t\tthis.fmod = e;\n\t\t} else {\n\t\t\tAbstractWave.call(this,a,b,c,d, new ConstantWave(0));\n\t\t}\n\t} else {\n\t\tAbstractWave.call(this,a,b,1,0);\n\t}\n};\n\nextend(FMTriangleWave,AbstractWave);\n\nFMTriangleWave.prototype.getClass = function(){\n\treturn \"FMTriangleWave\";\n};\n\nFMTriangleWave.prototype.pop = function(){\n\tthis.parent.pop.call(this);\n\tthis.fmod.pop();\n};\n\nFMTriangleWave.prototype.push = function(){\n\tthis.parent.push.call(this);\n\tthis.fmod.push();\n};\n\nFMTriangleWave.prototype.reset = function(){\n\tthis.parent.reset.call(this);\n\tthis.fmod.reset();\n};\n\nFMTriangleWave.prototype.update = function(){\n\tthis.value = 2 * this.amp * (Math.abs(AbstractWave.PI - this.phase) * mathUtils.INV_PI - 0.5) + this.offset;\n\tthis.cyclePhase(this.frequency + this.fmod.update());\n\treturn this.value;\n};\n\nmodule.exports = FMTriangleWave;\n\n"]},"metadata":{},"sourceType":"script"}