{"ast":null,"code":"var internals = require('../internals'),\n    Vec3D = require('./Vec3D'),\n    Vec2D = require('./Vec2D'),\n    mathUtils = require('../math/mathUtils');\n/**\n @class Axis-aligned Bounding Box\n @member\n */\n\n\nvar AABB = function (a, b) {\n  if (a === undefined) {\n    Vec3D.call(this);\n    this.setExtent(new Vec3D());\n  } else if (typeof a == \"number\") {\n    Vec3D.call(this, new Vec3D());\n    this.setExtent(a);\n  } else if (internals.has.XYZ(a)) {\n    Vec3D.call(this, a);\n\n    if (b === undefined && internals.is.AABB(a)) {\n      this.setExtent(a.getExtent());\n    } else {\n      if (typeof b == \"number\") {\n        this.setExtent(new Vec3D(b, b, b));\n      } else {\n        //should be an AABB\n        this.setExtent(b);\n      }\n    }\n  }\n};\n\ninternals.extend(AABB, Vec3D);\n\nAABB.fromMinMax = function (min, max) {\n  var a = Vec3D.min(min, max);\n  var b = Vec3D.max(min, max);\n  return new AABB(a.interpolateTo(b, 0.5), b.sub(a).scaleSelf(0.5));\n};\n\nAABB.prototype.containsPoint = function (p) {\n  return p.isInAABB(this);\n};\n\nAABB.prototype.copy = function () {\n  return new AABB(this);\n};\n/**\n * Returns the current box size as new Vec3D instance (updating this vector\n * will NOT update the box size! Use {@link #setExtent(ReadonlyVec3D)} for\n * those purposes)\n *\n * @return box size\n */\n\n\nAABB.prototype.getExtent = function () {\n  return this.extent.copy();\n};\n\nAABB.prototype.getMax = function () {\n  // return this.add(extent);\n  return this.max.copy();\n};\n\nAABB.prototype.getMin = function () {\n  return this.min.copy();\n};\n\nAABB.prototype.getNormalForPoint = function (p) {\n  p = p.sub(this);\n  var pabs = this.extent.sub(p.getAbs());\n  var psign = p.getSignum();\n  var normal = Vec3D.X_AXIS.scale(psign.x);\n  var minDist = pabs.x;\n\n  if (pabs.y < minDist) {\n    minDist = pabs.y;\n    normal = Vec3D.Y_AXIS.scale(psign.y);\n  }\n\n  if (pabs.z < minDist) {\n    normal = Vec3D.Z_AXIS.scale(psign.z);\n  }\n\n  return normal;\n};\n/**\n * Adjusts the box size and position such that it includes the given point.\n *\n * @param p\n *            point to include\n * @return itself\n */\n\n\nAABB.prototype.includePoint = function (p) {\n  this.min.minSelf(p);\n  this.max.maxSelf(p);\n  this.set(this.min.interpolateTo(this.max, 0.5));\n  this.extent.set(this.max.sub(this.min).scaleSelf(0.5));\n  return this;\n};\n/**\n* Checks if the box intersects the passed in one.\n*\n* @param box\n*            box to check\n* @return true, if boxes overlap\n*/\n\n\nAABB.prototype.intersectsBox = function (box) {\n  var t = box.sub(this);\n  return Math.abs(t.x) <= this.extent.x + box.extent.x && Math.abs(t.y) <= this.extent.y + box.extent.y && Math.abs(t.z) <= this.extent.z + box.extent.z;\n};\n/**\n * Calculates intersection with the given ray between a certain distance\n * interval.\n *\n * Ray-box intersection is using IEEE numerical properties to ensure the\n * test is both robust and efficient, as described in:\n *\n * Amy Williams, Steve Barrus, R. Keith Morley, and Peter Shirley: \"An\n * Efficient and Robust Ray-Box Intersection Algorithm\" Journal of graphics\n * tools, 10(1):49-54, 2005\n *\n * @param ray incident ray\n * @param minDist\n * @param maxDist\n * @return intersection point on the bounding box (only the first is\n *         returned) or null if no intersection\n */\n\n\nAABB.prototype.intersectsRay = function (ray, minDist, maxDist) {\n  var invDir = ray.getDirection().reciprocal();\n  var signDirX = invDir.x < 0;\n  var signDirY = invDir.y < 0;\n  var signDirZ = invDir.z < 0;\n  var bbox = signDirX ? this.max : this.min;\n  var tmin = (bbox.x - ray.x) * invDir.x;\n  bbox = signDirX ? this.min : this.max;\n  var tmax = (bbox.x - ray.x) * invDir.x;\n  bbox = signDirY ? this.max : this.min;\n  var tymin = (bbox.y - ray.y) * invDir.y;\n  bbox = signDirY ? this.min : this.max;\n  var tymax = (bbox.y - ray.y) * invDir.y;\n\n  if (tmin > tymax || tymin > tmax) {\n    return null;\n  }\n\n  if (tymin > tmin) {\n    tmin = tymin;\n  }\n\n  if (tymax < tmax) {\n    tmax = tymax;\n  }\n\n  bbox = signDirZ ? this.max : this.min;\n  var tzmin = (bbox.z - ray.z) * invDir.z;\n  bbox = signDirZ ? this.min : this.max;\n  var tzmax = (bbox.z - ray.z) * invDir.z;\n\n  if (tmin > tzmax || tzmin > tmax) {\n    return null;\n  }\n\n  if (tzmin > tmin) {\n    tmin = tzmin;\n  }\n\n  if (tzmax < tmax) {\n    tmax = tzmax;\n  }\n\n  if (tmin < maxDist && tmax > minDist) {\n    return ray.getPointAtDistance(tmin);\n  }\n\n  return undefined;\n};\n/**\n * @param c\n *            sphere centre\n * @param r\n *            sphere radius\n * @return true, if AABB intersects with sphere\n */\n\n\nAABB.prototype.intersectsSphere = function (c, r) {\n  if (arguments.length == 1) {\n    //must've been a sphere\n    r = c.radius;\n  }\n\n  var s,\n      d = 0; // find the square of the distance\n  // from the sphere to the box\n\n  if (c.x < this.min.x) {\n    s = c.x - this.min.x;\n    d = s * s;\n  } else if (c.x > this.max.x) {\n    s = c.x - this.max.x;\n    d += s * s;\n  }\n\n  if (c.y < this.min.y) {\n    s = c.y - this.min.y;\n    d += s * s;\n  } else if (c.y > this.max.y) {\n    s = c.y - this.max.y;\n    d += s * s;\n  }\n\n  if (c.z < this.min.z) {\n    s = c.z - this.min.z;\n    d += s * s;\n  } else if (c.z > this.max.z) {\n    s = c.z - this.max.z;\n    d += s * s;\n  }\n\n  return d <= r * r;\n};\n\nAABB.prototype.intersectsTriangle = function (tri) {\n  // use separating axis theorem to test overlap between triangle and box\n  // need to test for overlap in these directions:\n  //\n  // 1) the {x,y,z}-directions (actually, since we use the AABB of the\n  // triangle\n  // we do not even need to test these)\n  // 2) normal of the triangle\n  // 3) crossproduct(edge from tri, {x,y,z}-directin)\n  // this gives 3x3=9 more tests\n  var v0, v1, v2, normal, e0, e1, e2, f; // move everything so that the boxcenter is in (0,0,0)\n\n  v0 = tri.a.sub(this);\n  v1 = tri.b.sub(this);\n  v2 = tri.c.sub(this); // compute triangle edges\n\n  e0 = v1.sub(v0);\n  e1 = v2.sub(v1);\n  e2 = v0.sub(v2); // test the 9 tests first (this was faster)\n\n  f = e0.getAbs();\n\n  if (this.testAxis(e0.z, -e0.y, f.z, f.y, v0.y, v0.z, v2.y, v2.z, this.extent.y, this.extent.z)) {\n    return false;\n  }\n\n  if (this.testAxis(-e0.z, e0.x, f.z, f.x, v0.x, v0.z, v2.x, v2.z, this.extent.x, this.extent.z)) {\n    return false;\n  }\n\n  if (this.testAxis(e0.y, -e0.x, f.y, f.x, v1.x, v1.y, v2.x, v2.y, this.extent.x, this.extent.y)) {\n    return false;\n  }\n\n  f = e1.getAbs();\n\n  if (this.testAxis(e1.z, -e1.y, f.z, f.y, v0.y, v0.z, v2.y, v2.z, this.extent.y, this.extent.z)) {\n    return false;\n  }\n\n  if (this.testAxis(-e1.z, e1.x, f.z, f.x, v0.x, v0.z, v2.x, v2.z, this.extent.x, this.extent.z)) {\n    return false;\n  }\n\n  if (this.testAxis(e1.y, -e1.x, f.y, f.x, v0.x, v0.y, v1.x, v1.y, this.extent.x, this.extent.y)) {\n    return false;\n  }\n\n  f = e2.getAbs();\n\n  if (this.testAxis(e2.z, -e2.y, f.z, f.y, v0.y, v0.z, v1.y, v1.z, this.extent.y, this.extent.z)) {\n    return false;\n  }\n\n  if (this.testAxis(-e2.z, e2.x, f.z, f.x, v0.x, v0.z, v1.x, v1.z, this.extent.x, this.extent.z)) {\n    return false;\n  }\n\n  if (this.testAxis(e2.y, -e2.x, f.y, f.x, v1.x, v1.y, v2.x, v2.y, this.extent.x, this.extent.y)) {\n    return false;\n  } // first test overlap in the {x,y,z}-directions\n  // find min, max of the triangle each direction, and test for overlap in\n  // that direction -- this is equivalent to testing a minimal AABB around\n  // the triangle against the AABB\n  // test in X-direction\n\n\n  if (mathUtils.min(v0.x, v1.x, v2.x) > this.extent.x || mathUtils.max(v0.x, v1.x, v2.x) < -this.extent.x) {\n    return false;\n  } // test in Y-direction\n\n\n  if (mathUtils.min(v0.y, v1.y, v2.y) > this.extent.y || mathUtils.max(v0.y, v1.y, v2.y) < -this.extent.y) {\n    return false;\n  } // test in Z-direction\n\n\n  if (mathUtils.min(v0.z, v1.z, v2.z) > this.extent.z || mathUtils.max(v0.z, v1.z, v2.z) < -this.extent.z) {\n    return false;\n  } // test if the box intersects the plane of the triangle\n  // compute plane equation of triangle: normal*x+d=0\n\n\n  normal = e0.cross(e1);\n  var d = -normal.dot(v0);\n\n  if (!this.planeBoxOverlap(normal, d, this.extent)) {\n    return false;\n  }\n\n  return true;\n};\n\nAABB.prototype.planeBoxOverlap = function (normal, d, maxbox) {\n  var vmin = new Vec3D();\n  var vmax = new Vec3D();\n\n  if (normal.x > 0.0) {\n    vmin.x = -maxbox.x;\n    vmax.x = maxbox.x;\n  } else {\n    vmin.x = maxbox.x;\n    vmax.x = -maxbox.x;\n  }\n\n  if (normal.y > 0.0) {\n    vmin.y = -maxbox.y;\n    vmax.y = maxbox.y;\n  } else {\n    vmin.y = maxbox.y;\n    vmax.y = -maxbox.y;\n  }\n\n  if (normal.z > 0.0) {\n    vmin.z = -maxbox.z;\n    vmax.z = maxbox.z;\n  } else {\n    vmin.z = maxbox.z;\n    vmax.z = -maxbox.z;\n  }\n\n  if (normal.dot(vmin) + d > 0.0) {\n    return false;\n  }\n\n  if (normal.dot(vmax) + d >= 0.0) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Updates the position of the box in space and calls\n * {@link #updateBounds()} immediately\n *\n * @see geom.Vec3D#set(float, float, float)\n */\n\n\nAABB.prototype.set = function (a, b, c) {\n  if (internals.is.AABB(a)) {\n    this.extent.set(a.extent);\n    return Vec3D.set.apply(this, [a]);\n  }\n\n  if (internals.has.XYZ(a)) {\n    b = a.y;\n    c = a.z;\n    a = a.a;\n  }\n\n  this.x = a;\n  this.y = b;\n  this.z = c;\n  this.updateBounds();\n  return this;\n};\n\nAABB.prototype.setExtent = function (extent) {\n  this.extent = extent.copy();\n  return this.updateBounds();\n};\n\nAABB.prototype.testAxis = function (a, b, fa, fb, va, vb, wa, wb, ea, eb) {\n  var p0 = a * va + b * vb;\n  var p2 = a * wa + b * wb;\n  var min;\n  var max;\n\n  if (p0 < p2) {\n    min = p0;\n    max = p2;\n  } else {\n    min = p2;\n    max = p0;\n  }\n\n  var rad = fa * ea + fb * eb;\n  return min > rad || max < -rad;\n};\n\nAABB.prototype.toMesh = function (mesh) {\n  if (mesh === undefined) {\n    var TriangleMesh = require('./mesh/meshCommon').TriangleMesh;\n\n    mesh = new TriangleMesh(\"aabb\", 8, 12);\n  }\n\n  var a = this.min,\n      //new Vec3D(this.min.x,this.max.y,this.max.z),\n  g = this.max,\n      //new Vec3D(this.max.x,this.max.y,this.max.z),\n  b = new Vec3D(a.x, a.y, g.z),\n      c = new Vec3D(g.x, a.y, g.z),\n      d = new Vec3D(g.x, a.y, a.z),\n      e = new Vec3D(a.x, g.y, a.z),\n      f = new Vec3D(a.x, g.y, g.z),\n      h = new Vec3D(g.x, g.y, a.z),\n      ua = new Vec2D(0, 0),\n      ub = new Vec2D(1, 0),\n      uc = new Vec2D(1, 1),\n      ud = new Vec2D(0, 1); // left\n\n  mesh.addFace(a, b, f, ud, uc, ub);\n  mesh.addFace(a, f, e, ud, ub, ua); // front\n\n  mesh.addFace(b, c, g, ud, uc, ub);\n  mesh.addFace(b, g, f, ud, ub, ua); // right\n\n  mesh.addFace(c, d, h, ud, uc, ub);\n  mesh.addFace(c, h, g, ud, ub, ua); // back\n\n  mesh.addFace(d, a, e, ud, uc, ub);\n  mesh.addFace(d, e, h, ud, ub, ua); // top\n\n  mesh.addFace(e, f, h, ua, ud, ub);\n  mesh.addFace(f, g, h, ud, uc, ub); // bottom\n\n  mesh.addFace(a, d, b, ud, uc, ua);\n  mesh.addFace(b, d, c, ua, uc, ub);\n  return mesh;\n};\n\nAABB.prototype.toString = function () {\n  return \"<aabb> pos: \" + Vec3D.prototype.toString.call(this) + \" ext: \" + this.extent.toString();\n};\n/**\n* Updates the min/max corner points of the box. MUST be called after moving\n* the box in space by manipulating the public x,y,z coordinates directly.\n*\n* @return itself\n*/\n\n\nAABB.prototype.updateBounds = function () {\n  // this is check is necessary for the constructor\n  if (this.extent !== undefined) {\n    this.min = this.sub(this.extent);\n    this.max = this.add(this.extent);\n  }\n\n  return this;\n};\n\nmodule.exports = AABB;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/geom/AABB.js"],"names":["internals","require","Vec3D","Vec2D","mathUtils","AABB","a","b","undefined","call","setExtent","has","XYZ","is","getExtent","extend","fromMinMax","min","max","interpolateTo","sub","scaleSelf","prototype","containsPoint","p","isInAABB","copy","extent","getMax","getMin","getNormalForPoint","pabs","getAbs","psign","getSignum","normal","X_AXIS","scale","x","minDist","y","Y_AXIS","z","Z_AXIS","includePoint","minSelf","maxSelf","set","intersectsBox","box","t","Math","abs","intersectsRay","ray","maxDist","invDir","getDirection","reciprocal","signDirX","signDirY","signDirZ","bbox","tmin","tmax","tymin","tymax","tzmin","tzmax","getPointAtDistance","intersectsSphere","c","r","arguments","length","radius","s","d","intersectsTriangle","tri","v0","v1","v2","e0","e1","e2","f","testAxis","cross","dot","planeBoxOverlap","maxbox","vmin","vmax","apply","updateBounds","fa","fb","va","vb","wa","wb","ea","eb","p0","p2","rad","toMesh","mesh","TriangleMesh","g","e","h","ua","ub","uc","ud","addFace","toString","add","module","exports"],"mappings":"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","sourcesContent":["\n\nvar\tinternals = require('../internals'),\n\tVec3D = require('./Vec3D'),\n\tVec2D = require('./Vec2D'),\n\tmathUtils = require('../math/mathUtils');\n\n\n\n\n/**\n @class Axis-aligned Bounding Box\n @member\n */\nvar AABB = function(a,b){\n\tif(a === undefined){\n\t\tVec3D.call(this);\n\t\tthis.setExtent(new Vec3D());\n\t} else if(typeof(a) == \"number\") {\n\t\tVec3D.call(this,new Vec3D());\n\t\tthis.setExtent(a);\n\t} else if( internals.has.XYZ( a ) ) {\n\t\tVec3D.call(this,a);\n\t\tif(b === undefined && internals.is.AABB( a )) {\n\t\t\tthis.setExtent(a.getExtent());\n\t\t} else {\n\t\t\tif(typeof b == \"number\"){\n\t\t\t\tthis.setExtent(new Vec3D(b,b,b));\n\t\t\t}else { //should be an AABB\n\t\t\t\tthis.setExtent(b);\n\t\t\t}\n\t\t}\n\t}\n\n\n};\n\ninternals.extend(AABB,Vec3D);\n\nAABB.fromMinMax = function(min,max){\n\tvar a = Vec3D.min(min, max);\n\tvar b = Vec3D.max(min, max);\n\treturn new AABB( a.interpolateTo(b,0.5), b.sub(a).scaleSelf(0.5) );\n};\n\nAABB.prototype.containsPoint = function(p) {\n    return p.isInAABB(this);\n};\n\nAABB.prototype.copy = function() {\n    return new AABB(this);\n};\n\n/**\n * Returns the current box size as new Vec3D instance (updating this vector\n * will NOT update the box size! Use {@link #setExtent(ReadonlyVec3D)} for\n * those purposes)\n *\n * @return box size\n */\nAABB.prototype.getExtent = function() {\n   return this.extent.copy();\n};\n\nAABB.prototype.getMax = function() {\n   // return this.add(extent);\n   return this.max.copy();\n};\n\nAABB.prototype.getMin = function() {\n   return this.min.copy();\n};\n\nAABB.prototype.getNormalForPoint = function(p) {\n    p = p.sub(this);\n    var pabs = this.extent.sub(p.getAbs());\n    var psign = p.getSignum();\n    var normal = Vec3D.X_AXIS.scale(psign.x);\n    var minDist = pabs.x;\n    if (pabs.y < minDist) {\n        minDist = pabs.y;\n        normal = Vec3D.Y_AXIS.scale(psign.y);\n    }\n    if (pabs.z < minDist) {\n        normal = Vec3D.Z_AXIS.scale(psign.z);\n    }\n    return normal;\n};\n\n/**\n * Adjusts the box size and position such that it includes the given point.\n *\n * @param p\n *            point to include\n * @return itself\n */\nAABB.prototype.includePoint = function(p) {\n    this.min.minSelf(p);\n    this.max.maxSelf(p);\n    this.set(this.min.interpolateTo(this.max, 0.5));\n    this.extent.set(this.max.sub(this.min).scaleSelf(0.5));\n    return this;\n};\n\n/**\n* Checks if the box intersects the passed in one.\n*\n* @param box\n*            box to check\n* @return true, if boxes overlap\n*/\nAABB.prototype.intersectsBox = function(box) {\n    var t = box.sub(this);\n    return Math.abs(t.x) <= (this.extent.x + box.extent.x) && Math.abs(t.y) <= (this.extent.y + box.extent.y) && Math.abs(t.z) <= (this.extent.z + box.extent.z);\n};\n\n/**\n * Calculates intersection with the given ray between a certain distance\n * interval.\n *\n * Ray-box intersection is using IEEE numerical properties to ensure the\n * test is both robust and efficient, as described in:\n *\n * Amy Williams, Steve Barrus, R. Keith Morley, and Peter Shirley: \"An\n * Efficient and Robust Ray-Box Intersection Algorithm\" Journal of graphics\n * tools, 10(1):49-54, 2005\n *\n * @param ray incident ray\n * @param minDist\n * @param maxDist\n * @return intersection point on the bounding box (only the first is\n *         returned) or null if no intersection\n */\n\nAABB.prototype.intersectsRay = function(ray, minDist, maxDist) {\n    var invDir = ray.getDirection().reciprocal();\n    var signDirX = invDir.x < 0;\n    var signDirY = invDir.y < 0;\n    var signDirZ = invDir.z < 0;\n    var bbox = signDirX ? this.max : this.min;\n    var tmin = (bbox.x - ray.x) * invDir.x;\n    bbox = signDirX ? this.min : this.max;\n    var tmax = (bbox.x - ray.x) * invDir.x;\n    bbox = signDirY ? this.max : this.min;\n    var tymin = (bbox.y - ray.y) * invDir.y;\n    bbox = signDirY ? this.min : this.max;\n    var tymax = (bbox.y - ray.y) * invDir.y;\n    if ((tmin > tymax) || (tymin > tmax)) {\n        return null;\n    }\n    if (tymin > tmin) {\n        tmin = tymin;\n    }\n    if (tymax < tmax) {\n        tmax = tymax;\n    }\n    bbox = signDirZ ? this.max : this.min;\n    var tzmin = (bbox.z - ray.z) * invDir.z;\n    bbox = signDirZ ? this.min : this.max;\n    var tzmax = (bbox.z - ray.z) * invDir.z;\n    if ((tmin > tzmax) || (tzmin > tmax)) {\n        return null;\n    }\n    if (tzmin > tmin) {\n        tmin = tzmin;\n    }\n    if (tzmax < tmax) {\n        tmax = tzmax;\n    }\n    if ((tmin < maxDist) && (tmax > minDist)) {\n        return ray.getPointAtDistance(tmin);\n    }\n    return undefined;\n};\n\n/**\n * @param c\n *            sphere centre\n * @param r\n *            sphere radius\n * @return true, if AABB intersects with sphere\n */\n\nAABB.prototype.intersectsSphere = function(c, r) {\n\tif(arguments.length == 1){ //must've been a sphere\n\t\tr = c.radius;\n\t}\n    var s,\n\t\td = 0;\n    // find the square of the distance\n    // from the sphere to the box\n    if (c.x < this.min.x) {\n        s = c.x - this.min.x;\n        d = s * s;\n    } else if (c.x > this.max.x) {\n        s = c.x - this.max.x;\n        d += s * s;\n    }\n\n    if (c.y < this.min.y) {\n        s = c.y - this.min.y;\n        d += s * s;\n    } else if (c.y > this.max.y) {\n        s = c.y - this.max.y;\n        d += s * s;\n    }\n\n    if (c.z < this.min.z) {\n        s = c.z - this.min.z;\n        d += s * s;\n    } else if (c.z > this.max.z) {\n        s = c.z - this.max.z;\n        d += s * s;\n    }\n\n    return d <= r * r;\n};\n\nAABB.prototype.intersectsTriangle = function(tri) {\n\t// use separating axis theorem to test overlap between triangle and box\n\t// need to test for overlap in these directions:\n\t//\n\t// 1) the {x,y,z}-directions (actually, since we use the AABB of the\n\t// triangle\n\t// we do not even need to test these)\n\t// 2) normal of the triangle\n\t// 3) crossproduct(edge from tri, {x,y,z}-directin)\n\t// this gives 3x3=9 more tests\n\tvar v0,\n\t\tv1,\n\t\tv2,\n\t\tnormal,\n\t\te0,\n\t\te1,\n\t\te2,\n\t\tf;\n\n\t// move everything so that the boxcenter is in (0,0,0)\n\tv0 = tri.a.sub(this);\n\tv1 = tri.b.sub(this);\n\tv2 = tri.c.sub(this);\n\n\t// compute triangle edges\n\te0 = v1.sub(v0);\n\te1 = v2.sub(v1);\n\te2 = v0.sub(v2);\n\n\t// test the 9 tests first (this was faster)\n\tf = e0.getAbs();\n\tif (this.testAxis(e0.z, -e0.y, f.z, f.y, v0.y, v0.z, v2.y, v2.z, this.extent.y, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(-e0.z, e0.x, f.z, f.x, v0.x, v0.z, v2.x, v2.z, this.extent.x, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(e0.y, -e0.x, f.y, f.x, v1.x, v1.y, v2.x, v2.y, this.extent.x, this.extent.y)) {\n\t\treturn false;\n\t}\n\n\tf = e1.getAbs();\n\tif (this.testAxis(e1.z, -e1.y, f.z, f.y, v0.y, v0.z, v2.y, v2.z, this.extent.y, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(-e1.z, e1.x, f.z, f.x, v0.x, v0.z, v2.x, v2.z, this.extent.x, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(e1.y, -e1.x, f.y, f.x, v0.x, v0.y, v1.x, v1.y, this.extent.x, this.extent.y)) {\n\t\treturn false;\n\t}\n\n\tf = e2.getAbs();\n\tif (this.testAxis(e2.z, -e2.y, f.z, f.y, v0.y, v0.z, v1.y, v1.z, this.extent.y, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(-e2.z, e2.x, f.z, f.x, v0.x, v0.z, v1.x, v1.z, this.extent.x, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(e2.y, -e2.x, f.y, f.x, v1.x, v1.y, v2.x, v2.y, this.extent.x, this.extent.y)) {\n\t\treturn false;\n\t}\n\n\t// first test overlap in the {x,y,z}-directions\n\t// find min, max of the triangle each direction, and test for overlap in\n\t// that direction -- this is equivalent to testing a minimal AABB around\n\t// the triangle against the AABB\n\n\t// test in X-direction\n\tif (mathUtils.min(v0.x, v1.x, v2.x) > this.extent.x || mathUtils.max(v0.x, v1.x, v2.x) < -this.extent.x) {\n\t\treturn false;\n\t}\n\n\t// test in Y-direction\n\tif (mathUtils.min(v0.y, v1.y, v2.y) > this.extent.y || mathUtils.max(v0.y, v1.y, v2.y) < -this.extent.y) {\n\t\treturn false;\n\t}\n\n\t// test in Z-direction\n\tif (mathUtils.min(v0.z, v1.z, v2.z) > this.extent.z || mathUtils.max(v0.z, v1.z, v2.z) < -this.extent.z) {\n\t\treturn false;\n\t}\n\n\t// test if the box intersects the plane of the triangle\n\t// compute plane equation of triangle: normal*x+d=0\n\tnormal = e0.cross(e1);\n\tvar d = -normal.dot(v0);\n\tif (!this.planeBoxOverlap(normal, d, this.extent)) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\nAABB.prototype.planeBoxOverlap = function(normal, d, maxbox) {\n    var vmin = new Vec3D();\n    var vmax = new Vec3D();\n\n    if (normal.x > 0.0) {\n        vmin.x = -maxbox.x;\n        vmax.x = maxbox.x;\n    } else {\n        vmin.x = maxbox.x;\n        vmax.x = -maxbox.x;\n    }\n\n    if (normal.y > 0.0) {\n        vmin.y = -maxbox.y;\n        vmax.y = maxbox.y;\n    } else {\n        vmin.y = maxbox.y;\n        vmax.y = -maxbox.y;\n    }\n\n    if (normal.z > 0.0) {\n        vmin.z = -maxbox.z;\n        vmax.z = maxbox.z;\n    } else {\n        vmin.z = maxbox.z;\n        vmax.z = -maxbox.z;\n    }\n    if (normal.dot(vmin) + d > 0.0) {\n        return false;\n    }\n    if (normal.dot(vmax) + d >= 0.0) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Updates the position of the box in space and calls\n * {@link #updateBounds()} immediately\n *\n * @see geom.Vec3D#set(float, float, float)\n */\n\nAABB.prototype.set = function(a,b,c) {\n\t\tif(internals.is.AABB( a )) {\n\t\t\tthis.extent.set(a.extent);\n\t\t\treturn Vec3D.set.apply(this,[a]);\n\t\t}\n\t\tif( internals.has.XYZ( a )){\n\t\t\tb = a.y;\n\t\t\tc = a.z;\n\t\t\ta = a.a;\n\t\t}\n\t\tthis.x = a;\n\t\tthis.y = b;\n\t\tthis.z = c;\n\t\tthis.updateBounds();\n\t\treturn this;\n };\n\n\nAABB.prototype.setExtent = function(extent) {\n        this.extent = extent.copy();\n        return this.updateBounds();\n};\n\nAABB.prototype.testAxis = function(a, b, fa, fb, va, vb, wa, wb, ea, eb) {\n    var p0 = a * va + b * vb;\n    var p2 = a * wa + b * wb;\n    var min;\n\tvar max;\n    if (p0 < p2) {\n        min = p0;\n        max = p2;\n    } else {\n        min = p2;\n        max = p0;\n    }\n    var rad = fa * ea + fb * eb;\n    return (min > rad || max < -rad);\n};\n\nAABB.prototype.toMesh = function(mesh){\n\tif(mesh === undefined){\n\t\tvar TriangleMesh = require('./mesh/meshCommon').TriangleMesh;\n\t\tmesh = new TriangleMesh(\"aabb\",8,12);\n\t}\n\tvar a = this.min,//new Vec3D(this.min.x,this.max.y,this.max.z),\n\t\tg = this.max,//new Vec3D(this.max.x,this.max.y,this.max.z),\n\t\tb = new Vec3D(a.x, a.y, g.z),\n\t\tc = new Vec3D(g.x, a.y, g.z),\n\t\td = new Vec3D(g.x, a.y, a.z),\n\t\te = new Vec3D(a.x, g.y, a.z),\n\t\tf = new Vec3D(a.x, g.y, g.z),\n\t\th = new Vec3D(g.x, g.y, a.z),\n\t\tua = new Vec2D(0,0),\n\t\tub = new Vec2D(1,0),\n\t\tuc = new Vec2D(1,1),\n\t\tud = new Vec2D(0,1);\n\t// left\n\tmesh.addFace(a, b, f, ud, uc, ub);\n\tmesh.addFace(a, f, e, ud, ub, ua);\n\t// front\n\tmesh.addFace(b, c, g, ud, uc, ub);\n\tmesh.addFace(b, g, f, ud, ub, ua);\n\t// right\n\tmesh.addFace(c, d, h, ud, uc, ub);\n\tmesh.addFace(c, h, g, ud, ub, ua);\n\t// back\n\tmesh.addFace(d, a, e, ud, uc, ub);\n\tmesh.addFace(d, e, h, ud, ub, ua);\n\t// top\n\tmesh.addFace(e, f, h, ua, ud, ub);\n\tmesh.addFace(f, g, h, ud, uc, ub);\n\t// bottom\n\tmesh.addFace(a, d, b, ud, uc, ua);\n\tmesh.addFace(b, d, c, ua, uc, ub);\n\treturn mesh;\n\n};\n\n\nAABB.prototype.toString = function() {\n   return \"<aabb> pos: \"+Vec3D.prototype.toString.call(this)+\" ext: \"+this.extent.toString();\n};\n\n/**\n* Updates the min/max corner points of the box. MUST be called after moving\n* the box in space by manipulating the public x,y,z coordinates directly.\n*\n* @return itself\n*/\nAABB.prototype.updateBounds = function() {\n  // this is check is necessary for the constructor\n  if (this.extent !== undefined) {\n      this.min = this.sub(this.extent);\n      this.max = this.add(this.extent);\n  }\n  return this;\n};\n\nmodule.exports = AABB;\n\n\n"]},"metadata":{},"sourceType":"script"}