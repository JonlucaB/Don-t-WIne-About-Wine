{"ast":null,"code":"var numberComparator = require('../internals/numberComparator'),\n    is = require('../internals/is'),\n    mathUtils = require('../math/mathUtils'),\n    vectors = require('../geom/vectors'),\n    Vec2D = vectors.Vec2D,\n    Vec3D = vectors.Vec3D,\n    Hue = require('./Hue'); //private\n\n\nvar dec2hex = function decimalToHexString(number) {\n  if (number < 0) {\n    number = 0xFFFFFFFF + number + 1;\n  }\n\n  return number.toString(16);\n};\n/**\n @class Creates a new TColor instance\n @memberOf toxi.color\n */\n\n\nvar TColor = function (tcolor) {\n  this.rgb = [];\n  this.hsv = [];\n  this.cmyk = [];\n  this._alpha = 1.0;\n\n  if (tcolor !== undefined) {\n    var buffer = tcolor.toCMYKAArray();\n    this.cmyk = buffer.splice(0, 4);\n    this.hsv = tcolor.toHSVAArray().splice(0, 3);\n    this.rgb = tcolor.toRGBAArray().splice(0, 3);\n    this._alpha = tcolor._alpha;\n  }\n};\n\nTColor.prototype = {\n  add: function (c) {\n    return this.copy().addSelf(c);\n  },\n  addSelf: function (c) {\n    this.rgb[0] = mathUtils.min(this.rgb[0] + c.rgb[0], 1);\n    this.rgb[1] = mathUtils.min(this.rgb[1] + c.rgb[1], 1);\n    this.rgb[2] = mathUtils.min(this.rgb[2] + c.rgb[2], 1);\n    return this.setRGB(this.rgb);\n  },\n\n  /**\n   * Changes the brightness of the color by the given amount in the direction\n   * towards either the black or white point (depending on if current\n   * brightness >= 50%)\n   *\n   * @param {Number} amount\n   * @return itself\n   */\n  adjustConstrast: function (amount) {\n    return this.hsv[2] < 0.5 ? this.darken(amount) : this.lighten(amount);\n  },\n\n  /**\n   * Adds the given HSV values as offsets to the current color. Hue will\n   * automatically wrap.\n   *\n   * @param h\n   * @param s\n   * @param v\n   * @return itself\n   */\n  adjustHSV: function (h, s, v) {\n    return this.setHSV([this.hsv[0] + h, this.hsv[1] + s, this.hsv[2] + v]);\n  },\n\n  /**\n   * Adds the given RGB values as offsets to the current color. TColor will\n   * clip at black or white.\n   * @param r\n   * @param g\n   * @param b\n   * @return itself\n   */\n  adjustRGB: function (r, g, b) {\n    return this.setRGB([this.rgb[0] + r, this.rgb[1] + g, this.rgb[2] + b]);\n  },\n  alpha: function () {\n    return this._alpha;\n  },\n\n  /**\n   * Rotates this color by a random amount (not exceeding the one specified)\n   * and creates variations in saturation and brightness based on the 2nd\n   * parameter.\n   * @param theta\n   *            max. rotation angle (in radians)\n   * @param delta\n   *            max. sat/bri variance\n   * @return itself\n   */\n  analog: function (theta, delta) {\n    var angle = mathUtils.degrees(theta);\n    this.rotateRYB(angle * mathUtils.normalizedRandom());\n    this.hsv[1] += delta * mathUtils.normalizedRandom();\n    this.hsv[2] += delta * mathUtils.normalizedRandom();\n    return this.setHSV(this.hsv);\n  },\n  //shouldnt this be this.cmyk[3]?\n  black: function () {\n    return this.cmyk[3];\n  },\n\n  /**\n   * Blends the color with the given one by the stated amount\n   * @param c\n   *            target color\n   * @param t\n   *            interpolation factor\n   * @return itself\n   */\n  blend: function (c, t) {\n    if (t === undefined) {\n      t = 0.5;\n    }\n\n    var crgb = c.toRGBAArray();\n    this.rgb[0] += (crgb[0] - this.rgb[0]) * t;\n    this.rgb[1] += (crgb[1] - this.rgb[1]) * t;\n    this.rgb[2] += (crgb[2] - this.rgb[2]) * t;\n    this._alpha += (c._alpha - this._alpha) * t;\n    return this.setRGB(this.rgb);\n  },\n  blue: function () {\n    return this.rgb[2];\n  },\n  brightness: function () {\n    return this.hsv[2];\n  },\n  complement: function () {\n    return this.rotateRYB(180);\n  },\n  copy: function () {\n    return new TColor(this);\n  },\n  cyan: function () {\n    return this.cmyk[0];\n  },\n  darken: function (step) {\n    this.hsv[2] = mathUtils.clip(this.hsv[2] - step, 0, 1);\n    return this.setHSV(this.hsv);\n  },\n\n  /**\n  Reduced the color's saturation by the given amount.\n  @param step\n  @return itself\n  */\n  desaturate: function (step) {\n    this.hsv[1] = mathUtils.clip(this.hsv[1] - step, 0, 1);\n    return this.setHSV(this.hsv);\n  },\n  differenceTo: function (c) {\n    return TColor.newRGB(Math.abs(this.rgb[0] - c.rgb[0]), Math.abs(this.rgb[1] - c.rgb[1]), Math.abs(this.rgb[2] - c.rgb[2]));\n  },\n  distanceToCMYK: function (c) {\n    var ccmyk = c.toCMYKAArray();\n    var dc = this.cmyk[0] - ccmyk[0];\n    var dm = this.cmyk[1] - ccmyk[1];\n    var dy = this.cmyk[2] - ccmyk[2];\n    var dk = this.cmyk[3] - ccmyk[3];\n    return Math.sqrt(dc * dc + dm * dm + dy * dy + dk * dk);\n  },\n  distanceToHSV: function (c) {\n    var hue = this.hsv[0] * mathUtils.TWO_PI;\n    var hue2 = c.hue() * mathUtils.TWO_PI;\n    var v1 = new Vec3D(mathUtils.cos(hue) * this.hsv[1], mathUtils.sin(hue) * this.hsv[1], this.hsv[2]);\n    var v2 = new Vec3D(mathUtils.cos(hue2) * c.saturation(), mathUtils.sin(hue2) * c.saturation(), c.brightness());\n    return v1.distanceTo(v2);\n  },\n  distanceToRGB: function (c) {\n    var crgb = c.toRGBAArray();\n    var dr = this.rgb[0] - crgb[0];\n    var dg = this.rgb[1] - crgb[1];\n    var db = this.rgb[2] - crgb[2];\n    return Math.sqrt(dr * dr + dg * dg + db * db);\n  },\n  equals: function (o) {\n    if (is.TColor(o)) {\n      var c = o;\n      var dr = c.rgb[0] - this.rgb[0];\n      var dg = c.rgb[1] - this.rgb[1];\n      var db = c.rgb[2] - this.rgb[2];\n\n      var da = c.alpha() - this._alpha;\n\n      var d = Math.sqrt(dr * dr + dg * dg + db * db + da * da);\n      return d < TColor.EPS;\n    }\n\n    return false;\n  },\n  getAnalog: function (theta, delta) {\n    return new TColor(this).analog(theta, delta);\n  },\n  getBlended: function (c, t) {\n    return new TColor(this).blend(c, t);\n  },\n  getClosestHue: function (primaryOnly) {\n    return Hue.getClosest(this.hsv[0], primaryOnly === true);\n  },\n  getComplement: function () {\n    return new TColor(this).complement();\n  },\n  getComponentValue: function (criteria) {\n    return criteria.getComponentValueFor(this);\n  },\n  getDarkened: function (step) {\n    return new TColor(this).darken(step);\n  },\n  getDesaturated: function (step) {\n    return new TColor(this).desaturate(step);\n  },\n  getDifferenceTo: function (c) {\n    return this.copy().differenceTo(c);\n  },\n  getInverted: function () {\n    return new TColor(this).invert();\n  },\n  getLightened: function (step) {\n    return new TColor(this).lighten(step);\n  },\n  getRotatedRYB: function (theta) {\n    return new TColor(this).rotateRYB(theta);\n  },\n  getSaturated: function (step) {\n    return new TColor(this).saturate(step);\n  },\n  green: function () {\n    return this.rgb[1];\n  },\n  hue: function () {\n    return this.hsv[0];\n  },\n  invert: function () {\n    this.rgb[0] = 1 - this.rgb[0];\n    this.rgb[1] = 1 - this.rgb[1];\n    this.rgb[2] = 1 - this.rgb[2];\n    return this.setRGB(this.rgb);\n  },\n  isBlack: function () {\n    return this.rgb[0] <= TColor.BLACK_POINT && this.rgb[0] === this.rgb[1] && this.rgb[0] === this.rgb[2];\n  },\n  isGrey: function () {\n    return this.hsv[1] < TColor.GREY_THRESHOLD;\n  },\n\n  /*\n  isPrimary:function() {\n  \treturn Hue.isPrimary(this.hsv[0]);\n  },*/\n  isWhite: function () {\n    return this.rgb[0] >= TColor.WHITE_POINT && this.rgb[0] === this.rgb[1] && this.rgb[0] === this.rgb[2];\n  },\n  lighten: function (step) {\n    this.hsv[2] = mathUtils.clip(this.hsv[2] + step, 0, 1);\n    return this.setHSV(this.hsv);\n  },\n  luminance: function () {\n    return this.rgb[0] * 0.299 + this.rgb[1] * 0.587 + this.rgb[2] * 0.114;\n  },\n  magenta: function () {\n    return this.cmyk[1];\n  },\n  red: function () {\n    return this.rgb[0];\n  },\n  rotateRYB: function (theta) {\n    var deg = parseInt(mathUtils.degrees(theta), 10),\n        h = this.hsv[0] * 360,\n        i = 0,\n        p,\n        q;\n    theta %= 360;\n    var resultHue = 0;\n\n    for (i = 0; i < TColor.RYB_WHEEL.length - 1; i++) {\n      p = TColor.RYB_WHEEL[i];\n      q = TColor.RYB_WHEEL[i + 1];\n\n      if (q.y < p.y) {\n        q.y += 360;\n      }\n\n      if (p.y <= h && h <= q.y) {\n        resultHue = p.x + (q.x - p.x) * (h - p.y) / (q.y - p.y);\n        break;\n      }\n    } // And the user-given angle (e.g. complement).\n\n\n    resultHue = (resultHue + theta) % 360; // For the given angle, find out what hue is\n    // located there on the artistic color wheel.\n\n    for (i = 0; i < TColor.RYB_WHEEL.length - 1; i++) {\n      p = TColor.RYB_WHEEL[i];\n      q = TColor.RYB_WHEEL[i + 1];\n\n      if (q.y < p.y) {\n        q.y += 360;\n      }\n\n      if (p.x <= resultHue && resultHue <= q.x) {\n        h = p.y + (q.y - p.y) * (resultHue - p.x) / (q.x - p.x);\n        break;\n      }\n    }\n\n    this.hsv[0] = h % 360 / 360.0;\n    return this.setHSV(this.hsv);\n  },\n  saturate: function (step) {\n    this.hsv[1] = mathUtils.clip(this.hsv[1] + step, 0, 1);\n    return this.setHSV(this.hsv);\n  },\n  saturation: function () {\n    return this.hsv[1];\n  },\n  setAlpha: function (alpha) {\n    this._alpha = alpha;\n    return this;\n  },\n  setARGB: function (argb) {\n    this.setRGB((argb >> 16 & 0xff) * TColor.INV8BIT, (argb >> 8 & 0xff) * TColor.INV8BIT, (argb & 0xff) * TColor.INV8BIT);\n    this._alpha = (argb >>> 24) * TColor.INV8BIT;\n    return this;\n  },\n  setBlack: function (val) {\n    this.cmyk[3] = val;\n    return this.setCMYK(this.cmyk);\n  },\n  setBlue: function (blue) {\n    this.rgb[2] = blue;\n    return this.setRGB(this.rgb);\n  },\n  setBrightness: function (brightness) {\n    this.hsv[2] = mathUtils.clip(brightness, 0, 1);\n    return this.setHSV(this.hsv);\n  },\n  setCMYK: function (c, m, y, k) {\n    //if it was passed in as an array instead of separate values\n    if (is.Array(c)) {\n      m = c[1];\n      y = c[2];\n      k = c[3];\n      c = c[0];\n    }\n\n    this.cmyk[0] = c;\n    this.cmyk[1] = m;\n    this.cmyk[2] = y;\n    this.cmyk[3] = k;\n    this.rgb = TColor.cmykToRGB(this.cmyk[0], this.cmyk[1], this.cmyk[2], this.cmyk[3]);\n    this.hsv = TColor.rgbToHSV(this.rgb[0], this.rgb[1], this.rgb[2]);\n    return this;\n  },\n  setComponent: function (criteria, val) {\n    criteria.setComponentValueFor(this, val);\n    return this;\n  },\n  setCyan: function (val) {\n    this.cmyk[0] = val;\n    return this.setCMYK(this.cmyk);\n  },\n  setGreen: function (green) {\n    this.rgb[1] = green;\n    return this.setRGB(this.rgb);\n  },\n  setHSV: function (h, s, v) {\n    if (is.Array(h)) {\n      s = h[1];\n      v = h[2];\n      h = h[0];\n    }\n\n    var newHSV = [h, s, v];\n    this.hsv[0] = newHSV[0] % 1;\n\n    if (this.hsv[0] < 0) {\n      this.hsv[0]++;\n    }\n\n    this.hsv[1] = mathUtils.clip(newHSV[1], 0, 1);\n    this.hsv[2] = mathUtils.clip(newHSV[2], 0, 1);\n    this.rgb = TColor.hsvToRGB(this.hsv[0], this.hsv[1], this.hsv[2]);\n    this.cmyk = TColor.rgbToCMYK(this.rgb[0], this.rgb[1], this.rgb[2]);\n    return this;\n  },\n  setHue: function (hue) {\n    hue %= 1.0;\n\n    if (hue < 0.0) {\n      hue++;\n    }\n\n    this.hsv[0] = hue;\n    return this.setHSV(this.hsv);\n  },\n  setMagenta: function (val) {\n    this.cmyk[1] = val;\n    return this.setCMYK(this.cmyk);\n  },\n  setRed: function (red) {\n    this.rgb[0] = red;\n    return this.setRGB(this.rgb);\n  },\n  setRGB: function (r, g, b) {\n    if (is.Array(r)) {\n      g = r[1];\n      b = r[2];\n      r = r[0];\n    }\n\n    this.rgb[0] = mathUtils.clip(r, 0, 1);\n    this.rgb[1] = mathUtils.clip(g, 0, 1);\n    this.rgb[2] = mathUtils.clip(b, 0, 1);\n    this.cmyk = TColor.rgbToCMYK(this.rgb[0], this.rgb[1], this.rgb[2]);\n    this.hsv = TColor.rgbToHSV(this.rgb[0], this.rgb[1], this.rgb[2]);\n    return this;\n  },\n  setSaturation: function (saturation) {\n    this.hsv[1] = mathUtils.clip(saturation, 0, 1);\n    return this.setHSV(this.hsv);\n  },\n  setYellow: function (val) {\n    this.cmyk[2] = val;\n    return this.setCMYK(this.cmyk);\n  },\n  sub: function (c) {\n    return this.copy().subSelf(c);\n  },\n  subSelf: function (c) {\n    this.rgb[0] = mathUtils.max(this.rgb[0] - c.rgb[0], 0);\n    this.rgb[1] = mathUtils.max(this.rgb[1] - c.rgb[1], 0);\n    this.rgb[2] = mathUtils.max(this.rgb[2] - c.rgb[2], 0);\n    return this.setRGB(this.rgb);\n  },\n  toARGB: function () {\n    var r = parseInt(this.rgb[0] * 255, 10),\n        g = parseInt(this.rgb[1] * 255, 10),\n        b = parseInt(this.rgb[2] * 255, 10),\n        a = parseInt(this._alpha * 255, 10);\n    return r << 16 | g << 8 | b | a << 24;\n  },\n  toCMYKAArray: function (cmyka) {\n    if (cmyka === undefined) {\n      cmyka = [];\n    }\n\n    cmyka[0] = this.cmyk[0];\n    cmyka[1] = this.cmyk[1];\n    cmyka[2] = this.cmyk[2];\n    cmyka[3] = this.cmyk[3];\n    cmyka[4] = this._alpha;\n    return cmyka;\n  },\n  toHex: function () {\n    var hex = dec2hex(this.toARGB());\n\n    if (hex.length > 6) {\n      hex = hex.substring(2);\n    }\n\n    return hex;\n  },\n  toHexCSS: function () {\n    return \"#\" + this.toHex();\n  },\n  toHSVAArray: function (hsva) {\n    if (hsva === undefined) {\n      hsva = [];\n    }\n\n    hsva[0] = this.hsv[0];\n    hsva[1] = this.hsv[1];\n    hsva[2] = this.hsv[2];\n    hsva[3] = this._alpha;\n    return hsva;\n  },\n\n  /**\n  * to CSS's hsl() string\n  */\n  toHSLCSS: function () {\n    var hsv = this.hsv; //hue is 0 - 360\n\n    var h = Math.floor(hsv[0] * 360); //saturation & value/luminosity is 0-100 (%)\n\n    var s = Math.floor(hsv[1] * 100);\n    var v = Math.floor(hsv[2] * 100);\n    return \"hsl(\" + h + \",\" + s + \"%,\" + v + \"%)\";\n  },\n\n  /**\n   * to CSS's hsla() string\n   */\n  toHSLACSS: function () {\n    var hsv = this.hsv; //hue is 0 - 360\n\n    var h = Math.floor(hsv[0] * 360); //saturation & value/luminosity is 0-100 (%)\n\n    var s = Math.floor(hsv[1] * 100);\n    var v = Math.floor(hsv[2] * 100); //alpha stays in range 0 - 1\n\n    return \"hsla(\" + h + \",\" + s + \"%,\" + v + \"%,\" + this._alpha + \")\";\n  },\n\n  /**\n  * to integer for color\n  */\n  toInt: function () {\n    return Number('0x' + this.toHex());\n  },\n\n  /**\n   * to an Array of RGBA values\n   * @param rgba\n   * @param offset (optional)\n   * @return rgba array\n   */\n  toRGBAArray: function (rgba, offset) {\n    rgba = rgba || [];\n    offset = offset || 0;\n    rgba[offset++] = this.rgb[0];\n    rgba[offset++] = this.rgb[1];\n    rgba[offset++] = this.rgb[2];\n    rgba[offset] = this._alpha;\n    return rgba;\n  },\n\n  /**\n   * to an Array of RGBA decimal values, i.e. [255,255,255,255] for solid white\n   * @param {Array|TypedArray} [rgba] optionally pass in an array or a TypedArray such as Uint8ClampedArray\n   * @param {Number} [offset] index offset to put these values in the array\n   * @return {Array}\n   */\n  toRGBADecimalArray: function (rgba, offset) {\n    rgba = rgba || [];\n    offset = offset || 0;\n    rgba[offset++] = this.rgb[0] * 255;\n    rgba[offset++] = this.rgb[1] * 255;\n    rgba[offset++] = this.rgb[2] * 255;\n    rgba[offset] = this._alpha * 255;\n    return rgba;\n  },\n  toRGBCSS: function (asPercents) {\n    var rgb = this.rgb,\n        mult = asPercents ? 100 : 255,\n        u = asPercents ? '%' : '',\n        f = Math.floor;\n    return \"rgb(\" + f(rgb[0] * mult) + u + \",\" + f(rgb[1] * mult) + u + \",\" + f(rgb[2] * mult) + u + \")\";\n  },\n\n  /**\n   * to an rgba string valid for CSS Color Module's rgba()\n   * @param asPercents if true creates string based on percents rather than 0-255\n   */\n  toRGBACSS: function (asPercents) {\n    var rgb = this.rgb,\n        mult = asPercents ? 100 : 255,\n        u = asPercents ? '%' : '',\n        f = Math.floor;\n    return \"rgba(\" + f(rgb[0] * mult) + u + \",\" + f(rgb[1] * mult) + u + \",\" + f(rgb[2] * mult) + u + \",\" + this._alpha + \")\";\n  },\n  toString: function () {\n    return \"TColor: rgb: \" + this.rgb[0] + \", \" + this.rgb[1] + \", \" + this.rgb[2] + \" hsv: \" + this.hsv[0] + \",\" + this.hsv[1] + \",\" + this.hsv[2] + \" cmyk: \" + this.cmyk[0] + \", \" + this.cmyk[1] + \",\" + this.cmyk[2] + \",\" + this.cmyk[3] + \" alpha: \" + this._alpha;\n  },\n  yellow: function () {\n    return this.cmyk[2];\n  }\n};\nTColor.INV60DEGREES = 60.0 / 360;\nTColor.INV8BIT = 1.0 / 255;\nTColor.EPS = 0.001;\n/**\n * Maximum rgb component value for a color to be classified as black.\n * @see #isBlack()\n */\n\nTColor.BLACK_POINT = 0.08;\n/**\n * Minimum rgb component value for a color to be classified as white.\n * @see #isWhite()\n */\n\nTColor.WHITE_POINT = 1.0;\n/**\n * Maximum saturations value for a color to be classified as grey\n * @see #isGrey()\n */\n\nTColor.GREY_THRESHOLD = 0.01;\n/**\n * Converts CMYK floats into an RGB array.\n * @param c\n * @param m\n * @param y\n * @param k\n * @param rgb optional rgb array to populate\n * @return rgb array\n */\n\nTColor.cmykToRGB = function (c, m, y, k, rgb) {\n  if (rgb === undefined) {\n    rgb = [0, 0, 0];\n  }\n\n  rgb[0] = 1.0 - Math.min(1.0, c + k);\n  rgb[1] = 1.0 - Math.min(1.0, m + k);\n  rgb[2] = 1.0 - Math.min(1.0, y + k);\n  return rgb;\n};\n/**\n * Converts hex string into a RGB array.\n * @param hexRGB\n * @param rgb array optional\n * @return rgb array\n */\n\n\nTColor.hexToRGB = function (hexRGB, rgb) {\n  if (rgb === undefined) {\n    rgb = [];\n  } //var rgbInt = parseInt(hexRGB,16);\n\n\n  hexRGB = hexRGB.charAt(0) == \"#\" ? hexRGB.substring(1, 7) : hexRGB;\n  rgb[0] = parseInt(hexRGB.substring(0, 2), 16) * TColor.INV8BIT; //((rgbInt >> 16) & 0xff) * TColor.INV8BIT;\n\n  rgb[1] = parseInt(hexRGB.substring(2, 4), 16) * TColor.INV8BIT; //((rgbInt >> 8) & 0xff) * TColor.INV8BIT;\n\n  rgb[2] = parseInt(hexRGB.substring(4, 6), 16) * TColor.INV8BIT; //((rgbInt & 0xff) * TColor.INV8BIT);\n\n  return rgb;\n};\n/**\n * Converts HSV values into RGB array.\n * @param h\n * @param s\n * @param v\n * @param rgb array optional\n * @return rgb array\n */\n\n\nTColor.hsvToRGB = function (h, s, v, rgb) {\n  if (rgb === undefined) {\n    rgb = [];\n  }\n\n  if (s === 0.0) {\n    rgb[0] = rgb[1] = rgb[2] = v;\n  } else {\n    h /= TColor.INV60DEGREES;\n    var i = parseInt(h, 10),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - s * f),\n        t = v * (1 - s * (1 - f));\n\n    if (i === 0) {\n      rgb[0] = v;\n      rgb[1] = t;\n      rgb[2] = p;\n    } else if (i == 1) {\n      rgb[0] = q;\n      rgb[1] = v;\n      rgb[2] = p;\n    } else if (i == 2) {\n      rgb[0] = p;\n      rgb[1] = v;\n      rgb[2] = t;\n    } else if (i == 3) {\n      rgb[0] = p;\n      rgb[1] = q;\n      rgb[2] = v;\n    } else if (i == 4) {\n      rgb[0] = t;\n      rgb[1] = p;\n      rgb[2] = v;\n    } else {\n      rgb[0] = v;\n      rgb[1] = p;\n      rgb[2] = q;\n    }\n  }\n\n  return rgb;\n};\n/**\n * Converts CIE Lab to RGB components.\n * First we have to convert to XYZ color space. Conversion involves using a\n * white point, in this case D65 which represents daylight illumination.\n * Algorithm adopted from: http://www.easyrgb.com/math.php\n * @param l\n * @param a\n * @param b\n * @param rgb\n * @return rgb array\n */\n\n\nTColor.labToRGB = function (l, a, b, rgb) {\n  if (rgb === undefined) {\n    rgb = [];\n  }\n\n  var y = (l + 16) / 116.0,\n      x = a / 500.0 + y,\n      z = y - b / 200.0,\n      i = 0;\n  rgb[0] = x;\n  rgb[1] = y;\n  rgb[2] = z;\n\n  for (i = 0; i < 3; i++) {\n    var p = Math.pow(rgb[i], 3);\n\n    if (p > 0.008856) {\n      rgb[i] = p;\n    } else {\n      rgb[i] = (rgb[i] - 16 / 116.0) / 7.787;\n    }\n  } // Observer = 2, Illuminant = D65\n\n\n  x = rgb[0] * 0.95047;\n  y = rgb[1];\n  z = rgb[2] * 1.08883;\n  rgb[0] = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  rgb[1] = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  rgb[2] = x * 0.0557 + y * -0.2040 + z * 1.0570;\n  var tpow = 1 / 2.4;\n\n  for (i = 0; i < 3; i++) {\n    if (rgb[i] > 0.0031308) {\n      rgb[i] = 1.055 * Math.pow(rgb[i], tpow) - 0.055;\n    } else {\n      rgb[i] = 12.92 * rgb[i];\n    }\n  }\n\n  return rgb;\n};\n/**\n * Factory method. Creates new color from ARGB int.\n * @param argb\n * @return new color\n */\n\n\nTColor.newARGB = function (argb) {\n  return TColor.newRGBA((argb >> 16 & 0xff) * TColor.INV8BIT, (argb >> 8 & 0xff) * TColor.INV8BIT, (argb & 0xff) * TColor.INV8BIT, (argb >>> 24) * TColor.INV8BIT);\n};\n/**\nFactory method. Creates new color from CMYK values.\n@param c\n@param m\n@param y\n@param k\n@return new color\n*/\n\n\nTColor.newCMYK = function (c, m, y, k) {\n  return TColor.newCMYKA(c, m, y, k, 1);\n};\n/**\nFactory method. Creates new color from CMYK + alpha values.\n@param c\n@param m\n@param y\n@param k\n@param a\n@return new color\n*/\n\n\nTColor.newCMYKA = function (c, m, y, k, a) {\n  var col = new TColor();\n  col.setCMYK([c, m, y, k]);\n  col.setAlpha(mathUtils.clip(a, 0, 1));\n  return col;\n};\n/**\nFactory method. Creats a new color from any CSS color values\n@param {String} css value\n@return new color\n*/\n\n\nTColor.newCSS = function (css) {\n  //remove all spaces\n  while (css.indexOf(' ') > -1) {\n    css = css.replace(' ', '');\n  }\n\n  css = css.toLowerCase();\n\n  function digits(colorFnStr) {\n    //hack off the trailing )\n    var str = css.substr(0, css.length - 1); //hack off rgb(, rgba(, hsl(, hsla(\n\n    return str.substr(colorFnStr.length + 1, str.length).split(',');\n  }\n\n  function makeNumbers(digits) {\n    var i = 0,\n        l = digits.length;\n\n    for (i = 0; i < l; i++) {\n      //cast to numbers from Strings\n      digits[i] = Number(digits[i]);\n    }\n\n    return digits;\n  }\n\n  var conversions = {\n    '#': function () {\n      return TColor.newHex(css.substr(1, css.length));\n    },\n    'rgba': function () {\n      var vals = makeNumbers(digits('rgba'));\n      return TColor.newRGBA(vals[0] / 255, vals[1] / 255, vals[2] / 255, vals[3]);\n    },\n    'rgb': function () {\n      var vals = makeNumbers(digits('rgb'));\n      return TColor.newRGBA(vals[0] / 255, vals[1] / 255, vals[2] / 255, 1.0);\n    },\n    'hsla': function (vals) {\n      vals = vals || digits('hsla');\n      vals[0] = Number(vals[0]) / 360;\n      vals[1] = Number(vals[1].substr(0, vals[1].length - 1)) / 100;\n      vals[2] = Number(vals[2].substr(0, vals[2].length - 1)) / 100;\n      vals[3] = Number(vals[3]);\n      return TColor.newHSVA(vals[0], vals[1], vals[2], vals[3]);\n    },\n    'hsl': function () {\n      var vals = digits('hsl');\n      vals.push(1.0);\n      return conversions.hsla(vals);\n    }\n  }; //if it was an x11 name return a copy\n\n  if (TColor.X11[css] !== undefined) {\n    return TColor.X11[css].copy();\n  } //else get it from hex or color function\n\n\n  for (var method in conversions) {\n    if (css.indexOf(method) > -1) {\n      return conversions[method]();\n    }\n  }\n};\n/**\nFactory method. Creates a new shade of gray + alpha.\n@param gray\n@return new color.\n*/\n\n\nTColor.newGray = function (gray) {\n  return TColor.newGrayAlpha(gray, 1);\n};\n\nTColor.newGrayAlpha = function (gray, alpha) {\n  var c = new TColor();\n  c.setRGB([gray, gray, gray]);\n  c.setAlpha(alpha);\n  return c;\n};\n/**\nFactory method. New color from hex string.\n@param hexRGB\n@return new color\n*/\n\n\nTColor.newHex = function (hexRGB) {\n  var c = new TColor();\n  c.setRGB(TColor.hexToRGB(hexRGB));\n  c.setAlpha(1);\n  return c;\n};\n/**\nFactory method. New color from hsv values.\n@param h\n@param s\n@param v\n@return new color\n*/\n\n\nTColor.newHSV = function (h, s, v) {\n  return TColor.newHSVA(h, s, v, 1);\n};\n\nTColor.newHSVA = function (h, s, v, a) {\n  var c = new TColor();\n  c.setHSV(h, s, v);\n  c.setAlpha(mathUtils.clip(a, 0, 1));\n  return c;\n};\n/**\nFactory method. Creates new random color. Alpha is always 1.0.\n@return random color\n*/\n\n\nTColor.newRandom = function () {\n  return TColor.newRGBA(Math.random(), Math.random(), Math.random(), 1);\n};\n/**\nFactory method. Creates new color from RGB values. Alpha is set to 1.0.\n@param r\n@param g\n@param b\n@return new color\n*/\n\n\nTColor.newRGB = function (r, g, b) {\n  return TColor.newRGBA(r, g, b, 1);\n};\n\nTColor.newRGBA = function (r, g, b, a) {\n  var c = new TColor();\n  c.setRGB(r, g, b);\n  c.setAlpha(mathUtils.clip(a, 0, 1));\n  return c;\n};\n/**\nConverts the RGB values into a CMYK array.\n@param r\n@param g\n@param b\n@param cmyk array optional\n@return cmyk array\n*/\n\n\nTColor.rgbToCMYK = function (r, g, b, cmyk) {\n  if (cmyk === undefined) {\n    cmyk = [];\n  }\n\n  cmyk[0] = 1 - r;\n  cmyk[1] = 1 - g;\n  cmyk[2] = 1 - b;\n  cmyk[3] = mathUtils.min(cmyk[0], cmyk[1], cmyk[2]);\n  cmyk[0] = mathUtils.clip(cmyk[0] - cmyk[3], 0, 1);\n  cmyk[1] = mathUtils.clip(cmyk[1] - cmyk[3], 0, 1);\n  cmyk[2] = mathUtils.clip(cmyk[2] - cmyk[3], 0, 1);\n  cmyk[3] = mathUtils.clip(cmyk[3], 0, 1);\n  return cmyk;\n};\n/**\nFormats the RGB float values into hex integers.\n@param r\n@param g\n@param b\n@return hex string\n*/\n\n\nTColor.rgbToHex = function (r, g, b) {\n  var hex = dec2hex(mathUtils.clip(r, 0, 1) * 0xff) + dec2hex(mathUtils.clip(g, 0, 1) * 0xff) + dec2hex(mathUtils.clip(b, 0, 1) * 0xff);\n  return hex;\n};\n/**\nConverts the RGB values into an HSV array.\n@param r\n@param g\n@param b\n@param hsv optional\n@return hsv array\n*/\n\n\nTColor.rgbToHSV = function (r, g, b, hsv) {\n  if (hsv === undefined) {\n    hsv = [];\n  }\n\n  var h = 0,\n      s = 0,\n      v = mathUtils.max(r, g, b),\n      d = v - mathUtils.min(r, g, b);\n\n  if (v !== 0) {\n    s = d / v;\n  }\n\n  if (s !== 0) {\n    if (numberComparator(r, v) === 0) {\n      h = (g - b) / d;\n    } else if (numberComparator(g, v) === 0) {\n      h = 2 + (b - r) / d;\n    } else {\n      h = 4 + (r - g) / d;\n    }\n  }\n\n  h *= TColor.INV60DEGREES;\n\n  if (h < 0) {\n    h += 1.0;\n  }\n\n  hsv[0] = h;\n  hsv[1] = s;\n  hsv[2] = v;\n  return hsv;\n};\n\nTColor.RED = TColor.newRGB(1, 0, 0);\nTColor.RYB_WHEEL = [new Vec2D(0, 0), new Vec2D(15, 8), new Vec2D(30, 17), new Vec2D(45, 26), new Vec2D(60, 34), new Vec2D(75, 41), new Vec2D(90, 48), new Vec2D(105, 54), new Vec2D(120, 60), new Vec2D(135, 81), new Vec2D(150, 103), new Vec2D(165, 123), new Vec2D(180, 138), new Vec2D(195, 155), new Vec2D(210, 171), new Vec2D(225, 187), new Vec2D(240, 204), new Vec2D(255, 219), new Vec2D(270, 234), new Vec2D(285, 251), new Vec2D(300, 267), new Vec2D(315, 282), new Vec2D(330, 298), new Vec2D(345, 329), new Vec2D(360, 0)];\nTColor.GREEN = TColor.newRGB(0, 1, 0);\nTColor.BLUE = TColor.newRGB(0, 0, 1);\nTColor.CYAN = TColor.newRGB(0, 1, 1);\nTColor.MAGENTA = TColor.newRGB(1, 0, 1);\nTColor.YELLOW = TColor.newRGB(1, 1, 0);\nTColor.BLACK = TColor.newRGB(0, 0, 0);\nTColor.WHITE = TColor.newRGB(1, 1, 1); //Generate a TColor for every X11 color\n\nTColor.X11 = {};\n\n(function () {\n  //RGB values for every X11 Color Name\n  //http://en.wikipedia.org/wiki/Web_colors\n  var x11 = {\n    indianred: [205, 92, 92],\n    lightcoral: [240, 128, 128],\n    salmon: [250, 128, 114],\n    darksalmon: [233, 150, 122],\n    lightsalmon: [255, 160, 122],\n    red: [255, 0, 0],\n    crimson: [220, 20, 60],\n    fireBrick: [178, 34, 34],\n    darkred: [139, 0, 0],\n    pink: [255, 192, 203],\n    lightpink: [255, 182, 193],\n    hotpink: [255, 105, 180],\n    deeppink: [255, 20, 147],\n    mediumvioletred: [199, 21, 133],\n    palevioletred: [219, 112, 147],\n    coral: [255, 127, 80],\n    tomato: [255, 99, 71],\n    orangered: [255, 69, 0],\n    darkorange: [255, 140, 0],\n    orange: [255, 165, 0],\n    gold: [255, 215, 0],\n    yellow: [255, 255, 0],\n    lightyellow: [255, 255, 224],\n    lemonchiffon: [255, 250, 205],\n    lightgoldenrodyellow: [250, 250, 210],\n    papayawhip: [255, 239, 213],\n    moccasin: [255, 228, 181],\n    peachpuff: [255, 218, 185],\n    palegoldenrod: [238, 232, 170],\n    khaki: [240, 230, 140],\n    darkkhaki: [189, 183, 107],\n    lavender: [230, 230, 250],\n    thistle: [216, 191, 216],\n    plum: [221, 160, 221],\n    violet: [238, 130, 238],\n    orchid: [218, 112, 214],\n    fuchsia: [255, 0, 255],\n    Magenta: [255, 0, 255],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    blueviolet: [138, 43, 226],\n    darkviolet: [148, 0, 211],\n    darkorchid: [153, 50, 204],\n    darkmagenta: [139, 0, 139],\n    purple: [128, 0, 128],\n    indigo: [75, 0, 130],\n    darkslateblue: [72, 61, 139],\n    slateblue: [106, 90, 205],\n    mediumslateblue: [123, 104, 238],\n    greenyellow: [173, 255, 47],\n    chartreuse: [127, 255, 0],\n    lawngreen: [124, 252, 0],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    palegreen: [152, 251, 152],\n    lightgreen: [144, 238, 144],\n    mediumspringgreen: [0, 250, 154],\n    springgreen: [0, 255, 127],\n    mediumseagreen: [60, 179, 113],\n    seagreen: [46, 139, 87],\n    forestgreen: [34, 139, 34],\n    green: [0, 128, 0],\n    darkgreen: [0, 100, 0],\n    yellowgreen: [154, 205, 50],\n    olivedrab: [107, 142, 35],\n    olive: [128, 128, 0],\n    darkolivegreen: [85, 107, 47],\n    mediumaquamarine: [102, 205, 170],\n    darkseagreen: [143, 188, 143],\n    lightseagreen: [32, 178, 170],\n    darkcyan: [0, 139, 139],\n    teal: [0, 128, 128],\n    aqua: [0, 255, 255],\n    cyan: [0, 255, 255],\n    lightcyan: [224, 255, 255],\n    paleturquoise: [175, 238, 238],\n    aquamarine: [127, 255, 212],\n    turquoise: [64, 224, 208],\n    mediumturquoise: [72, 209, 204],\n    darkturquoise: [0, 206, 209],\n    cadetblue: [95, 158, 160],\n    steelblue: [70, 130, 180],\n    lightsteelblue: [176, 196, 222],\n    powderblue: [176, 224, 230],\n    lightblue: [173, 216, 230],\n    skyblue: [135, 206, 235],\n    lightskyblue: [135, 206, 250],\n    deepskyblue: [0, 191, 255],\n    dodgerblue: [30, 144, 255],\n    cornflowerblue: [100, 149, 237],\n    royalblue: [65, 105, 225],\n    blue: [0, 0, 255],\n    mediumblue: [0, 0, 205],\n    darkblue: [0, 0, 139],\n    navy: [0, 0, 128],\n    midnightblue: [25, 25, 112],\n    cornsilk: [255, 248, 220],\n    blanchedalmond: [255, 235, 205],\n    bisque: [255, 228, 196],\n    navajowhite: [255, 222, 173],\n    wheat: [245, 222, 179],\n    burlywood: [222, 184, 135],\n    tan: [210, 180, 140],\n    rosybrown: [188, 143, 143],\n    sandybrown: [244, 164, 96],\n    goldenrod: [218, 165, 32],\n    darkgoldenrod: [184, 134, 11],\n    Peru: [205, 133, 63],\n    chocolate: [210, 105, 30],\n    saddlebrown: [139, 69, 19],\n    sienna: [160, 82, 45],\n    brown: [165, 42, 42],\n    maroon: [128, 0, 0],\n    white: [255, 255, 255],\n    snow: [255, 250, 250],\n    honeydew: [240, 255, 240],\n    mintcream: [245, 255, 250],\n    azure: [240, 255, 255],\n    aliceblue: [240, 248, 255],\n    ghostwhite: [248, 248, 255],\n    whitesmoke: [245, 245, 245],\n    seashell: [255, 245, 238],\n    beige: [245, 245, 220],\n    oldlace: [253, 245, 230],\n    floralwhite: [255, 250, 240],\n    ivory: [255, 255, 240],\n    antiquewhite: [250, 235, 215],\n    linen: [250, 240, 230],\n    lavenderblush: [255, 240, 245],\n    mistyrose: [255, 228, 225],\n    gainsboro: [220, 220, 220],\n    lightgray: [211, 211, 211],\n    silver: [192, 192, 192],\n    darkgray: [169, 169, 169],\n    gray: [128, 128, 128],\n    dimgray: [105, 105, 105],\n    lightslategray: [119, 136, 153],\n    slategray: [112, 128, 144],\n    darkslategray: [47, 79, 79],\n    black: [0, 0, 0],\n    bark: [64, 48, 33]\n  };\n  var name, clr;\n\n  for (name in x11) {\n    if (x11.hasOwnProperty(name)) {\n      clr = x11[name];\n      TColor.X11[name] = TColor.newRGB(clr[0] / 255, clr[1] / 255, clr[2] / 255); //for all of the grays duplicate with grey\n\n      if (name.indexOf('gray') >= 0) {\n        TColor.X11[name.replace('gray', 'grey')] = TColor.X11[name];\n      }\n    }\n  } //add `transparent`\n\n\n  TColor.X11.transparent = TColor.newRGBA(0, 0, 0, 0);\n})();\n\nmodule.exports = TColor;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/color/TColor.js"],"names":["numberComparator","require","is","mathUtils","vectors","Vec2D","Vec3D","Hue","dec2hex","decimalToHexString","number","toString","TColor","tcolor","rgb","hsv","cmyk","_alpha","undefined","buffer","toCMYKAArray","splice","toHSVAArray","toRGBAArray","prototype","add","c","copy","addSelf","min","setRGB","adjustConstrast","amount","darken","lighten","adjustHSV","h","s","v","setHSV","adjustRGB","r","g","b","alpha","analog","theta","delta","angle","degrees","rotateRYB","normalizedRandom","black","blend","t","crgb","blue","brightness","complement","cyan","step","clip","desaturate","differenceTo","newRGB","Math","abs","distanceToCMYK","ccmyk","dc","dm","dy","dk","sqrt","distanceToHSV","hue","TWO_PI","hue2","v1","cos","sin","v2","saturation","distanceTo","distanceToRGB","dr","dg","db","equals","o","da","d","EPS","getAnalog","getBlended","getClosestHue","primaryOnly","getClosest","getComplement","getComponentValue","criteria","getComponentValueFor","getDarkened","getDesaturated","getDifferenceTo","getInverted","invert","getLightened","getRotatedRYB","getSaturated","saturate","green","isBlack","BLACK_POINT","isGrey","GREY_THRESHOLD","isWhite","WHITE_POINT","luminance","magenta","red","deg","parseInt","i","p","q","resultHue","RYB_WHEEL","length","y","x","setAlpha","setARGB","argb","INV8BIT","setBlack","val","setCMYK","setBlue","setBrightness","m","k","Array","cmykToRGB","rgbToHSV","setComponent","setComponentValueFor","setCyan","setGreen","newHSV","hsvToRGB","rgbToCMYK","setHue","setMagenta","setRed","setSaturation","setYellow","sub","subSelf","max","toARGB","a","cmyka","toHex","hex","substring","toHexCSS","hsva","toHSLCSS","floor","toHSLACSS","toInt","Number","rgba","offset","toRGBADecimalArray","toRGBCSS","asPercents","mult","u","f","toRGBACSS","yellow","INV60DEGREES","hexToRGB","hexRGB","charAt","labToRGB","l","z","pow","tpow","newARGB","newRGBA","newCMYK","newCMYKA","col","newCSS","css","indexOf","replace","toLowerCase","digits","colorFnStr","str","substr","split","makeNumbers","conversions","newHex","vals","newHSVA","push","hsla","X11","method","newGray","gray","newGrayAlpha","newRandom","random","rgbToHex","RED","GREEN","BLUE","CYAN","MAGENTA","YELLOW","BLACK","WHITE","x11","indianred","lightcoral","salmon","darksalmon","lightsalmon","crimson","fireBrick","darkred","pink","lightpink","hotpink","deeppink","mediumvioletred","palevioletred","coral","tomato","orangered","darkorange","orange","gold","lightyellow","lemonchiffon","lightgoldenrodyellow","papayawhip","moccasin","peachpuff","palegoldenrod","khaki","darkkhaki","lavender","thistle","plum","violet","orchid","fuchsia","Magenta","mediumorchid","mediumpurple","blueviolet","darkviolet","darkorchid","darkmagenta","purple","indigo","darkslateblue","slateblue","mediumslateblue","greenyellow","chartreuse","lawngreen","lime","limegreen","palegreen","lightgreen","mediumspringgreen","springgreen","mediumseagreen","seagreen","forestgreen","darkgreen","yellowgreen","olivedrab","olive","darkolivegreen","mediumaquamarine","darkseagreen","lightseagreen","darkcyan","teal","aqua","lightcyan","paleturquoise","aquamarine","turquoise","mediumturquoise","darkturquoise","cadetblue","steelblue","lightsteelblue","powderblue","lightblue","skyblue","lightskyblue","deepskyblue","dodgerblue","cornflowerblue","royalblue","mediumblue","darkblue","navy","midnightblue","cornsilk","blanchedalmond","bisque","navajowhite","wheat","burlywood","tan","rosybrown","sandybrown","goldenrod","darkgoldenrod","Peru","chocolate","saddlebrown","sienna","brown","maroon","white","snow","honeydew","mintcream","azure","aliceblue","ghostwhite","whitesmoke","seashell","beige","oldlace","floralwhite","ivory","antiquewhite","linen","lavenderblush","mistyrose","gainsboro","lightgray","silver","darkgray","dimgray","lightslategray","slategray","darkslategray","bark","name","clr","hasOwnProperty","transparent","module","exports"],"mappings":"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","sourcesContent":["\n\nvar\tnumberComparator = require('../internals/numberComparator'),\n    is = require('../internals/is'),\n\tmathUtils = require('../math/mathUtils'),\n    vectors = require('../geom/vectors'),\n\tVec2D = vectors.Vec2D,\n\tVec3D = vectors.Vec3D,\n    Hue = require('./Hue');\n\n\n//private\nvar dec2hex = function decimalToHexString(number){\n\tif (number < 0){\n\t\tnumber = 0xFFFFFFFF + number + 1;\n\t}\n\n\treturn number.toString(16);\n};\n\n/**\n @class Creates a new TColor instance\n @memberOf toxi.color\n */\nvar\tTColor = function(tcolor){\n\tthis.rgb = [];\n\tthis.hsv = [];\n\tthis.cmyk = [];\n\tthis._alpha = 1.0;\n\tif(tcolor !== undefined){\n\t\tvar buffer = tcolor.toCMYKAArray();\n\t\tthis.cmyk = buffer.splice(0,4);\n\t\tthis.hsv = tcolor.toHSVAArray().splice(0,3);\n\t\tthis.rgb = tcolor.toRGBAArray().splice(0,3);\n\t\tthis._alpha = tcolor._alpha;\n\t}\n};\n\nTColor.prototype = {\n\n\tadd: function(c){\n\t\treturn this.copy().addSelf(c);\n\t},\n\n\taddSelf: function(c) {\n\t\tthis.rgb[0] = mathUtils.min(this.rgb[0] + c.rgb[0], 1);\n\t\tthis.rgb[1] = mathUtils.min(this.rgb[1] + c.rgb[1], 1);\n\t\tthis.rgb[2] = mathUtils.min(this.rgb[2] + c.rgb[2], 1);\n\t\treturn this.setRGB( this.rgb);\n\t},\n\n\t/**\n\t * Changes the brightness of the color by the given amount in the direction\n\t * towards either the black or white point (depending on if current\n\t * brightness >= 50%)\n\t *\n\t * @param {Number} amount\n\t * @return itself\n\t */\n\tadjustConstrast: function(amount) {\n\t\treturn this.hsv[2] < 0.5 ? this.darken(amount) : this.lighten(amount);\n\t},\n\n\n\t/**\n\t * Adds the given HSV values as offsets to the current color. Hue will\n\t * automatically wrap.\n\t *\n\t * @param h\n\t * @param s\n\t * @param v\n\t * @return itself\n\t */\n\tadjustHSV: function(h, s, v) {\n\t\treturn this.setHSV([ this.hsv[0] + h, this.hsv[1] + s, this.hsv[2] + v ]);\n\t},\n\n\t/**\n\t * Adds the given RGB values as offsets to the current color. TColor will\n\t * clip at black or white.\n\t * @param r\n\t * @param g\n\t * @param b\n\t * @return itself\n\t */\n\tadjustRGB: function(r, g,b) {\n\t\treturn this.setRGB([this.rgb[0] + r, this.rgb[1] + g, this.rgb[2] + b]);\n\t},\n\n\talpha:function(){\n\t\treturn this._alpha;\n\t},\n\n\t/**\n\t * Rotates this color by a random amount (not exceeding the one specified)\n\t * and creates variations in saturation and brightness based on the 2nd\n\t * parameter.\n\t * @param theta\n\t *            max. rotation angle (in radians)\n\t * @param delta\n\t *            max. sat/bri variance\n\t * @return itself\n\t */\n\tanalog: function(theta, delta) {\n\t\tvar angle = mathUtils.degrees(theta);\n\t\tthis.rotateRYB(angle * mathUtils.normalizedRandom());\n\t\tthis.hsv[1] += delta * mathUtils.normalizedRandom();\n\t\tthis.hsv[2] += delta * mathUtils.normalizedRandom();\n\t\treturn this.setHSV(this.hsv);\n\t},\n\n\t//shouldnt this be this.cmyk[3]?\n\tblack: function(){\n\t\treturn this.cmyk[3];\n\t},\n\t/**\n\t * Blends the color with the given one by the stated amount\n\t * @param c\n\t *            target color\n\t * @param t\n\t *            interpolation factor\n\t * @return itself\n\t */\n\tblend: function(c, t) {\n\t\tif(t === undefined) { t = 0.5; }\n\t\tvar crgb = c.toRGBAArray();\n\t\tthis.rgb[0] += (crgb[0] - this.rgb[0]) * t;\n\t\tthis.rgb[1] += (crgb[1] - this.rgb[1]) * t;\n\t\tthis.rgb[2] += (crgb[2] - this.rgb[2]) * t;\n\t\tthis._alpha += (c._alpha - this._alpha) * t;\n\t\treturn this.setRGB(this.rgb);\n\t},\n\n\tblue: function() {\n\t\treturn this.rgb[2];\n\t},\n\n\tbrightness: function(){\n\t\treturn this.hsv[2];\n\t},\n\n\tcomplement: function(){\n\t\treturn this.rotateRYB(180);\n\t},\n\n\tcopy: function(){\n\t\treturn new TColor(this);\n\t},\n\n\tcyan : function(){\n\t\treturn this.cmyk[0];\n\t},\n\n\tdarken: function(step){\n\t\tthis.hsv[2] = mathUtils.clip((this.hsv[2] -step), 0, 1);\n\t\treturn this.setHSV(this.hsv);\n\t},\n\t/**\n\tReduced the color's saturation by the given amount.\n\t@param step\n\t@return itself\n\t*/\n\tdesaturate: function(step) {\n\t\tthis.hsv[1] = mathUtils.clip((this.hsv[1] - step), 0, 1);\n\t\treturn this.setHSV(this.hsv);\n\t},\n\n\tdifferenceTo: function(c) {\n\t\treturn  TColor.newRGB(Math.abs(this.rgb[0] - c.rgb[0]),\n\t\t\tMath.abs(this.rgb[1] - c.rgb[1]),\n\t\t\tMath.abs(this.rgb[2] - c.rgb[2]));\n\t},\n\n\tdistanceToCMYK: function(c) {\n\t\tvar ccmyk = c.toCMYKAArray();\n\t\tvar dc = this.cmyk[0] - ccmyk[0];\n\t\tvar dm = this.cmyk[1] - ccmyk[1];\n\t\tvar dy = this.cmyk[2] - ccmyk[2];\n\t\tvar dk = this.cmyk[3] - ccmyk[3];\n\t\treturn Math.sqrt(dc * dc + dm * dm + dy * dy + dk * dk);\n\t},\n\n\tdistanceToHSV: function(c) {\n\t\tvar hue = this.hsv[0] * mathUtils.TWO_PI;\n\t\tvar hue2 = c.hue() * mathUtils.TWO_PI;\n\t\tvar v1 = new Vec3D((mathUtils.cos(hue) * this.hsv[1]), (mathUtils.sin(hue) * this.hsv[1]), this.hsv[2]);\n\t\tvar v2 = new Vec3D((mathUtils.cos(hue2) * c.saturation()), (mathUtils.sin(hue2) * c.saturation()), c.brightness());\n\t\treturn v1.distanceTo(v2);\n\t},\n\n\tdistanceToRGB: function(c) {\n\t\tvar crgb = c.toRGBAArray();\n\t\tvar dr = this.rgb[0] - crgb[0];\n\t\tvar dg = this.rgb[1] - crgb[1];\n\t\tvar db = this.rgb[2] - crgb[2];\n\t\treturn Math.sqrt(dr * dr + dg * dg + db * db);\n\t},\n\n\tequals: function(o) {\n\t\tif ( is.TColor( o ) ) {\n\t\t\tvar c =  o;\n\t\t\tvar dr = c.rgb[0] - this.rgb[0];\n\t\t\tvar dg = c.rgb[1] - this.rgb[1];\n\t\t\tvar db = c.rgb[2] - this.rgb[2];\n\t\t\tvar da = c.alpha() - this._alpha;\n\t\t\tvar d = Math.sqrt(dr * dr + dg * dg + db * db + da * da);\n\t\t\treturn d < TColor.EPS;\n\t\t}\n\t\treturn false;\n\t},\n\n\tgetAnalog: function(theta,delta) {\n\t\treturn new TColor(this).analog(theta, delta);\n\t},\n\n\tgetBlended: function(c,t) {\n\t\treturn new TColor(this).blend(c, t);\n\t},\n\n\tgetClosestHue: function(primaryOnly) {\n\t\treturn Hue.getClosest(this.hsv[0], primaryOnly === true);\n\t},\n\n\tgetComplement: function() {\n\t\treturn new TColor(this).complement();\n\t},\n\n\tgetComponentValue: function(criteria) {\n\t\treturn criteria.getComponentValueFor(this);\n\t},\n\n\tgetDarkened: function(step) {\n\t\treturn new TColor(this).darken(step);\n\t},\n\n\tgetDesaturated: function(step) {\n\t\treturn new TColor(this).desaturate(step);\n\t},\n\n\tgetDifferenceTo: function(c) {\n\t\treturn this.copy().differenceTo(c);\n\t},\n\n\tgetInverted: function() {\n\t\treturn new TColor(this).invert();\n\t},\n\n\tgetLightened: function(step) {\n\t\treturn new TColor(this).lighten(step);\n\t},\n\n\tgetRotatedRYB: function(theta) {\n\t\treturn new TColor(this).rotateRYB(theta);\n\t},\n\n\tgetSaturated: function(step) {\n\t\treturn new TColor(this).saturate(step);\n\t},\n\n\tgreen: function() {\n\t\treturn this.rgb[1];\n\t},\n\n\thue: function() {\n\t\treturn this.hsv[0];\n\t},\n\n\tinvert: function() {\n\t\tthis.rgb[0] = 1 - this.rgb[0];\n\t\tthis.rgb[1] = 1 - this.rgb[1];\n\t\tthis.rgb[2] = 1 - this.rgb[2];\n\t\treturn this.setRGB(this.rgb);\n\t},\n\n\tisBlack: function() {\n\t\treturn (this.rgb[0] <= TColor.BLACK_POINT && ((this.rgb[0]===this.rgb[1]) && this.rgb[0] === this.rgb[2]));\n\t},\n\n\tisGrey:function() {\n\t\treturn this.hsv[1] < TColor.GREY_THRESHOLD;\n\t},\n\t/*\n\tisPrimary:function() {\n\t\treturn Hue.isPrimary(this.hsv[0]);\n\t},*/\n\n\tisWhite: function() {\n\t\treturn (this.rgb[0] >= TColor.WHITE_POINT && (this.rgb[0] === this.rgb[1]) && (this.rgb[0] === this.rgb[2]));\n\t},\n\n\tlighten: function(step) {\n\t\tthis.hsv[2] = mathUtils.clip(this.hsv[2] + step, 0, 1);\n\t\treturn this.setHSV(this.hsv);\n\t},\n\n\tluminance: function() {\n\t\treturn this.rgb[0] * 0.299 + this.rgb[1] * 0.587 + this.rgb[2] * 0.114;\n\t},\n\n\tmagenta: function() {\n\t\treturn this.cmyk[1];\n\t},\n\n\tred: function() {\n\t\treturn this.rgb[0];\n\t},\n\n\trotateRYB: function(theta) {\n\t\tvar deg = parseInt(mathUtils.degrees(theta),10),\n\t\t\th = this.hsv[0] * 360,\n\t\t\ti = 0,\n\t\t\tp,\n\t\t\tq;\n\t\ttheta %= 360;\n\n\t\tvar resultHue = 0;\n\t\tfor (i = 0; i < TColor.RYB_WHEEL.length - 1; i++) {\n\t\t\tp = TColor.RYB_WHEEL[i];\n\t\t\tq = TColor.RYB_WHEEL[i + 1];\n\t\t\tif (q.y < p.y) {\n\t\t\t\tq.y += 360;\n\t\t\t}\n\t\t\tif (p.y <= h && h <= q.y) {\n\t\t\t\tresultHue = p.x + (q.x - p.x) * (h - p.y) / (q.y - p.y);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// And the user-given angle (e.g. complement).\n\t\tresultHue = (resultHue + theta) % 360;\n\n\t\t// For the given angle, find out what hue is\n\t\t// located there on the artistic color wheel.\n\t\tfor (i = 0; i < TColor.RYB_WHEEL.length - 1; i++) {\n\t\t\tp = TColor.RYB_WHEEL[i];\n\t\t\tq = TColor.RYB_WHEEL[i + 1];\n\t\t\tif (q.y < p.y) {\n\t\t\t\tq.y += 360;\n\t\t\t}\n\t\t\tif (p.x <= resultHue && resultHue <= q.x) {\n\t\t\t\th = p.y + (q.y - p.y) * (resultHue - p.x) / (q.x - p.x);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.hsv[0] = (h % 360) / 360.0;\n\t\treturn this.setHSV(this.hsv);\n\n\t},\n\n\tsaturate: function(step) {\n\t\tthis.hsv[1] = mathUtils.clip(this.hsv[1] + step, 0, 1);\n\t\treturn this.setHSV(this.hsv);\n\t},\n\n\tsaturation: function() {\n\t\treturn this.hsv[1];\n\t},\n\n\tsetAlpha: function(alpha) {\n\t\tthis._alpha = alpha;\n\t\treturn this;\n\t},\n\n\tsetARGB: function(argb) {\n\t\tthis.setRGB(((argb >> 16) & 0xff) * TColor.INV8BIT, ((argb >> 8) & 0xff) * TColor.INV8BIT, (argb & 0xff) * TColor.INV8BIT);\n\t\tthis._alpha = (argb >>> 24) * TColor.INV8BIT;\n\t\treturn this;\n\t},\n\n\tsetBlack: function(val) {\n\t\tthis.cmyk[3] = val;\n\t\treturn this.setCMYK( this.cmyk );\n\t},\n\n\tsetBlue: function(blue) {\n\t\tthis.rgb[2] = blue;\n\t\treturn this.setRGB(this.rgb);\n\t},\n\n\tsetBrightness: function(brightness) {\n\t\tthis.hsv[2] = mathUtils.clip(brightness, 0, 1);\n\t\treturn this.setHSV(this.hsv);\n\t},\n\n\tsetCMYK: function(c,m,y,k) {\n\t\t//if it was passed in as an array instead of separate values\n\t\tif( is.Array( c ) ){\n\t\t\tm = c[1];\n\t\t\ty = c[2];\n\t\t\tk = c[3];\n\t\t\tc = c[0];\n\t\t}\n\t\tthis.cmyk[0] = c;\n\t\tthis.cmyk[1] = m;\n\t\tthis.cmyk[2] = y;\n\t\tthis.cmyk[3] = k;\n\t\tthis.rgb = TColor.cmykToRGB(this.cmyk[0],this.cmyk[1],this.cmyk[2],this.cmyk[3]);\n\t\tthis.hsv = TColor.rgbToHSV(this.rgb[0],this.rgb[1],this.rgb[2]);\n\t\treturn this;\n\t},\n\n    setComponent: function(criteria,  val) {\n\t\tcriteria.setComponentValueFor(this, val);\n\t\treturn this;\n\t},\n\n\tsetCyan: function(val) {\n\t\tthis.cmyk[0] = val;\n\t\treturn this.setCMYK(this.cmyk);\n\t},\n\n\tsetGreen: function(green) {\n\t\tthis.rgb[1] = green;\n\t\treturn this.setRGB(this.rgb);\n\t},\n\n\tsetHSV: function(h,s,v) {\n\t\tif( is.Array( h ) ){\n\t\t\ts = h[1];\n\t\t\tv = h[2];\n\t\t\th = h[0];\n\t\t}\n\t\tvar newHSV = [h,s,v];\n\t\tthis.hsv[0] = newHSV[0] % 1;\n\t\tif (this.hsv[0] < 0) {\n\t\t\tthis.hsv[0]++;\n\t\t}\n\t\tthis.hsv[1] = mathUtils.clip(newHSV[1], 0, 1);\n\t\tthis.hsv[2] = mathUtils.clip(newHSV[2], 0, 1);\n\t\tthis.rgb = TColor.hsvToRGB(this.hsv[0], this.hsv[1], this.hsv[2]);\n\t\tthis.cmyk = TColor.rgbToCMYK(this.rgb[0], this.rgb[1], this.rgb[2]);\n\t\treturn this;\n\t},\n\n\tsetHue: function(hue) {\n\t\thue %= 1.0;\n\t\tif (hue < 0.0) {\n\t\t\thue++;\n\t\t}\n\t\tthis.hsv[0] = hue;\n\t\treturn this.setHSV(this.hsv);\n\t},\n\n\tsetMagenta: function(val) {\n\t\tthis.cmyk[1] = val;\n\t\treturn this.setCMYK(this.cmyk);\n\t},\n\n\tsetRed: function(red) {\n\t\tthis.rgb[0] = red;\n\t\treturn this.setRGB(this.rgb);\n\t},\n\n\tsetRGB: function(r,g,b) {\n\t\tif( is.Array( r ) ){\n\t\t\tg = r[1];\n\t\t\tb = r[2];\n\t\t\tr = r[0];\n\t\t}\n\t\tthis.rgb[0] = mathUtils.clip(r,0,1);\n\t\tthis.rgb[1] = mathUtils.clip(g,0,1);\n\t\tthis.rgb[2] = mathUtils.clip(b,0,1);\n\t\tthis.cmyk = TColor.rgbToCMYK(this.rgb[0], this.rgb[1], this.rgb[2]);\n\t\tthis.hsv = TColor.rgbToHSV(this.rgb[0], this.rgb[1], this.rgb[2]);\n\t\treturn this;\n\t},\n\n\tsetSaturation: function(saturation) {\n\t\tthis.hsv[1] = mathUtils.clip(saturation, 0, 1);\n\t\treturn this.setHSV(this.hsv);\n\t},\n\n\tsetYellow: function(val) {\n\t\tthis.cmyk[2] = val;\n\t\treturn this.setCMYK(this.cmyk);\n\t},\n\n\tsub: function(c) {\n\t\treturn this.copy().subSelf(c);\n\t},\n\n\tsubSelf: function(c) {\n\t\tthis.rgb[0] = mathUtils.max(this.rgb[0] - c.rgb[0], 0);\n\t\tthis.rgb[1] = mathUtils.max(this.rgb[1] - c.rgb[1], 0);\n\t\tthis.rgb[2] = mathUtils.max(this.rgb[2] - c.rgb[2], 0);\n\t\treturn this.setRGB(this.rgb);\n\t},\n\n\ttoARGB: function() {\n\t\tvar r = parseInt((this.rgb[0] * 255),10),\n\t\t\tg = parseInt((this.rgb[1] * 255),10),\n\t\t\tb = parseInt((this.rgb[2] * 255),10),\n\t\t\ta = parseInt((this._alpha * 255),10);\n\t\treturn  r << 16 | g << 8 | b | a << 24;\n\t},\n\n\ttoCMYKAArray: function(cmyka) {\n\t\tif (cmyka === undefined) {\n\t\t\tcmyka = [];\n\t\t}\n\t\tcmyka[0] = this.cmyk[0];\n\t\tcmyka[1] = this.cmyk[1];\n\t\tcmyka[2] = this.cmyk[2];\n\t\tcmyka[3] = this.cmyk[3];\n\t\tcmyka[4] = this._alpha;\n\t\treturn cmyka;\n\t},\n\n\ttoHex: function() {\n\t\tvar hex = dec2hex(this.toARGB());\n\t\tif (hex.length > 6) {\n\t\t\thex = hex.substring(2);\n\t\t}\n\t\treturn hex;\n\t},\n\n\ttoHexCSS: function(){\n\t\treturn \"#\"+this.toHex();\n\t},\n\n\ttoHSVAArray: function(hsva) {\n\t\tif (hsva === undefined) {\n\t\t\thsva = [];\n\t\t}\n\t\thsva[0] = this.hsv[0];\n\t\thsva[1] = this.hsv[1];\n\t\thsva[2] = this.hsv[2];\n\t\thsva[3] = this._alpha;\n\t\treturn hsva;\n\t},\n\n\t/**\n\t* to CSS's hsl() string\n\t*/\n\ttoHSLCSS: function(){\n        var hsv = this.hsv;\n\n        //hue is 0 - 360\n        var h = Math.floor(hsv[0] * 360);\n        //saturation & value/luminosity is 0-100 (%)\n        var s = Math.floor(hsv[1] * 100);\n        var v = Math.floor(hsv[2] * 100);\n\t\treturn \"hsl(\" +h+ \",\" +s+ \"%,\" +v+ \"%)\";\n\t},\n\n\t/**\n\t * to CSS's hsla() string\n\t */\n\ttoHSLACSS: function(){\n        var hsv = this.hsv;\n\n        //hue is 0 - 360\n        var h = Math.floor(hsv[0] * 360);\n        //saturation & value/luminosity is 0-100 (%)\n        var s = Math.floor(hsv[1] * 100);\n        var v = Math.floor(hsv[2] * 100);\n        //alpha stays in range 0 - 1\n\t\treturn \"hsla(\" +h+ \",\" +s+ \"%,\" +v+ \"%,\" +this._alpha+ \")\";\n\t},\n\n\t/**\n\t* to integer for color\n\t*/\n\ttoInt: function(){\n\t\treturn Number( '0x' + this.toHex() );\n\t},\n\n\t/**\n\t * to an Array of RGBA values\n\t * @param rgba\n\t * @param offset (optional)\n\t * @return rgba array\n\t */\n\ttoRGBAArray: function(rgba, offset) {\n        rgba = rgba || [];\n        offset = offset || 0;\n\t\trgba[offset++] = this.rgb[0];\n\t\trgba[offset++] = this.rgb[1];\n\t\trgba[offset++] = this.rgb[2];\n\t\trgba[offset] = this._alpha;\n\t\treturn rgba;\n\t},\n    /**\n     * to an Array of RGBA decimal values, i.e. [255,255,255,255] for solid white\n     * @param {Array|TypedArray} [rgba] optionally pass in an array or a TypedArray such as Uint8ClampedArray\n     * @param {Number} [offset] index offset to put these values in the array\n     * @return {Array}\n     */\n    toRGBADecimalArray: function( rgba, offset ) {\n        rgba = rgba || [];\n        offset = offset || 0;\n        rgba[offset++] = this.rgb[0] * 255;\n        rgba[offset++] = this.rgb[1] * 255;\n        rgba[offset++] = this.rgb[2] * 255;\n        rgba[offset] = this._alpha * 255;\n        return rgba;\n    },\n\n\ttoRGBCSS: function( asPercents ){\n        var rgb = this.rgb,\n            mult = asPercents ? 100 : 255,\n            u = asPercents ? '%' : '',\n            f = Math.floor;\n\n\t\treturn \"rgb(\" + f(rgb[0]*mult) + u + \",\" + f(rgb[1]*mult) + u + \",\" + f(rgb[2]*mult) + u + \")\";\n\t},\n\n\t/**\n\t * to an rgba string valid for CSS Color Module's rgba()\n\t * @param asPercents if true creates string based on percents rather than 0-255\n\t */\n\ttoRGBACSS: function(asPercents){\n        var rgb = this.rgb,\n            mult = asPercents ? 100 : 255,\n            u = asPercents ? '%' : '',\n            f = Math.floor;\n\n\t\treturn \"rgba(\" + f(rgb[0]*mult) + u + \",\" + f(rgb[1]*mult) + u + \",\" + f(rgb[2]*mult) + u + \",\" + this._alpha + \")\";\n\t},\n\n\ttoString: function(){\n\t\treturn \"TColor: rgb: \"+this.rgb[0] + \", \" +this.rgb[1] + \", \"+this.rgb[2]+\n\t\t\t\t\" hsv: \"+ this.hsv[0] + \",\"+this.hsv[1]+\",\"+this.hsv[2]+\n\t\t\t\t\" cmyk: \"+this.cmyk[0] + \", \"+this.cmyk[1]+\",\"+this.cmyk[2]+\",\"+this.cmyk[3]+\n\t\t\t\t\" alpha: \"+this._alpha;\n\t},\n\n\tyellow: function() {\n\t\treturn this.cmyk[2];\n\t}\n\n};\n\nTColor.INV60DEGREES = 60.0 / 360;\nTColor.INV8BIT = 1.0 / 255;\nTColor.EPS = 0.001;\n\n/**\n * Maximum rgb component value for a color to be classified as black.\n * @see #isBlack()\n */\nTColor.BLACK_POINT = 0.08;\n\n/**\n * Minimum rgb component value for a color to be classified as white.\n * @see #isWhite()\n */\nTColor.WHITE_POINT = 1.0;\n\n/**\n * Maximum saturations value for a color to be classified as grey\n * @see #isGrey()\n */\nTColor.GREY_THRESHOLD = 0.01;\n\n\n\n/**\n * Converts CMYK floats into an RGB array.\n * @param c\n * @param m\n * @param y\n * @param k\n * @param rgb optional rgb array to populate\n * @return rgb array\n */\nTColor.cmykToRGB = function(c,m,y,k,rgb) {\n\tif(rgb ===undefined){\n\t\trgb = [0,0,0];\n\t}\n\trgb[0] = 1.0 - Math.min(1.0, c + k);\n\trgb[1] = 1.0 - Math.min(1.0, m + k);\n\trgb[2] = 1.0 - Math.min(1.0, y + k);\n\treturn rgb;\n};\n\n\n/**\n * Converts hex string into a RGB array.\n * @param hexRGB\n * @param rgb array optional\n * @return rgb array\n */\nTColor.hexToRGB = function(hexRGB,rgb) {\n\tif(rgb === undefined){ rgb = []; }\n\t//var rgbInt = parseInt(hexRGB,16);\n\thexRGB = (hexRGB.charAt(0)==\"#\") ? hexRGB.substring(1,7):hexRGB;\n\trgb[0] = parseInt(hexRGB.substring(0,2),16) * TColor.INV8BIT;//((rgbInt >> 16) & 0xff) * TColor.INV8BIT;\n\trgb[1] = parseInt(hexRGB.substring(2,4),16) * TColor.INV8BIT;//((rgbInt >> 8) & 0xff) * TColor.INV8BIT;\n\trgb[2] = parseInt(hexRGB.substring(4,6),16) * TColor.INV8BIT;//((rgbInt & 0xff) * TColor.INV8BIT);\n\treturn rgb;\n};\n\n\n/**\n * Converts HSV values into RGB array.\n * @param h\n * @param s\n * @param v\n * @param rgb array optional\n * @return rgb array\n */\nTColor.hsvToRGB = function(h, s, v,rgb) {\n\tif(rgb === undefined){ rgb = []; }\n\tif(s === 0.0){\n\t\trgb[0] = rgb[1] = rgb[2] = v;\n\t} else {\n\t\th /= TColor.INV60DEGREES;\n\t\tvar i =  parseInt(h,10),\n\t\t\tf = h - i,\n\t\t\tp = v * (1 - s),\n\t\t\tq = v * (1 - s * f),\n\t\t\tt = v * (1 - s * (1 - f));\n\n\t\tif (i === 0) {\n\t\t\trgb[0] = v;\n\t\t\trgb[1] = t;\n\t\t\trgb[2] = p;\n\t\t} else if (i == 1) {\n\t\t\trgb[0] = q;\n\t\t\trgb[1] = v;\n\t\t\trgb[2] = p;\n\t\t} else if (i == 2) {\n\t\t\trgb[0] = p;\n\t\t\trgb[1] = v;\n\t\t\trgb[2] = t;\n\t\t} else if (i == 3) {\n\t\t\trgb[0] = p;\n\t\t\trgb[1] = q;\n\t\t\trgb[2] = v;\n\t\t} else if (i == 4) {\n\t\t\trgb[0] = t;\n\t\t\trgb[1] = p;\n\t\t\trgb[2] = v;\n\t\t} else {\n\t\t\trgb[0] = v;\n\t\t\trgb[1] = p;\n\t\t\trgb[2] = q;\n\t\t}\n\t}\n\treturn rgb;\n};\n\n/**\n * Converts CIE Lab to RGB components.\n * First we have to convert to XYZ color space. Conversion involves using a\n * white point, in this case D65 which represents daylight illumination.\n * Algorithm adopted from: http://www.easyrgb.com/math.php\n * @param l\n * @param a\n * @param b\n * @param rgb\n * @return rgb array\n */\nTColor.labToRGB = function(l, a, b,rgb) {\n\tif(rgb === undefined){ rgb = []; }\n\tvar y = (l + 16) / 116.0,\n\t\tx = a / 500.0 + y,\n\t\tz = y - b / 200.0,\n\t\ti = 0;\n\trgb[0] = x;\n\trgb[1] = y;\n\trgb[2] = z;\n\tfor (i = 0; i < 3; i++) {\n\t\tvar p = Math.pow(rgb[i], 3);\n\t\tif (p > 0.008856) {\n\t\t\trgb[i] = p;\n\t\t} else {\n\t\t\trgb[i] = (rgb[i] - 16 / 116.0) / 7.787;\n\t\t}\n\t}\n\n\t// Observer = 2, Illuminant = D65\n\tx = rgb[0] * 0.95047;\n\ty = rgb[1];\n\tz = rgb[2] * 1.08883;\n\n\trgb[0] = x * 3.2406 + y * -1.5372 + z * -0.4986;\n\trgb[1] = x * -0.9689 + y * 1.8758 + z * 0.0415;\n\trgb[2] = x * 0.0557 + y * -0.2040 + z * 1.0570;\n\tvar tpow = 1 / 2.4;\n\tfor (i = 0; i < 3; i++) {\n\t\tif (rgb[i] > 0.0031308) {\n\t\t\trgb[i] = (1.055 * Math.pow(rgb[i], tpow) - 0.055);\n\t\t} else {\n\t\t\trgb[i] = 12.92 * rgb[i];\n\t\t}\n\t}\n\treturn rgb;\n};\n\n/**\n * Factory method. Creates new color from ARGB int.\n * @param argb\n * @return new color\n */\nTColor.newARGB = function(argb) {\n\treturn TColor.newRGBA(((argb >> 16) & 0xff) * TColor.INV8BIT, ((argb >> 8) & 0xff) * TColor.INV8BIT, (argb & 0xff) * TColor.INV8BIT, (argb >>> 24) * TColor.INV8BIT);\n};\n\n/**\nFactory method. Creates new color from CMYK values.\n@param c\n@param m\n@param y\n@param k\n@return new color\n*/\nTColor.newCMYK = function(c, m, y, k) {\n\treturn TColor.newCMYKA(c, m, y, k, 1);\n};\n\n/**\nFactory method. Creates new color from CMYK + alpha values.\n@param c\n@param m\n@param y\n@param k\n@param a\n@return new color\n*/\nTColor.newCMYKA = function(c, m, y, k, a) {\n\tvar col = new TColor();\n\tcol.setCMYK([c, m, y, k ]);\n\tcol.setAlpha(mathUtils.clip(a, 0, 1));\n\treturn col;\n};\n\n/**\nFactory method. Creats a new color from any CSS color values\n@param {String} css value\n@return new color\n*/\nTColor.newCSS = function( css ){\n\t//remove all spaces\n\twhile( css.indexOf(' ') > -1 ){\n\t\tcss = css.replace(' ', '');\n\t}\n\tcss = css.toLowerCase();\n\n\tfunction digits( colorFnStr ){\n\t\t//hack off the trailing )\n\t\tvar str = css.substr(0, css.length-1);\n\t\t//hack off rgb(, rgba(, hsl(, hsla(\n\t\treturn str.substr( colorFnStr.length + 1, str.length).split(',');\n\t}\n\tfunction makeNumbers( digits ){\n\t\tvar i=0, l = digits.length;\n\t\tfor ( i=0; i<l; i++){\n\t\t\t//cast to numbers from Strings\n\t\t\tdigits[i] = Number( digits[i] );\n\t\t}\n\t\treturn digits;\n\t}\n\tvar conversions = {\n\t\t'#': function(){ return TColor.newHex( css.substr(1,css.length) ); },\n\t\t'rgba': function(){\n\t\t\tvar vals = makeNumbers( digits( 'rgba' ) );\n\t\t\treturn TColor.newRGBA( vals[0]/255, vals[1]/255, vals[2]/255, vals[3] );\n\t\t},\n\t\t'rgb': function(){\n\t\t\tvar vals = makeNumbers( digits( 'rgb' ) );\n\t\t\treturn TColor.newRGBA( vals[0]/255, vals[1]/255, vals[2]/255, 1.0 );\n\t\t},\n\t\t'hsla': function( vals ){\n\t\t\tvals = vals || digits( 'hsla' );\n\t\t\tvals[0] = Number( vals[0] ) / 360;\n\t\t\tvals[1] = Number( vals[1].substr(0, vals[1].length-1) ) / 100;\n\t\t\tvals[2] = Number( vals[2].substr(0, vals[2].length-1) ) / 100;\n\t\t\tvals[3] = Number( vals[3] );\n\t\t\treturn TColor.newHSVA( vals[0], vals[1], vals[2], vals[3] );\n\t\t},\n\t\t'hsl': function(){\n\t\t\tvar vals = digits('hsl');\n\t\t\tvals.push( 1.0 );\n\t\t\treturn conversions.hsla( vals );\n\t\t}\n\t};\n\n\t//if it was an x11 name return a copy\n\tif( TColor.X11[css] !== undefined ){\n\t\treturn TColor.X11[css].copy();\n\t}\n\t//else get it from hex or color function\n\tfor( var method in conversions ){\n\t\tif( css.indexOf(method) > -1 ){\n\t\t\treturn conversions[method]();\n\t\t}\n\t}\n};\n\n\n/**\nFactory method. Creates a new shade of gray + alpha.\n@param gray\n@return new color.\n*/\nTColor.newGray = function(gray) {\n\treturn TColor.newGrayAlpha(gray, 1);\n};\n\nTColor.newGrayAlpha = function(gray, alpha) {\n\tvar c = new TColor();\n\tc.setRGB([gray, gray, gray ]);\n\tc.setAlpha(alpha);\n\treturn c;\n};\n\n/**\nFactory method. New color from hex string.\n@param hexRGB\n@return new color\n*/\nTColor.newHex = function(hexRGB) {\n\tvar c = new TColor();\n\tc.setRGB(TColor.hexToRGB(hexRGB));\n\tc.setAlpha(1);\n\treturn c;\n};\n\n/**\nFactory method. New color from hsv values.\n@param h\n@param s\n@param v\n@return new color\n*/\nTColor.newHSV = function(h, s, v) {\n\treturn TColor.newHSVA(h, s, v, 1);\n};\n\n\nTColor.newHSVA = function(h, s,v,a) {\n\tvar c = new TColor();\n\tc.setHSV(h, s, v);\n\tc.setAlpha(mathUtils.clip(a, 0, 1));\n\treturn c;\n};\n\n/**\nFactory method. Creates new random color. Alpha is always 1.0.\n@return random color\n*/\nTColor.newRandom = function() {\n\treturn TColor.newRGBA(Math.random(), Math.random(), Math.random(), 1);\n};\n\n/**\nFactory method. Creates new color from RGB values. Alpha is set to 1.0.\n@param r\n@param g\n@param b\n@return new color\n*/\nTColor.newRGB = function(r, g, b) {\n\treturn TColor.newRGBA(r, g, b, 1);\n};\n\nTColor.newRGBA = function( r, g, b, a) {\n\tvar c = new TColor();\n\tc.setRGB( r, g, b );\n\tc.setAlpha(mathUtils.clip(a, 0, 1));\n\treturn c;\n};\n\n/**\nConverts the RGB values into a CMYK array.\n@param r\n@param g\n@param b\n@param cmyk array optional\n@return cmyk array\n*/\nTColor.rgbToCMYK = function(r, g, b,cmyk) {\n\tif(cmyk === undefined){ cmyk = []; }\n\tcmyk[0] = 1 - r;\n\tcmyk[1] = 1 - g;\n\tcmyk[2] = 1 - b;\n\tcmyk[3] = mathUtils.min(cmyk[0], cmyk[1], cmyk[2]);\n\tcmyk[0] = mathUtils.clip(cmyk[0] - cmyk[3], 0, 1);\n\tcmyk[1] = mathUtils.clip(cmyk[1] - cmyk[3], 0, 1);\n\tcmyk[2] = mathUtils.clip(cmyk[2] - cmyk[3], 0, 1);\n\tcmyk[3] = mathUtils.clip(cmyk[3], 0, 1);\n\treturn cmyk;\n};\n\n\n/**\nFormats the RGB float values into hex integers.\n@param r\n@param g\n@param b\n@return hex string\n*/\nTColor.rgbToHex = function(r, g, b) {\n\tvar hex = dec2hex(mathUtils.clip(r, 0, 1) * 0xff) + dec2hex(mathUtils.clip(g, 0, 1) * 0xff) + dec2hex(mathUtils.clip(b, 0, 1) * 0xff);\n\treturn hex;\n};\n\n/**\nConverts the RGB values into an HSV array.\n@param r\n@param g\n@param b\n@param hsv optional\n@return hsv array\n*/\nTColor.rgbToHSV = function(r, g, b,hsv) {\n\tif(hsv ===undefined){ hsv = []; }\n\tvar h = 0,\n\t\ts = 0,\n\t\tv = mathUtils.max(r, g, b),\n\t\td = v - mathUtils.min(r, g, b);\n\n\tif (v !== 0) {\n\t\ts = d / v;\n\t}\n\tif (s !== 0) {\n        if( numberComparator( r, v ) === 0 ){\n\t\t\th = (g - b) / d;\n\t\t} else if ( numberComparator( g, v ) === 0 ) {\n\t\t\th = 2 + (b - r) / d;\n\t\t} else {\n\t\t\th = 4 + (r - g) / d;\n\t\t}\n\t}\n\th *= TColor.INV60DEGREES;\n\tif (h < 0) {\n\t\th += 1.0;\n\t}\n\thsv[0] = h;\n\thsv[1] = s;\n\thsv[2] = v;\n\treturn hsv;\n};\n\nTColor.RED = TColor.newRGB(1, 0, 0);\nTColor.RYB_WHEEL = [\n\tnew Vec2D(0, 0),\n\tnew Vec2D(15, 8), new Vec2D(30, 17), new Vec2D(45, 26),\n\tnew Vec2D(60, 34), new Vec2D(75, 41), new Vec2D(90, 48),\n\tnew Vec2D(105, 54), new Vec2D(120, 60), new Vec2D(135, 81),\n\tnew Vec2D(150, 103), new Vec2D(165, 123), new Vec2D(180, 138),\n\tnew Vec2D(195, 155), new Vec2D(210, 171), new Vec2D(225, 187),\n\tnew Vec2D(240, 204), new Vec2D(255, 219), new Vec2D(270, 234),\n\tnew Vec2D(285, 251), new Vec2D(300, 267), new Vec2D(315, 282),\n\tnew Vec2D(330, 298), new Vec2D(345, 329), new Vec2D(360, 0)\n];\nTColor.GREEN = TColor.newRGB(0, 1, 0);\nTColor.BLUE = TColor.newRGB(0, 0, 1);\nTColor.CYAN = TColor.newRGB(0, 1, 1);\nTColor.MAGENTA = TColor.newRGB(1, 0, 1);\nTColor.YELLOW = TColor.newRGB(1, 1, 0);\nTColor.BLACK = TColor.newRGB(0, 0, 0);\nTColor.WHITE = TColor.newRGB(1, 1, 1);\n\n\n//Generate a TColor for every X11 color\nTColor.X11 = {};\n (function(){\n\t//RGB values for every X11 Color Name\n\t//http://en.wikipedia.org/wiki/Web_colors\n\tvar x11 = {\n\t\tindianred: [205, 92, 92],\n\t\tlightcoral: [240, 128, 128],\n\t\tsalmon: [250, 128, 114],\n\t\tdarksalmon: [233, 150, 122],\n\t\tlightsalmon: [255, 160, 122],\n\t\tred: [255, 0, 0],\n\t\tcrimson: [220, 20, 60],\n\t\tfireBrick: [178, 34, 34],\n\t\tdarkred: [139, 0, 0],\n\t\tpink: [255, 192, 203],\n\t\tlightpink: [255, 182, 193],\n\t\thotpink: [255, 105, 180],\n\t\tdeeppink: [255, 20, 147],\n\t\tmediumvioletred: [199, 21, 133],\n\t\tpalevioletred: [219, 112, 147],\n\t\tcoral: [255, 127, 80],\n\t\ttomato: [255, 99,  71],\n\t\torangered: [255, 69, 0],\n\t\tdarkorange: [255, 140, 0],\n\t\torange: [255, 165, 0],\n\t\tgold: [255, 215, 0],\n\t\tyellow: [255, 255, 0],\n\t\tlightyellow: [255, 255, 224],\n\t\tlemonchiffon: [255, 250, 205],\n\t\tlightgoldenrodyellow: [250, 250, 210],\n\t\tpapayawhip: [255, 239, 213],\n\t\tmoccasin: [255, 228, 181],\n\t\tpeachpuff: [255, 218, 185],\n\t\tpalegoldenrod: [238, 232, 170],\n\t\tkhaki: [240, 230, 140],\n\t\tdarkkhaki: [189, 183, 107],\n\t\tlavender: [230, 230, 250],\n\t\tthistle: [216, 191, 216],\n\t\tplum: [221, 160, 221],\n\t\tviolet: [238, 130, 238],\n\t\torchid: [218, 112, 214],\n\t\tfuchsia: [255, 0, 255],\n\t\tMagenta: [255, 0, 255],\n\t\tmediumorchid: [186,  85, 211],\n\t\tmediumpurple: [147, 112, 219],\n\t\tblueviolet: [138,  43, 226],\n\t\tdarkviolet: [148, 0, 211],\n\t\tdarkorchid: [153,  50, 204],\n\t\tdarkmagenta: [139, 0, 139],\n\t\tpurple: [128, 0, 128],\n\t\tindigo: [75, 0, 130],\n\t\tdarkslateblue: [72, 61, 139],\n\t\tslateblue: [106, 90, 205],\n\t\tmediumslateblue: [123, 104, 238],\n\t\tgreenyellow: [173, 255, 47],\n\t\tchartreuse: [127, 255, 0],\n\t\tlawngreen: [124, 252, 0],\n\t\tlime: [0, 255, 0],\n\t\tlimegreen: [50, 205, 50],\n\t\tpalegreen: [152, 251, 152],\n\t\tlightgreen: [144, 238, 144],\n\t\tmediumspringgreen: [0, 250, 154],\n\t\tspringgreen: [0, 255, 127],\n\t\tmediumseagreen: [60, 179, 113],\n\t\tseagreen: [46, 139, 87],\n\t\tforestgreen: [34, 139, 34],\n\t\tgreen: [0, 128, 0],\n\t\tdarkgreen: [0, 100, 0],\n\t\tyellowgreen: [154, 205, 50],\n\t\tolivedrab: [107, 142, 35],\n\t\tolive: [128, 128, 0],\n\t\tdarkolivegreen: [85, 107, 47],\n\t\tmediumaquamarine: [102, 205, 170],\n\t\tdarkseagreen: [143, 188, 143],\n\t\tlightseagreen: [32, 178, 170],\n\t\tdarkcyan: [0, 139, 139],\n\t\tteal: [0, 128, 128],\n\t\taqua: [0, 255, 255],\n\t\tcyan: [0, 255, 255],\n\t\tlightcyan: [224, 255, 255],\n\t\tpaleturquoise: [175, 238, 238],\n\t\taquamarine: [127, 255, 212],\n\t\tturquoise: [64, 224, 208],\n\t\tmediumturquoise: [72, 209, 204],\n\t\tdarkturquoise: [0, 206, 209],\n\t\tcadetblue: [95, 158, 160],\n\t\tsteelblue: [70, 130, 180],\n\t\tlightsteelblue: [176, 196, 222],\n\t\tpowderblue: [176, 224, 230],\n\t\tlightblue: [173, 216, 230],\n\t\tskyblue: [135, 206, 235],\n\t\tlightskyblue: [135, 206, 250],\n\t\tdeepskyblue: [0, 191, 255],\n\t\tdodgerblue: [30, 144, 255],\n\t\tcornflowerblue: [100, 149, 237],\n\t\troyalblue: [65, 105, 225],\n\t\tblue: [0, 0, 255],\n\t\tmediumblue: [0, 0, 205],\n\t\tdarkblue: [0, 0, 139],\n\t\tnavy: [0, 0, 128],\n\t\tmidnightblue: [25, 25, 112],\n\t\tcornsilk: [255, 248, 220],\n\t\tblanchedalmond: [255, 235, 205],\n\t\tbisque: [255, 228, 196],\n\t\tnavajowhite: [255, 222, 173],\n\t\twheat: [245, 222, 179],\n\t\tburlywood: [222, 184, 135],\n\t\ttan: [210, 180, 140],\n\t\trosybrown: [188, 143, 143],\n\t\tsandybrown: [244, 164, 96],\n\t\tgoldenrod: [218, 165, 32],\n\t\tdarkgoldenrod: [184, 134, 11],\n\t\tPeru: [205, 133, 63],\n\t\tchocolate: [210, 105, 30],\n\t\tsaddlebrown: [139, 69, 19],\n\t\tsienna: [160, 82, 45],\n\t\tbrown: [165, 42, 42],\n\t\tmaroon: [128, 0, 0],\n\t\twhite: [255, 255, 255],\n\t\tsnow: [255, 250, 250],\n\t\thoneydew: [240, 255, 240],\n\t\tmintcream: [245, 255, 250],\n\t\tazure: [240, 255, 255],\n\t\taliceblue: [240, 248, 255],\n\t\tghostwhite: [248, 248, 255],\n\t\twhitesmoke: [245, 245, 245],\n\t\tseashell: [255, 245, 238],\n\t\tbeige: [245, 245, 220],\n\t\toldlace: [253, 245, 230],\n\t\tfloralwhite: [255, 250, 240],\n\t\tivory: [255, 255, 240],\n\t\tantiquewhite: [250, 235, 215],\n\t\tlinen: [250, 240, 230],\n\t\tlavenderblush: [255, 240, 245],\n\t\tmistyrose: [255, 228, 225],\n\t\tgainsboro: [220, 220, 220],\n\t\tlightgray: [211, 211, 211],\n\t\tsilver: [192, 192, 192],\n\t\tdarkgray: [169, 169, 169],\n\t\tgray: [128, 128, 128],\n\t\tdimgray: [105, 105, 105],\n\t\tlightslategray: [119, 136, 153],\n\t\tslategray: [112, 128, 144],\n\t\tdarkslategray: [47, 79, 79],\n\t\tblack: [0, 0, 0],\n\t\tbark: [64, 48, 33]\n\t};\n\n\tvar name, clr;\n\tfor( name in x11 ){\n        if( x11.hasOwnProperty( name ) ){\n            clr = x11[name];\n            TColor.X11[name] = TColor.newRGB( clr[0]/255, clr[1]/255, clr[2]/255 );\n            //for all of the grays duplicate with grey\n            if( name.indexOf('gray') >= 0 ){\n                TColor.X11[ name.replace('gray','grey') ] = TColor.X11[name];\n            }\n        }\n\t}\n\n    //add `transparent`\n    TColor.X11.transparent = TColor.newRGBA(0,0,0,0);\n}());\n\n\nmodule.exports = TColor;\n\n\n"]},"metadata":{},"sourceType":"script"}