{"ast":null,"code":"var extend = require('../../internals').extend,\n    AbstractWave = require('./AbstractWave'),\n    ConstantWave = require('./ConstantWave');\n/**\n * @module toxi/math/waves/FMSquareWave\n * @augments toxi/math/waves/AbstractWave\n */\n\n\nvar FMSquareWave = function (a, b, c, d, e) {\n  if (typeof c == \"number\") {\n    if (e === undefined) {\n      AbstractWave.call(this, a, b, c, d, new ConstantWave(0));\n    } else {\n      AbstractWave.call(this, a, b, c, d);\n      this.fmod = e;\n    }\n  } else {\n    AbstractWave.call(this, a, b);\n    this.fmod = c;\n  }\n};\n\nextend(FMSquareWave, AbstractWave);\n\nFMSquareWave.prototype.getClass = function () {\n  return \"FMSquareWave\";\n};\n\nFMSquareWave.prototype.pop = function () {\n  this.parent.pop.call(this);\n  this.fmod.pop();\n};\n\nFMSquareWave.prototype.push = function () {\n  this.parent.push.call(this);\n  this.fmod.push();\n};\n\nFMSquareWave.prototype.reset = function () {\n  this.parent.reset.call(this);\n  this.fmod.reset();\n};\n\nFMSquareWave.prototype.update = function () {\n  this.value = (this.phase / AbstractWave.TWO_PI < 0.5 ? 1 : -1) * this.amp + this.offset;\n  this.cyclePhase(this.frequency + this.fmod.update());\n  return this.value;\n};\n\nmodule.exports = FMSquareWave;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/math/waves/FMSquareWave.js"],"names":["extend","require","AbstractWave","ConstantWave","FMSquareWave","a","b","c","d","e","undefined","call","fmod","prototype","getClass","pop","parent","push","reset","update","value","phase","TWO_PI","amp","offset","cyclePhase","frequency","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,MAAxC;AAAA,IACCE,YAAY,GAAGD,OAAO,CAAC,gBAAD,CADvB;AAAA,IAECE,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAFvB;AAIA;AACA;AACA;AACA;;;AACA,IAAIG,YAAY,GAAG,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAeC,CAAf,EAAiBC,CAAjB,EACnB;AACC,MAAG,OAAOF,CAAP,IAAY,QAAf,EAAwB;AACvB,QAAGE,CAAC,KAAKC,SAAT,EAAmB;AAClBR,MAAAA,YAAY,CAACS,IAAb,CAAkB,IAAlB,EAAuBN,CAAvB,EAAyBC,CAAzB,EAA2BC,CAA3B,EAA6BC,CAA7B,EAAgC,IAAIL,YAAJ,CAAiB,CAAjB,CAAhC;AACA,KAFD,MAEO;AACND,MAAAA,YAAY,CAACS,IAAb,CAAkB,IAAlB,EAAuBN,CAAvB,EAAyBC,CAAzB,EAA2BC,CAA3B,EAA6BC,CAA7B;AACA,WAAKI,IAAL,GAAYH,CAAZ;AACA;AACD,GAPD,MAOO;AACNP,IAAAA,YAAY,CAACS,IAAb,CAAkB,IAAlB,EAAuBN,CAAvB,EAAyBC,CAAzB;AACA,SAAKM,IAAL,GAAYL,CAAZ;AACA;AACD,CAbD;;AAeAP,MAAM,CAACI,YAAD,EAAcF,YAAd,CAAN;;AAEAE,YAAY,CAACS,SAAb,CAAuBC,QAAvB,GAAkC,YAAU;AAC3C,SAAO,cAAP;AACA,CAFD;;AAIAV,YAAY,CAACS,SAAb,CAAuBE,GAAvB,GAA6B,YAAU;AACtC,OAAKC,MAAL,CAAYD,GAAZ,CAAgBJ,IAAhB,CAAqB,IAArB;AACA,OAAKC,IAAL,CAAUG,GAAV;AACA,CAHD;;AAKAX,YAAY,CAACS,SAAb,CAAuBI,IAAvB,GAA8B,YAAU;AACvC,OAAKD,MAAL,CAAYC,IAAZ,CAAiBN,IAAjB,CAAsB,IAAtB;AACA,OAAKC,IAAL,CAAUK,IAAV;AACA,CAHD;;AAKAb,YAAY,CAACS,SAAb,CAAuBK,KAAvB,GAA+B,YAAU;AACxC,OAAKF,MAAL,CAAYE,KAAZ,CAAkBP,IAAlB,CAAuB,IAAvB;AACA,OAAKC,IAAL,CAAUM,KAAV;AACA,CAHD;;AAKAd,YAAY,CAACS,SAAb,CAAuBM,MAAvB,GAAgC,YAAU;AACzC,OAAKC,KAAL,GAAa,CAAC,KAAKC,KAAL,GAAanB,YAAY,CAACoB,MAA1B,GAAmC,GAAnC,GAAyC,CAAzC,GAA6C,CAAC,CAA/C,IAAkD,KAAKC,GAAvD,GAA6D,KAAKC,MAA/E;AACA,OAAKC,UAAL,CAAgB,KAAKC,SAAL,GAAiB,KAAKd,IAAL,CAAUO,MAAV,EAAjC;AACA,SAAO,KAAKC,KAAZ;AACA,CAJD;;AAMAO,MAAM,CAACC,OAAP,GAAiBxB,YAAjB","sourcesContent":["\n\nvar extend = require('../../internals').extend,\n\tAbstractWave = require('./AbstractWave'),\n\tConstantWave = require('./ConstantWave');\n\n/**\n * @module toxi/math/waves/FMSquareWave\n * @augments toxi/math/waves/AbstractWave\n */\nvar\tFMSquareWave = function(a,b,c,d,e)\n{\n\tif(typeof c == \"number\"){\n\t\tif(e === undefined){\n\t\t\tAbstractWave.call(this,a,b,c,d, new ConstantWave(0));\n\t\t} else {\n\t\t\tAbstractWave.call(this,a,b,c,d);\n\t\t\tthis.fmod = e;\n\t\t}\n\t} else {\n\t\tAbstractWave.call(this,a,b);\n\t\tthis.fmod = c;\n\t}\n};\n\nextend(FMSquareWave,AbstractWave);\n\nFMSquareWave.prototype.getClass = function(){\n\treturn \"FMSquareWave\";\n};\n\nFMSquareWave.prototype.pop = function(){\n\tthis.parent.pop.call(this);\n\tthis.fmod.pop();\n};\n\nFMSquareWave.prototype.push = function(){\n\tthis.parent.push.call(this);\n\tthis.fmod.push();\n};\n\nFMSquareWave.prototype.reset = function(){\n\tthis.parent.reset.call(this);\n\tthis.fmod.reset();\n};\n\nFMSquareWave.prototype.update = function(){\n\tthis.value = (this.phase / AbstractWave.TWO_PI < 0.5 ? 1 : -1)*this.amp + this.offset;\n\tthis.cyclePhase(this.frequency + this.fmod.update());\n\treturn this.value;\n};\n\nmodule.exports = FMSquareWave;\n\n"]},"metadata":{},"sourceType":"script"}