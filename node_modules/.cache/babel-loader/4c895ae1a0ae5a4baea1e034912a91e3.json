{"ast":null,"code":"/**\n* @class Implementation of the circular interpolation function.\n*\n* i = a-(b-a) * (sqrt(1 - (1 - f) * (1 - f) ))\n* @description The interpolation slope can be flipped to have its steepest ascent\n* towards the end value, rather than at the beginning in the default\n* configuration.\n* @member toxi\n*\n* @param isFlipped\n*            true, if slope is inverted\n*/\nvar CircularInterpolation = function (isFlipped) {\n  if (isFlipped === undefined) {\n    this.isFlipped = false;\n  }\n};\n\nCircularInterpolation.interpolate = function (a, b, f, isFlipped) {\n  if (!!isFlipped) {\n    return a - (b - a) * (Math.sqrt(1 - f * f) - 1);\n  } else {\n    f = 1 - f;\n    return a + (b - a) * Math.sqrt(1 - f * f);\n  }\n};\n\nCircularInterpolation.prototype.interpolate = function (a, b, f) {\n  if (this.isFlipped) {\n    return a - (b - a) * (Math.sqrt(1 - f * f) - 1);\n  } else {\n    f = 1 - f;\n    return a + (b - a) * Math.sqrt(1 - f * f);\n  }\n};\n\nCircularInterpolation.prototype.setFlipped = function (isFlipped) {\n  this.isFlipped = isFlipped;\n};\n\nmodule.exports = CircularInterpolation;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/math/CircularInterpolation.js"],"names":["CircularInterpolation","isFlipped","undefined","interpolate","a","b","f","Math","sqrt","prototype","setFlipped","module","exports"],"mappings":"AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAIA,qBAAqB,GAAG,UAASC,SAAT,EAAoB;AAC5C,MAAGA,SAAS,KAAKC,SAAjB,EAA2B;AACvB,SAAKD,SAAL,GAAiB,KAAjB;AACH;AACJ,CAJD;;AAMAD,qBAAqB,CAACG,WAAtB,GAAoC,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBL,SAAnB,EAA8B;AAC9D,MAAI,CAAC,CAACA,SAAN,EAAiB;AACb,WAAOG,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,KAAWG,IAAI,CAACC,IAAL,CAAU,IAAIF,CAAC,GAAGA,CAAlB,IAAuB,CAAlC,CAAX;AACH,GAFD,MAEO;AACHA,IAAAA,CAAC,GAAG,IAAIA,CAAR;AACA,WAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,IAAYG,IAAI,CAACC,IAAL,CAAU,IAAIF,CAAC,GAAGA,CAAlB,CAAvB;AACH;AACJ,CAPD;;AASAN,qBAAqB,CAACS,SAAtB,CAAgCN,WAAhC,GAA8C,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AAC7D,MAAI,KAAKL,SAAT,EAAoB;AAChB,WAAOG,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,KAAWG,IAAI,CAACC,IAAL,CAAU,IAAIF,CAAC,GAAGA,CAAlB,IAAuB,CAAlC,CAAX;AACH,GAFD,MAEO;AACHA,IAAAA,CAAC,GAAG,IAAIA,CAAR;AACA,WAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,IAAYG,IAAI,CAACC,IAAL,CAAU,IAAIF,CAAC,GAAGA,CAAlB,CAAvB;AACH;AACJ,CAPD;;AASAN,qBAAqB,CAACS,SAAtB,CAAgCC,UAAhC,GAA6C,UAAST,SAAT,EAAoB;AAC7D,OAAKA,SAAL,GAAiBA,SAAjB;AACH,CAFD;;AAIAU,MAAM,CAACC,OAAP,GAAiBZ,qBAAjB","sourcesContent":["\n    /**\n    * @class Implementation of the circular interpolation function.\n    *\n    * i = a-(b-a) * (sqrt(1 - (1 - f) * (1 - f) ))\n    * @description The interpolation slope can be flipped to have its steepest ascent\n    * towards the end value, rather than at the beginning in the default\n    * configuration.\n    * @member toxi\n    *\n    * @param isFlipped\n    *            true, if slope is inverted\n    */\n    var CircularInterpolation = function(isFlipped) {\n        if(isFlipped === undefined){\n            this.isFlipped = false;\n        }\n    };\n\n    CircularInterpolation.interpolate = function( a, b, f, isFlipped) {\n        if (!!isFlipped) {\n            return a - (b - a) * (Math.sqrt(1 - f * f) - 1);\n        } else {\n            f = 1 - f;\n            return a + (b - a) * ( Math.sqrt(1 - f * f));\n        }\n    };\n\n    CircularInterpolation.prototype.interpolate = function( a, b, f) {\n        if (this.isFlipped) {\n            return a - (b - a) * (Math.sqrt(1 - f * f) - 1);\n        } else {\n            f = 1 - f;\n            return a + (b - a) * ( Math.sqrt(1 - f * f));\n        }\n    };\n\n    CircularInterpolation.prototype.setFlipped = function(isFlipped) {\n        this.isFlipped = isFlipped;\n    };\n\n    module.exports = CircularInterpolation;\n\n\n"]},"metadata":{},"sourceType":"script"}