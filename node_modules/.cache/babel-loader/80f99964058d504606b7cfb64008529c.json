{"ast":null,"code":"class QElement {\n  constructor(element, priority) {\n    this.element = element;\n    this.priority = priority;\n  }\n\n} // PriorityQueue class\n\n\nclass PriorityQueue {\n  // An array is used to implement priority\n  constructor() {\n    this.items = [];\n  }\n\n  enqueue(element, priority) {\n    // creating object from queue element\n    var qElement = new QElement(element, priority);\n    var contain = false; // iterating through the entire\n    // item array to add element at the\n    // correct location of the Queue\n\n    for (var i = 0; i < this.items.length; i++) {\n      if (this.items[i].priority > qElement.priority) {\n        // Once the correct location is found it is\n        // enqueued\n        this.items.splice(i, 0, qElement);\n        contain = true;\n        break;\n      }\n    } // if the element have the highest priority\n    // it is added at the end of the queue\n\n\n    if (!contain) {\n      this.items.push(qElement);\n    }\n  }\n\n  dequeue() {\n    // return the dequeued element\n    // and remove it.\n    // if the queue is empty\n    // returns Underflow\n    if (this.isEmpty()) return \"Underflow\";\n    return this.items.shift();\n  }\n\n  front() {\n    // returns the highest priority element\n    // in the Priority queue without removing it.\n    if (this.isEmpty()) return \"No elements in Queue\";\n    return this.items[0];\n  }\n\n  rear() {\n    // returns the lowest priority\n    // element of the queue\n    if (this.isEmpty()) return \"No elements in Queue\";\n    return this.items[this.items.length - 1];\n  }\n\n  isEmpty() {\n    // return true if the queue is empty.\n    return this.items.length == 0;\n  }\n\n  printPQueue() {\n    var str = \"\";\n\n    for (var i = 0; i < this.items.length; i++) str += this.items[i].element + \" \";\n\n    return str;\n  }\n\n}\n\nexport default PriorityQueue;","map":{"version":3,"sources":["C:/Users/jonlu/Documents/School/Spring 2022/Software Engineering/Don-t-WIne-About-Wine/src/Data/PriorityQueue.js"],"names":["QElement","constructor","element","priority","PriorityQueue","items","enqueue","qElement","contain","i","length","splice","push","dequeue","isEmpty","shift","front","rear","printPQueue","str"],"mappings":"AAAA,MAAMA,QAAN,CAAe;AACbC,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC7B,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAJY,C,CAOf;;;AACA,MAAMC,aAAN,CAAoB;AAClB;AACAH,EAAAA,WAAW,GAAG;AACZ,SAAKI,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,OAAO,CAACJ,OAAD,EAAUC,QAAV,EAAoB;AACzB;AACA,QAAII,QAAQ,GAAG,IAAIP,QAAJ,CAAaE,OAAb,EAAsBC,QAAtB,CAAf;AACA,QAAIK,OAAO,GAAG,KAAd,CAHyB,CAKzB;AACA;AACA;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWK,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,UAAI,KAAKJ,KAAL,CAAWI,CAAX,EAAcN,QAAd,GAAyBI,QAAQ,CAACJ,QAAtC,EAAgD;AAC9C;AACA;AACA,aAAKE,KAAL,CAAWM,MAAX,CAAkBF,CAAlB,EAAqB,CAArB,EAAwBF,QAAxB;AACAC,QAAAA,OAAO,GAAG,IAAV;AACA;AACD;AACF,KAhBwB,CAkBzB;AACA;;;AACA,QAAI,CAACA,OAAL,EAAc;AACZ,WAAKH,KAAL,CAAWO,IAAX,CAAgBL,QAAhB;AACD;AACF;;AAEDM,EAAAA,OAAO,GAAG;AACR;AACA;AACA;AACA;AACA,QAAI,KAAKC,OAAL,EAAJ,EAAoB,OAAO,WAAP;AACpB,WAAO,KAAKT,KAAL,CAAWU,KAAX,EAAP;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN;AACA;AACA,QAAI,KAAKF,OAAL,EAAJ,EAAoB,OAAO,sBAAP;AACpB,WAAO,KAAKT,KAAL,CAAW,CAAX,CAAP;AACD;;AAEDY,EAAAA,IAAI,GAAG;AACL;AACA;AACA,QAAI,KAAKH,OAAL,EAAJ,EAAoB,OAAO,sBAAP;AACpB,WAAO,KAAKT,KAAL,CAAW,KAAKA,KAAL,CAAWK,MAAX,GAAoB,CAA/B,CAAP;AACD;;AAEDI,EAAAA,OAAO,GAAG;AACR;AACA,WAAO,KAAKT,KAAL,CAAWK,MAAX,IAAqB,CAA5B;AACD;;AAEDQ,EAAAA,WAAW,GAAG;AACZ,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWK,MAA/B,EAAuCD,CAAC,EAAxC,EACEU,GAAG,IAAI,KAAKd,KAAL,CAAWI,CAAX,EAAcP,OAAd,GAAwB,GAA/B;;AACF,WAAOiB,GAAP;AACD;;AAhEiB;;AAmEpB,eAAef,aAAf","sourcesContent":["class QElement {\r\n  constructor(element, priority) {\r\n    this.element = element;\r\n    this.priority = priority;\r\n  }\r\n}\r\n\r\n// PriorityQueue class\r\nclass PriorityQueue {\r\n  // An array is used to implement priority\r\n  constructor() {\r\n    this.items = [];\r\n  }\r\n\r\n  enqueue(element, priority) {\r\n    // creating object from queue element\r\n    var qElement = new QElement(element, priority);\r\n    var contain = false;\r\n\r\n    // iterating through the entire\r\n    // item array to add element at the\r\n    // correct location of the Queue\r\n    for (var i = 0; i < this.items.length; i++) {\r\n      if (this.items[i].priority > qElement.priority) {\r\n        // Once the correct location is found it is\r\n        // enqueued\r\n        this.items.splice(i, 0, qElement);\r\n        contain = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // if the element have the highest priority\r\n    // it is added at the end of the queue\r\n    if (!contain) {\r\n      this.items.push(qElement);\r\n    }\r\n  }\r\n\r\n  dequeue() {\r\n    // return the dequeued element\r\n    // and remove it.\r\n    // if the queue is empty\r\n    // returns Underflow\r\n    if (this.isEmpty()) return \"Underflow\";\r\n    return this.items.shift();\r\n  }\r\n\r\n  front() {\r\n    // returns the highest priority element\r\n    // in the Priority queue without removing it.\r\n    if (this.isEmpty()) return \"No elements in Queue\";\r\n    return this.items[0];\r\n  }\r\n\r\n  rear() {\r\n    // returns the lowest priority\r\n    // element of the queue\r\n    if (this.isEmpty()) return \"No elements in Queue\";\r\n    return this.items[this.items.length - 1];\r\n  }\r\n\r\n  isEmpty() {\r\n    // return true if the queue is empty.\r\n    return this.items.length == 0;\r\n  }\r\n\r\n  printPQueue() {\r\n    var str = \"\";\r\n    for (var i = 0; i < this.items.length; i++)\r\n      str += this.items[i].element + \" \";\r\n    return str;\r\n  }\r\n}\r\n\r\nexport default PriorityQueue;"]},"metadata":{},"sourceType":"module"}