{"ast":null,"code":"var mathUtils = require('./mathUtils');\n/**\n* @class Lookup table for fast sine & cosine computations. Tables with varying\n* precisions can be created to which input angles will be rounded to. The\n* sin/cos methods can be used with both positive and negative input angles as\n* with the normal Math.sin()/Math.cos() versions.\n* @member toxi\n*/\n\n\nvar SinCosLUT = function (precision) {\n  if (!precision) {\n    precision = SinCosLUT.DEFAULT_PRECISION;\n  }\n\n  this.precision = precision;\n  this.period = 360 / this.precision;\n  this.quadrant = this.period >> 2;\n  this.deg2rad = Math.PI / 180.0 * this.precision;\n  this.rad2deg = 180.0 / Math.PI / this.precision;\n  this.sinLUT = [];\n\n  for (var i = 0; i < this.period; i++) {\n    this.sinLUT[i] = Math.sin(i * this.deg2rad);\n  }\n};\n\nSinCosLUT.prototype = {\n  /**\n  * Calculate cosine for the passed in angle in radians.\n  *\n  * @param theta\n  * @return cosine value for theta\n  */\n  cos: function (theta) {\n    while (theta < 0) {\n      theta += mathUtils.TWO_PI;\n    }\n\n    return this.sinLUT[(theta * this.rad2deg + this.quadrant) % this.period];\n  },\n  getPeriod: function () {\n    return this.period;\n  },\n  getPrecision: function () {\n    return this.precision;\n  },\n  getSinLUT: function () {\n    return this.sinLUT;\n  },\n\n  /**\n  * Calculates sine for the passed angle in radians.\n  *\n  * @param theta\n  * @return sine value for theta\n  */\n  sin: function (theta) {\n    while (theta < 0) {\n      theta += mathUtils.TWO_PI;\n    }\n\n    return this.sinLUT[theta * this.rad2deg % this.period];\n  }\n};\nSinCosLUT.DEFAULT_PRECISION = 0.25;\nSinCosLUT.DEFAULT_INSTANCE = undefined;\n\nSinCosLUT.getDefaultInstance = function () {\n  if (SinCosLUT.DEFAULT_INSTANCE === undefined) {\n    SinCosLUT.DEFAULT_INSTANCE = new SinCosLUT();\n  }\n\n  return SinCosLUT.DEFAULT_INSTANCE;\n};\n\nmodule.exports = SinCosLUT;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/math/SinCosLUT.js"],"names":["mathUtils","require","SinCosLUT","precision","DEFAULT_PRECISION","period","quadrant","deg2rad","Math","PI","rad2deg","sinLUT","i","sin","prototype","cos","theta","TWO_PI","getPeriod","getPrecision","getSinLUT","DEFAULT_INSTANCE","undefined","getDefaultInstance","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,IAAIC,SAAS,GAAG,UAASC,SAAT,EAAoB;AAChC,MAAG,CAACA,SAAJ,EAAc;AACVA,IAAAA,SAAS,GAAGD,SAAS,CAACE,iBAAtB;AACH;;AACD,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKE,MAAL,GAAc,MAAI,KAAKF,SAAvB;AACA,OAAKG,QAAL,GAAgB,KAAKD,MAAL,IAAe,CAA/B;AACA,OAAKE,OAAL,GAAgBC,IAAI,CAACC,EAAL,GAAU,KAAX,GAAoB,KAAKN,SAAxC;AACA,OAAKO,OAAL,GAAgB,QAAQF,IAAI,CAACC,EAAd,GAAoB,KAAKN,SAAxC;AACA,OAAKQ,MAAL,GAAc,EAAd;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAE,KAAKP,MAApB,EAA2BO,CAAC,EAA5B,EAA+B;AAC3B,SAAKD,MAAL,CAAYC,CAAZ,IAAiBJ,IAAI,CAACK,GAAL,CAASD,CAAC,GAAC,KAAKL,OAAhB,CAAjB;AACH;AACJ,CAbD;;AAgBAL,SAAS,CAACY,SAAV,GAAsB;AAElB;AACR;AACA;AACA;AACA;AACA;AACQC,EAAAA,GAAG,EAAE,UAASC,KAAT,EAAgB;AACjB,WAAOA,KAAK,GAAG,CAAf,EAAkB;AACdA,MAAAA,KAAK,IAAIhB,SAAS,CAACiB,MAAnB;AACH;;AACD,WAAO,KAAKN,MAAL,CAAY,CAAEK,KAAK,GAAG,KAAKN,OAAd,GAAyB,KAAKJ,QAA/B,IAA2C,KAAKD,MAA5D,CAAP;AACH,GAbiB;AAelBa,EAAAA,SAAS,EAAE,YAAW;AAClB,WAAO,KAAKb,MAAZ;AACH,GAjBiB;AAmBlBc,EAAAA,YAAY,EAAE,YAAW;AACrB,WAAO,KAAKhB,SAAZ;AACH,GArBiB;AAuBlBiB,EAAAA,SAAS,EAAE,YAAW;AAClB,WAAO,KAAKT,MAAZ;AACH,GAzBiB;;AA2BlB;AACR;AACA;AACA;AACA;AACA;AACQE,EAAAA,GAAG,EAAE,UAASG,KAAT,EAAgB;AACjB,WAAOA,KAAK,GAAG,CAAf,EAAkB;AACdA,MAAAA,KAAK,IAAIhB,SAAS,CAACiB,MAAnB;AACH;;AACD,WAAO,KAAKN,MAAL,CAAaK,KAAK,GAAG,KAAKN,OAAd,GAAyB,KAAKL,MAA1C,CAAP;AACH;AAtCiB,CAAtB;AA0CAH,SAAS,CAACE,iBAAV,GAA8B,IAA9B;AACAF,SAAS,CAACmB,gBAAV,GAA6BC,SAA7B;;AACApB,SAAS,CAACqB,kBAAV,GAA+B,YAAU;AACrC,MAAGrB,SAAS,CAACmB,gBAAV,KAA+BC,SAAlC,EAA4C;AACxCpB,IAAAA,SAAS,CAACmB,gBAAV,GAA6B,IAAInB,SAAJ,EAA7B;AACH;;AACD,SAAOA,SAAS,CAACmB,gBAAjB;AACH,CALD;;AAOAG,MAAM,CAACC,OAAP,GAAiBvB,SAAjB","sourcesContent":["var mathUtils = require('./mathUtils');\n\n\n    /**\n    * @class Lookup table for fast sine & cosine computations. Tables with varying\n    * precisions can be created to which input angles will be rounded to. The\n    * sin/cos methods can be used with both positive and negative input angles as\n    * with the normal Math.sin()/Math.cos() versions.\n    * @member toxi\n    */\n    var SinCosLUT = function(precision) {\n        if(!precision){\n            precision = SinCosLUT.DEFAULT_PRECISION;\n        }\n        this.precision = precision;\n        this.period = 360/this.precision;\n        this.quadrant = this.period >> 2;\n        this.deg2rad = (Math.PI / 180.0) * this.precision;\n        this.rad2deg = (180.0 / Math.PI) / this.precision;\n        this.sinLUT = [];\n        for(var i=0;i< this.period;i++){\n            this.sinLUT[i] = Math.sin(i*this.deg2rad);\n        }\n    };\n\n\n    SinCosLUT.prototype = {\n\n        /**\n        * Calculate cosine for the passed in angle in radians.\n        *\n        * @param theta\n        * @return cosine value for theta\n        */\n        cos: function(theta) {\n            while (theta < 0) {\n                theta += mathUtils.TWO_PI;\n            }\n            return this.sinLUT[((theta * this.rad2deg) + this.quadrant) % this.period];\n        },\n\n        getPeriod: function() {\n            return this.period;\n        },\n\n        getPrecision: function() {\n            return this.precision;\n        },\n\n        getSinLUT: function() {\n            return this.sinLUT;\n        },\n\n        /**\n        * Calculates sine for the passed angle in radians.\n        *\n        * @param theta\n        * @return sine value for theta\n        */\n        sin: function(theta) {\n            while (theta < 0) {\n                theta += mathUtils.TWO_PI;\n            }\n            return this.sinLUT[(theta * this.rad2deg) % this.period];\n        }\n    };\n\n\n    SinCosLUT.DEFAULT_PRECISION = 0.25;\n    SinCosLUT.DEFAULT_INSTANCE = undefined;\n    SinCosLUT.getDefaultInstance = function(){\n        if(SinCosLUT.DEFAULT_INSTANCE === undefined){\n            SinCosLUT.DEFAULT_INSTANCE = new SinCosLUT();\n        }\n        return SinCosLUT.DEFAULT_INSTANCE;\n    };\n\n    module.exports = SinCosLUT;\n\n\n"]},"metadata":{},"sourceType":"script"}