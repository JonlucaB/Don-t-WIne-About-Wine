{"ast":null,"code":"var SinCosLUT = require('../SinCosLUT'),\n    hasTypedArrays = require('../../internals/has').typedArrays();\n/*\nUsing David Bau's seedrandom.js for PerlinNoise#noiseSeed functionality\n seedrandom.js version 2.0.\n Author: David Bau 4/2/2011\n http://davidbau.com/encode/seedrandom-min.js\n\n LICENSE (BSD):\n\n Copyright 2010 David Bau, all rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n\t1. Redistributions of source code must retain the above copyright\n\t\t\tnotice, this list of conditions and the following disclaimer.\n\n\t2. Redistributions in binary form must reproduce the above copyright\n\t\t\tnotice, this list of conditions and the following disclaimer in the\n\t\t\tdocumentation and/or other materials provided with the distribution.\n\n\t3. Neither the name of this module nor the names of its contributors may\n\t\t\tbe used to endorse or promote products derived from this software\n\t\t\twithout specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n * All code is in an anonymous closure to keep the global namespace clean.\n *\n * @param {number=} overflow\n * @param {number=} startdenom\n * @api private\n */\n\n\nvar internalMath = {};\ninternalMath.pow = Math.pow; //used by seed generator\n\ninternalMath.random = Math.random; //start with the default random generator\n\n(function (pool, math, width, chunks, significance, overflow, startdenom) {\n  /*\n  \tseedrandom()\n  \tThis is the seedrandom function described above.\n  */\n  math['seedrandom'] = function seedrandom(seed, use_entropy) {\n    var key = [];\n    var arc4; // Flatten the seed string or build one from local entropy if needed.\n\n    seed = mixkey(flatten(use_entropy ? [seed, pool] : arguments.length ? seed : [new Date().getTime(), pool, window], 3), key); // Use the seed to initialize an ARC4 generator.\n\n    arc4 = new ARC4(key); // Mix the randomness into accumulated entropy.\n\n    mixkey(arc4.S, pool); // Override Math.random\n    // This function returns a random double in [0, 1) that contains\n    // randomness in every bit of the mantissa of the IEEE 754 value.\n\n    math['random'] = function random() {\n      // Closure to return a random double:\n      var n = arc4.g(chunks); // Start with a numerator n < 2 ^ 48\n\n      var d = startdenom; //   and denominator d = 2 ^ 48.\n\n      var x = 0; //   and no 'extra last byte'.\n\n      while (n < significance) {\n        // Fill up all significant digits by\n        n = (n + x) * width; //   shifting numerator and\n\n        d *= width; //   denominator and generating a\n\n        x = arc4.g(1); //   new least-significant-byte.\n      }\n\n      while (n >= overflow) {\n        // To avoid rounding up, before adding\n        n /= 2; //   last byte, shift everything\n\n        d /= 2; //   right using integer math until\n\n        x >>>= 1; //   we have exactly the desired bits.\n      }\n\n      return (n + x) / d; // Form the number within [0, 1).\n    }; // Return the seed that was used\n\n\n    return seed;\n  };\n  /** @constructor */\n\n\n  function ARC4(key) {\n    var t,\n        u,\n        me = this,\n        keylen = key.length;\n    var i = 0,\n        j = me.i = me.j = me.m = 0;\n    me.S = [];\n    me.c = []; // The empty key [] is treated as [0].\n\n    if (!keylen) {\n      key = [keylen++];\n    } // Set up S using the standard key scheduling algorithm.\n\n\n    while (i < width) {\n      me.S[i] = i++;\n    }\n\n    for (i = 0; i < width; i++) {\n      t = me.S[i];\n      j = lowbits(j + t + key[i % keylen]);\n      u = me.S[j];\n      me.S[i] = u;\n      me.S[j] = t;\n    } // The \"g\" method returns the next (count) outputs as one number.\n\n\n    me.g = function getnext(count) {\n      var s = me.S;\n      var i = lowbits(me.i + 1);\n      var t = s[i];\n      var j = lowbits(me.j + t);\n      var u = s[j];\n      s[i] = u;\n      s[j] = t;\n      var r = s[lowbits(t + u)];\n\n      while (--count) {\n        i = lowbits(i + 1);\n        t = s[i];\n        j = lowbits(j + t);\n        u = s[j];\n        s[i] = u;\n        s[j] = t;\n        r = r * width + s[lowbits(t + u)];\n      }\n\n      me.i = i;\n      me.j = j;\n      return r;\n    }; // For robust unpredictability discard an initial batch of values.\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\n\n\n    me.g(width);\n  } //\n  // flatten()\n  // Converts an object tree to nested arrays of strings.\n  //\n\n  /** @param {Object=} result\n  \t* @param {string=} prop\n  \t* @param {string=} typ\n  \t*/\n\n\n  function flatten(obj, depth, result, prop, typ) {\n    result = [];\n    typ = typeof obj;\n\n    if (depth && typ == 'object') {\n      for (prop in obj) {\n        if (prop.indexOf('S') < 5) {\n          // Avoid FF3 bug (local/sessionStorage)\n          try {\n            result.push(flatten(obj[prop], depth - 1));\n          } catch (e) {}\n        }\n      }\n    }\n\n    return result.length ? result : obj + (typ != 'string' ? '\\0' : '');\n  } //\n  // mixkey()\n  // Mixes a string seed into a key that is an array of integers, and\n  // returns a shortened string seed that is equivalent to the result key.\n  //\n\n  /** @param {number=} smear\n  \t* @param {number=} j */\n\n\n  function mixkey(seed, key, smear, j) {\n    seed += ''; // Ensure the seed is a string\n\n    smear = 0;\n\n    for (j = 0; j < seed.length; j++) {\n      key[lowbits(j)] = lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));\n    }\n\n    seed = '';\n\n    for (j in key) {\n      seed += String.fromCharCode(key[j]);\n    }\n\n    return seed;\n  } //\n  // lowbits()\n  // A quick \"n mod width\" for width a power of 2.\n  //\n\n\n  function lowbits(n) {\n    return n & width - 1;\n  } //\n  // The following constants are related to IEEE 754 limits.\n  //\n\n\n  startdenom = math.pow(width, chunks);\n  significance = math.pow(2, significance);\n  overflow = significance * 2;\n  mixkey(math.random(), pool); // End anonymous scope, and pass initial values.\n})([], // pool: entropy pool starts empty\ninternalMath, // math: package containing random, pow, and seedrandom\n256, // width: each RC4 output is 0 <= x < 256\n6, // chunks: at least six RC4 outputs for each double\n52 // significance: there are 52 significant digits in a double\n); //end seed\n\n/*\n\tPERLIN NOISE taken from the\n\t[toxi 040903]\n\toctaves and amplitude amount per octave are now user controlled\n\tvia the noiseDetail() function.\n\t[toxi 030902]\n\tcleaned up code and now using bagel's cosine table to speed up\n\t[toxi 030901]\n\timplementation by the german demo group farbrausch\n\tas used in their demo \"art\": http://www.farb-rausch.de/fr010src.zip\n*/\n\n\nvar PERLIN_YWRAPB = 4,\n    PERLIN_YWRAP = 1 << PERLIN_YWRAPB,\n    PERLIN_ZWRAPB = 8,\n    PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB,\n    PERLIN_SIZE = 4095,\n    PERLIN_MIN_AMPLITUDE = 0.001;\n/** @api private */\n\nvar _noise_fsc = function (self, i) {\n  var index = (i + 0.5) * self._perlin_PI % self._perlin_TWOPI;\n  return 0.5 * (1.0 - self._perlin_cosTable[index]);\n};\n/**\n * @module toxi/math/noise/PerlinNoise\n * @api public\n */\n\n\nvar PerlinNoise = function () {\n  this._perlin_octaves = 4; // default to medium smooth\n\n  this._perlin_amp_falloff = 0.5; // 50% reduction/octave\n\n  this._sinCosLUT = SinCosLUT.getDefaultInstance();\n};\n\nPerlinNoise.prototype = {\n  /**\n  noise\n  @api public\n  @param [x=0] x is optional\n  @param [y=0] y is optional\n  @param [z=0] z is optional\n  */\n  noise: function (x, y, z) {\n    var i = 0;\n    x = x || 0;\n    y = y || 0;\n    z = z || 0;\n\n    if (!this._perlin) {\n      this._perlin = hasTypedArrays ? new Float32Array(PERLIN_SIZE) : [];\n      var length = PERLIN_SIZE - 1;\n\n      for (i = 0; i < PERLIN_SIZE + 1; i++) {\n        this._perlin[i] = internalMath.random();\n      }\n    }\n\n    this._perlin_cosTable = this._sinCosLUT.getSinLUT();\n    this._perlin_TWOPI = this._perlin_PI = this._sinCosLUT.getPeriod();\n    this._perlin_PI >>= 1;\n\n    if (x < 0) {\n      x = -x;\n    }\n\n    if (y < 0) {\n      y = -y;\n    }\n\n    if (z < 0) {\n      z = -z;\n    }\n\n    var xi = x,\n        yi = y,\n        zi = z,\n        xf = x - xi,\n        yf = y - yi,\n        zf = z - zi,\n        rxf,\n        ryf,\n        r = 0,\n        ampl = 0.5,\n        n1,\n        n2,\n        n3,\n        of;\n\n    for (i = 0; i < this._perlin_octaves; i++) {\n      of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);\n      rxf = _noise_fsc(this, xf);\n      ryf = _noise_fsc(this, yf);\n      n1 = this._perlin[of & PERLIN_SIZE];\n      n1 += rxf * (this._perlin[of + 1 & PERLIN_SIZE] - n1);\n      n2 = this._perlin[of + PERLIN_YWRAP & PERLIN_SIZE];\n      n2 += rxf * (this._perlin[of + PERLIN_YWRAP + 1 & PERLIN_SIZE] - n2);\n      n1 += ryf * (n2 - n1);\n      of += PERLIN_ZWRAP;\n      n2 = this._perlin[of & PERLIN_SIZE];\n      n2 += rxf * (this._perlin[of + 1 & PERLIN_SIZE] - n2);\n      n3 = this._perlin[of + PERLIN_YWRAP & PERLIN_SIZE];\n      n3 += rxf * (this._perlin[of + PERLIN_YWRAP + 1 & PERLIN_SIZE] - n3);\n      n2 += ryf * (n3 - n2);\n      n1 += _noise_fsc(this, zf) * (n2 - n1);\n      r += n1 * ampl;\n      ampl *= this._perlin_amp_falloff; // break if amp has no more impact\n\n      if (ampl < PERLIN_MIN_AMPLITUDE) {\n        break;\n      }\n\n      xi <<= 1;\n      xf *= 2;\n      yi <<= 1;\n      yf *= 2;\n      zi <<= 1;\n      zf *= 2;\n\n      if (xf >= 1.0) {\n        xi++;\n        xf--;\n      }\n\n      if (yf >= 1.0) {\n        yi++;\n        yf--;\n      }\n\n      if (zf >= 1.0) {\n        zi++;\n        zf--;\n      }\n    }\n\n    return r;\n  },\n\n  /**\n  @api public\n  @param {Number} lod\n  @param {Number} falloff\n  */\n  noiseDetail: function (lod, falloff) {\n    if (lod > 0) {\n      this._perlin_octaves = lod;\n    }\n\n    if (falloff && falloff > 0) {\n      this._perlin_amp_falloff = falloff;\n    }\n  },\n\n  /**\n  @api public\n  @param {Number} [what] the random seed\n  */\n  noiseSeed: function (what) {\n    internalMath.seedrandom(what);\n  }\n};\nmodule.exports = PerlinNoise;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/math/noise/PerlinNoise.js"],"names":["SinCosLUT","require","hasTypedArrays","typedArrays","internalMath","pow","Math","random","pool","math","width","chunks","significance","overflow","startdenom","seedrandom","seed","use_entropy","key","arc4","mixkey","flatten","arguments","length","Date","getTime","window","ARC4","S","n","g","d","x","t","u","me","keylen","i","j","m","c","lowbits","getnext","count","s","r","obj","depth","result","prop","typ","indexOf","push","e","smear","charCodeAt","String","fromCharCode","PERLIN_YWRAPB","PERLIN_YWRAP","PERLIN_ZWRAPB","PERLIN_ZWRAP","PERLIN_SIZE","PERLIN_MIN_AMPLITUDE","_noise_fsc","self","index","_perlin_PI","_perlin_TWOPI","_perlin_cosTable","PerlinNoise","_perlin_octaves","_perlin_amp_falloff","_sinCosLUT","getDefaultInstance","prototype","noise","y","z","_perlin","Float32Array","getSinLUT","getPeriod","xi","yi","zi","xf","yf","zf","rxf","ryf","ampl","n1","n2","n3","of","noiseDetail","lod","falloff","noiseSeed","what","module","exports"],"mappings":"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","sourcesContent":["\n\nvar SinCosLUT = require('../SinCosLUT'),\n    hasTypedArrays = require('../../internals/has').typedArrays();\n\n/*\nUsing David Bau's seedrandom.js for PerlinNoise#noiseSeed functionality\n seedrandom.js version 2.0.\n Author: David Bau 4/2/2011\n http://davidbau.com/encode/seedrandom-min.js\n\n LICENSE (BSD):\n\n Copyright 2010 David Bau, all rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n\t1. Redistributions of source code must retain the above copyright\n\t\t\tnotice, this list of conditions and the following disclaimer.\n\n\t2. Redistributions in binary form must reproduce the above copyright\n\t\t\tnotice, this list of conditions and the following disclaimer in the\n\t\t\tdocumentation and/or other materials provided with the distribution.\n\n\t3. Neither the name of this module nor the names of its contributors may\n\t\t\tbe used to endorse or promote products derived from this software\n\t\t\twithout specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n * All code is in an anonymous closure to keep the global namespace clean.\n *\n * @param {number=} overflow\n * @param {number=} startdenom\n * @api private\n */\n var internalMath = {};\n internalMath.pow = Math.pow; //used by seed generator\n internalMath.random = Math.random; //start with the default random generator\n(function (pool, math, width, chunks, significance, overflow, startdenom) {\n\n\n/*\n\tseedrandom()\n\tThis is the seedrandom function described above.\n*/\nmath['seedrandom'] = function seedrandom(seed, use_entropy) {\n\tvar key = [];\n\tvar arc4;\n\n\t// Flatten the seed string or build one from local entropy if needed.\n\tseed = mixkey(flatten(\n\t\tuse_entropy ? [seed, pool] :\n\t\targuments.length ? seed :\n\t\t[new Date().getTime(), pool, window], 3), key);\n\n\t// Use the seed to initialize an ARC4 generator.\n\tarc4 = new ARC4(key);\n\n\t// Mix the randomness into accumulated entropy.\n\tmixkey(arc4.S, pool);\n\n\t// Override Math.random\n\n\t// This function returns a random double in [0, 1) that contains\n\t// randomness in every bit of the mantissa of the IEEE 754 value.\n\n\tmath['random'] = function random() {  // Closure to return a random double:\n\t\tvar n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48\n\t\tvar d = startdenom;                 //   and denominator d = 2 ^ 48.\n\t\tvar x = 0;                          //   and no 'extra last byte'.\n\t\twhile (n < significance) {          // Fill up all significant digits by\n\t\t\tn = (n + x) * width;              //   shifting numerator and\n\t\t\td *= width;                       //   denominator and generating a\n\t\t\tx = arc4.g(1);                    //   new least-significant-byte.\n\t\t}\n\t\twhile (n >= overflow) {             // To avoid rounding up, before adding\n\t\t\tn /= 2;                           //   last byte, shift everything\n\t\t\td /= 2;                           //   right using integer math until\n\t\t\tx >>>= 1;                         //   we have exactly the desired bits.\n\t\t}\n\t\treturn (n + x) / d;                 // Form the number within [0, 1).\n\t};\n\n\t// Return the seed that was used\n\treturn seed;\n};\n\n/** @constructor */\nfunction ARC4(key) {\n\tvar t, u, me = this, keylen = key.length;\n\tvar i = 0, j = me.i = me.j = me.m = 0;\n\tme.S = [];\n\tme.c = [];\n\n\t// The empty key [] is treated as [0].\n\tif (!keylen) { key = [keylen++]; }\n\n\t// Set up S using the standard key scheduling algorithm.\n\twhile (i < width) { me.S[i] = i++; }\n\tfor (i = 0; i < width; i++) {\n\t\tt = me.S[i];\n\t\tj = lowbits(j + t + key[i % keylen]);\n\t\tu = me.S[j];\n\t\tme.S[i] = u;\n\t\tme.S[j] = t;\n\t}\n\n\t// The \"g\" method returns the next (count) outputs as one number.\n\tme.g = function getnext(count) {\n\t\tvar s = me.S;\n\t\tvar i = lowbits(me.i + 1); var t = s[i];\n\t\tvar j = lowbits(me.j + t); var u = s[j];\n\t\ts[i] = u;\n\t\ts[j] = t;\n\t\tvar r = s[lowbits(t + u)];\n\t\twhile (--count) {\n\t\t\ti = lowbits(i + 1); t = s[i];\n\t\t\tj = lowbits(j + t); u = s[j];\n\t\t\ts[i] = u;\n\t\t\ts[j] = t;\n\t\t\tr = r * width + s[lowbits(t + u)];\n\t\t}\n\t\tme.i = i;\n\t\tme.j = j;\n\t\treturn r;\n\t};\n\t// For robust unpredictability discard an initial batch of values.\n\t// See http://www.rsa.com/rsalabs/node.asp?id=2009\n\tme.g(width);\n}\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\n/** @param {Object=} result\n\t* @param {string=} prop\n\t* @param {string=} typ\n\t*/\nfunction flatten(obj, depth, result, prop, typ) {\n\tresult = [];\n\ttyp = typeof(obj);\n\tif (depth && typ == 'object') {\n\t\tfor (prop in obj) {\n\t\t\tif (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)\n\t\t\t\ttry { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n\t\t\t}\n\t\t}\n\t}\n\treturn (result.length ? result : obj + (typ != 'string' ? '\\0' : ''));\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\n/** @param {number=} smear\n\t* @param {number=} j */\nfunction mixkey(seed, key, smear, j) {\n\tseed += '';                         // Ensure the seed is a string\n\tsmear = 0;\n\tfor (j = 0; j < seed.length; j++) {\n\t\tkey[lowbits(j)] =\n\t\t\tlowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));\n\t}\n\tseed = '';\n\tfor (j in key) { seed += String.fromCharCode(key[j]); }\n\treturn seed;\n}\n\n//\n// lowbits()\n// A quick \"n mod width\" for width a power of 2.\n//\nfunction lowbits(n) { return n & (width - 1); }\n\n//\n// The following constants are related to IEEE 754 limits.\n//\nstartdenom = math.pow(width, chunks);\nsignificance = math.pow(2, significance);\noverflow = significance * 2;\n\nmixkey(math.random(), pool);\n\n// End anonymous scope, and pass initial values.\n})(\n\t[],   // pool: entropy pool starts empty\n\tinternalMath, // math: package containing random, pow, and seedrandom\n\t256,  // width: each RC4 output is 0 <= x < 256\n\t6,    // chunks: at least six RC4 outputs for each double\n\t52    // significance: there are 52 significant digits in a double\n);\n//end seed\n\n\n\t/*\n\t\tPERLIN NOISE taken from the\n\t\t[toxi 040903]\n\t\toctaves and amplitude amount per octave are now user controlled\n\t\tvia the noiseDetail() function.\n\t\t[toxi 030902]\n\t\tcleaned up code and now using bagel's cosine table to speed up\n\t\t[toxi 030901]\n\t\timplementation by the german demo group farbrausch\n\t\tas used in their demo \"art\": http://www.farb-rausch.de/fr010src.zip\n\t*/\n\tvar PERLIN_YWRAPB = 4,\n\t\tPERLIN_YWRAP = 1 << PERLIN_YWRAPB,\n\t\tPERLIN_ZWRAPB = 8,\n\t\tPERLIN_ZWRAP = 1 << PERLIN_ZWRAPB,\n\t\tPERLIN_SIZE = 4095,\n\t\tPERLIN_MIN_AMPLITUDE = 0.001;\n\t/** @api private */\n\tvar\t_noise_fsc = function(self, i){\n\t\tvar index = ((i + 0.5) * self._perlin_PI) % self._perlin_TWOPI;\n\t\treturn 0.5 * (1.0 - self._perlin_cosTable[index]);\n\t};\n\n\t/**\n\t * @module toxi/math/noise/PerlinNoise\n\t * @api public\n\t */\n\tvar\tPerlinNoise = function(){\n\t\tthis._perlin_octaves = 4; // default to medium smooth\n\t\tthis._perlin_amp_falloff = 0.5; // 50% reduction/octave\n        this._sinCosLUT = SinCosLUT.getDefaultInstance();\n\t};\n\n\tPerlinNoise.prototype = {\n\t\t/**\n\t\tnoise\n\t\t@api public\n\t\t@param [x=0] x is optional\n\t\t@param [y=0] y is optional\n\t\t@param [z=0] z is optional\n\t\t*/\n\t\tnoise: function(x,y,z){\n\t\t\tvar i = 0;\n\t\t\tx = x || 0;\n\t\t\ty = y || 0;\n\t\t\tz = z || 0;\n\n\t\t\tif(!this._perlin){\n                this._perlin = hasTypedArrays ? new Float32Array( PERLIN_SIZE ) : [];\n\t\t\t\tvar length = PERLIN_SIZE - 1;\n\t\t\t\tfor(i = 0;i < PERLIN_SIZE + 1; i++){\n\t\t\t\t\tthis._perlin[i] = internalMath.random();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._perlin_cosTable = this._sinCosLUT.getSinLUT();\n\t\t\tthis._perlin_TWOPI = this._perlin_PI = this._sinCosLUT.getPeriod();\n\t\t\tthis._perlin_PI >>= 1;\n\n\t\t\tif (x < 0) {\n\t\t\t\tx = -x;\n\t\t\t}\n\t\t\tif (y < 0) {\n\t\t\t\ty = -y;\n\t\t\t}\n\t\t\tif (z < 0) {\n\t\t\t\tz = -z;\n\t\t\t}\n\n\t\t\tvar xi = x,\n\t\t\t\tyi = y,\n\t\t\t\tzi = z,\n\t\t\t\txf = (x - xi),\n\t\t\t\tyf = (y - yi),\n\t\t\t\tzf = (z - zi),\n\t\t\t\trxf,\n\t\t\t\tryf,\n\t\t\t\tr = 0,\n\t\t\t\tampl = 0.5,\n\t\t\t\tn1,\n\t\t\t\tn2,\n\t\t\t\tn3,\n\t\t\t\tof;\n\t\t\tfor(i = 0; i < this._perlin_octaves; i++){\n\t\t\t\tof = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);\n\t\t\t\trxf = _noise_fsc(this,xf);\n\t\t\t\tryf = _noise_fsc(this,yf);\n\n\t\t\t\tn1 = this._perlin[of & PERLIN_SIZE];\n\t\t\t\tn1 += rxf * (this._perlin[(of + 1) & PERLIN_SIZE] - n1);\n\t\t\t\tn2 = this._perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n\t\t\t\tn2 += rxf * (this._perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2);\n\t\t\t\tn1 += ryf * (n2 - n1);\n\n\t\t\t\tof += PERLIN_ZWRAP;\n\t\t\t\tn2 = this._perlin[of & PERLIN_SIZE];\n\t\t\t\tn2 += rxf * (this._perlin[(of + 1) & PERLIN_SIZE] - n2);\n\t\t\t\tn3 = this._perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n\t\t\t\tn3 += rxf * (this._perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3);\n\t\t\t\tn2 += ryf * (n3 - n2);\n\n\t\t\t\tn1 += _noise_fsc(this,zf) * (n2 - n1);\n\n\t\t\t\tr += n1 * ampl;\n\t\t\t\tampl *= this._perlin_amp_falloff;\n\n\t\t\t\t// break if amp has no more impact\n\t\t\t\tif (ampl < PERLIN_MIN_AMPLITUDE) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\txi <<= 1;\n\t\t\t\txf *= 2;\n\t\t\t\tyi <<= 1;\n\t\t\t\tyf *= 2;\n\t\t\t\tzi <<= 1;\n\t\t\t\tzf *= 2;\n\n\t\t\t\tif (xf >= 1.0) {\n\t\t\t\t\txi++;\n\t\t\t\t\txf--;\n\t\t\t\t}\n\t\t\t\tif (yf >= 1.0) {\n\t\t\t\t\tyi++;\n\t\t\t\t\tyf--;\n\t\t\t\t}\n\t\t\t\tif (zf >= 1.0) {\n\t\t\t\t\tzi++;\n\t\t\t\t\tzf--;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r;\n\t\t},\n\t\t/**\n\t\t@api public\n\t\t@param {Number} lod\n\t\t@param {Number} falloff\n\t\t*/\n\t\tnoiseDetail: function(lod, falloff){\n\t\t\tif(lod > 0){\n\t\t\t\tthis._perlin_octaves = lod;\n\t\t\t}\n\t\t\tif(falloff && falloff > 0){\n\t\t\t\tthis._perlin_amp_falloff = falloff;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t@api public\n\t\t@param {Number} [what] the random seed\n\t\t*/\n\t\tnoiseSeed: function(what){\n\t\t\tinternalMath.seedrandom(what);\n\t\t}\n\t};\n\n\tmodule.exports = PerlinNoise;\n\n"]},"metadata":{},"sourceType":"script"}