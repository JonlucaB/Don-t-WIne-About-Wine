{"ast":null,"code":"var extend = require('../internals').extend,\n    Vec2D = require('./Vec2D'),\n    Line2D = require('./Line2D');\n/**\n* Ray2D accepts 2 formats for its constructor\n* Option 1:\n* @param {Number} x,\n* @param {Number} y,\n* @param {toxi.geom.Vec2D} direction\n*\n* Option 2:\n* @param {toxi.geom.Vec2D} position\n* @param {toxi.geom.Vec2D} direction\n*/\n\n\nvar Ray2D = function (a, b, d) {\n  var o, dir;\n\n  if (arguments.length == 3) {\n    Vec2D.apply(this, [a, b]);\n    this.dir = d.getNormalized();\n  } else if (arguments.length == 2) {\n    Vec2D.apply(this, [a]);\n    this.dir = b.getNormalized();\n  } else if (arguments.length === 0) {\n    Vec2D.apply(this);\n    this.dir = Vec2D.Y_AXIS.copy();\n  }\n};\n\nextend(Ray2D, Vec2D);\n\nRay2D.prototype.getDirection = function () {\n  return this.dir.copy();\n};\n/**\n * Calculates the distance between the given point and the infinite line\n * coinciding with this ray.\n */\n\n\nRay2D.prototype.getDistanceToPoint = function (p) {\n  var sp = p.sub(this);\n  return sp.distanceTo(this.dir.scale(sp.dot(this.dir)));\n};\n\nRay2D.prototype.getPointAtDistance = function (dist) {\n  return this.add(this.dir.scale(dist));\n};\n/**\n * Uses a normalized copy of the given vector as the ray direction.\n *\n * @param d new direction\n * @return itself\n */\n\n\nRay2D.prototype.setDirection = function (d) {\n  this.dir.set(d).normalize();\n  return this;\n};\n/**\n * Converts the ray into a 2D Line segment with its start point coinciding\n * with the ray origin and its other end point at the given distance along\n * the ray.\n *\n * @param dist end point distance\n * @return line segment\n */\n\n\nRay2D.prototype.toLine2DWithPointAtDistance = function (dist) {\n  var Line2D = require('./Line2D');\n\n  return new Line2D(this, this.getPointAtDistance(dist));\n};\n\nRay2D.prototype.toString = function () {\n  return \"origin: \" + Vec2D.prototype.toString.apply(this) + \" dir: \" + this.dir;\n};\n\nmodule.exports = Ray2D;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/geom/Ray2D.js"],"names":["extend","require","Vec2D","Line2D","Ray2D","a","b","d","o","dir","arguments","length","apply","getNormalized","Y_AXIS","copy","prototype","getDirection","getDistanceToPoint","p","sp","sub","distanceTo","scale","dot","getPointAtDistance","dist","add","setDirection","set","normalize","toLine2DWithPointAtDistance","toString","module","exports"],"mappings":"AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,MAArC;AAAA,IACCE,KAAK,GAAGD,OAAO,CAAC,SAAD,CADhB;AAAA,IAECE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAFjB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIG,KAAK,GAAG,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAe;AAC1B,MAAIC,CAAJ,EAAOC,GAAP;;AACA,MAAGC,SAAS,CAACC,MAAV,IAAoB,CAAvB,EAAyB;AACxBT,IAAAA,KAAK,CAACU,KAAN,CAAY,IAAZ,EAAiB,CAACP,CAAD,EAAGC,CAAH,CAAjB;AACA,SAAKG,GAAL,GAAWF,CAAC,CAACM,aAAF,EAAX;AACA,GAHD,MAGO,IAAGH,SAAS,CAACC,MAAV,IAAoB,CAAvB,EAAyB;AAC/BT,IAAAA,KAAK,CAACU,KAAN,CAAY,IAAZ,EAAiB,CAACP,CAAD,CAAjB;AACA,SAAKI,GAAL,GAAWH,CAAC,CAACO,aAAF,EAAX;AACA,GAHM,MAGA,IAAGH,SAAS,CAACC,MAAV,KAAqB,CAAxB,EAA0B;AAChCT,IAAAA,KAAK,CAACU,KAAN,CAAY,IAAZ;AACA,SAAKH,GAAL,GAAWP,KAAK,CAACY,MAAN,CAAaC,IAAb,EAAX;AACA;AACD,CAZD;;AAaAf,MAAM,CAACI,KAAD,EAAOF,KAAP,CAAN;;AAEAE,KAAK,CAACY,SAAN,CAAgBC,YAAhB,GAA+B,YAAW;AACvC,SAAO,KAAKR,GAAL,CAASM,IAAT,EAAP;AACF,CAFD;AAGA;AACA;AACA;AACA;;;AACAX,KAAK,CAACY,SAAN,CAAgBE,kBAAhB,GAAqC,UAASC,CAAT,EAAY;AAChD,MAAIC,EAAE,GAAGD,CAAC,CAACE,GAAF,CAAM,IAAN,CAAT;AACA,SAAOD,EAAE,CAACE,UAAH,CAAc,KAAKb,GAAL,CAASc,KAAT,CAAeH,EAAE,CAACI,GAAH,CAAO,KAAKf,GAAZ,CAAf,CAAd,CAAP;AACA,CAHD;;AAKAL,KAAK,CAACY,SAAN,CAAgBS,kBAAhB,GAAqC,UAASC,IAAT,EAAe;AACnD,SAAO,KAAKC,GAAL,CAAS,KAAKlB,GAAL,CAASc,KAAT,CAAeG,IAAf,CAAT,CAAP;AACA,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAtB,KAAK,CAACY,SAAN,CAAgBY,YAAhB,GAA+B,UAASrB,CAAT,EAAY;AAC1C,OAAKE,GAAL,CAASoB,GAAT,CAAatB,CAAb,EAAgBuB,SAAhB;AACA,SAAO,IAAP;AACA,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,KAAK,CAACY,SAAN,CAAgBe,2BAAhB,GAA8C,UAASL,IAAT,EAAe;AAC5D,MAAIvB,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,SAAO,IAAIE,MAAJ,CAAW,IAAX,EAAiB,KAAKsB,kBAAL,CAAwBC,IAAxB,CAAjB,CAAP;AACA,CAHD;;AAKAtB,KAAK,CAACY,SAAN,CAAgBgB,QAAhB,GAA2B,YAAW;AACrC,SAAO,aAAa9B,KAAK,CAACc,SAAN,CAAgBgB,QAAhB,CAAyBpB,KAAzB,CAA+B,IAA/B,CAAb,GAAoD,QAApD,GAA+D,KAAKH,GAA3E;AACA,CAFD;;AAIAwB,MAAM,CAACC,OAAP,GAAiB9B,KAAjB","sourcesContent":["\n\nvar extend = require('../internals').extend,\n\tVec2D = require('./Vec2D'),\n\tLine2D = require('./Line2D');\n\n/**\n* Ray2D accepts 2 formats for its constructor\n* Option 1:\n* @param {Number} x,\n* @param {Number} y,\n* @param {toxi.geom.Vec2D} direction\n*\n* Option 2:\n* @param {toxi.geom.Vec2D} position\n* @param {toxi.geom.Vec2D} direction\n*/\nvar\tRay2D = function(a,b,d){\n\tvar o, dir;\n\tif(arguments.length == 3){\n\t\tVec2D.apply(this,[a,b]);\n\t\tthis.dir = d.getNormalized();\n\t} else if(arguments.length == 2){\n\t\tVec2D.apply(this,[a]);\n\t\tthis.dir = b.getNormalized();\n\t} else if(arguments.length === 0){\n\t\tVec2D.apply(this);\n\t\tthis.dir = Vec2D.Y_AXIS.copy();\n\t}\n};\nextend(Ray2D,Vec2D);\n\nRay2D.prototype.getDirection = function() {\n\t  return this.dir.copy();\n};\n/**\n * Calculates the distance between the given point and the infinite line\n * coinciding with this ray.\n */\nRay2D.prototype.getDistanceToPoint = function(p) {\n\tvar sp = p.sub(this);\n\treturn sp.distanceTo(this.dir.scale(sp.dot(this.dir)));\n};\n\nRay2D.prototype.getPointAtDistance = function(dist) {\n\treturn this.add(this.dir.scale(dist));\n};\n\n/**\n * Uses a normalized copy of the given vector as the ray direction.\n *\n * @param d new direction\n * @return itself\n */\nRay2D.prototype.setDirection = function(d) {\n\tthis.dir.set(d).normalize();\n\treturn this;\n};\n\n/**\n * Converts the ray into a 2D Line segment with its start point coinciding\n * with the ray origin and its other end point at the given distance along\n * the ray.\n *\n * @param dist end point distance\n * @return line segment\n */\nRay2D.prototype.toLine2DWithPointAtDistance = function(dist) {\n\tvar Line2D = require('./Line2D');\n\treturn new Line2D(this, this.getPointAtDistance(dist));\n};\n\nRay2D.prototype.toString = function() {\n\treturn \"origin: \" + Vec2D.prototype.toString.apply(this) + \" dir: \" + this.dir;\n};\n\nmodule.exports = Ray2D;\n\n"]},"metadata":{},"sourceType":"script"}