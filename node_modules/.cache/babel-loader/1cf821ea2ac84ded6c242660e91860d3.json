{"ast":null,"code":"var each = require('../internals/each');\n\nvar MathUtils = require('../math/mathUtils');\n\nvar ColorRange = require('./ColorRange');\n\nvar NamedColor = require('./namedColor');\n\nvar ColorList = require('./ColorList');\n\nvar ColorTheme, _ThemePart;\n/**\n * @private\n * internal object for a part of the theme\n * @param {ColorRange} range\n * @param {TColor} color.\n * @param {Number} weight\n */\n\n\n_ThemePart = function (range, color, weight) {\n  this.range = range;\n  this.color = color;\n  this.weight = weight;\n};\n\n_ThemePart.prototype.getColor = function () {\n  return this.range.getColor(this.color, ColorRange.DEFAULT_VARIANCE);\n};\n/**\n* A ColorTheme is a weighted collection of {@link ColorRange}s used to define\n* custom palettes with a certain balance between individual colors/shades. New\n* theme parts can be added via textual descriptors referring to one of the\n* preset {@link ColorRange}s and/or {@link NamedColor}s: e.g.\n* \"warm springgreen\". For each theme part a weight has to be specified. The\n* magnitude of the weight value is irrelevant and is only important in relation\n* to the weights of other theme parts. For example: Theme part A with a weight\n* of 0.5 will only have 1/20 of the weight of theme part B with a weight of 5.0...\n*/\n\n\nColorTheme = function (name) {\n  this.name = name;\n  this.parts = [];\n  this._weightedSum = 0;\n};\n\nColorTheme.prototype = {\n  constructor: ColorTheme,\n\n  /**\n   * Add a range to the theme, 2 paramater options:\n   * @param {toxi.color.ColorRange|string} range_or_descriptor either a range\n   * or a tokenized string\n   * @param {toxi.color.TColor|Number} color_or_weight a color if you provided\n   * a ColorRange, or a weight if specified a descriptor\n   * @param {Number} [weight] a weight if you specified a ColorRange and a TColor\n   * for former parameters\n   * @return itself\n   */\n  addRange: function (range_or_descriptor, color_or_weight, weight) {\n    var self = this;\n\n    var _range, _col;\n\n    if (arguments.length === 3) {\n      this.parts.push(new _ThemePart(range_or_descriptor, color_or_weight, weight));\n      this._weightedSum += weight;\n    } else {\n      //tokenize\n      each(range_or_descriptor.split(' '), function (item) {\n        if (ColorRange.getPresetForName(item)) {\n          _range = ColorRange.getPresetForName(item);\n        } else if (NamedColor.getForName(item)) {\n          _col = NamedColor.getForName(item);\n        }\n      });\n\n      if (_range) {\n        self.addRange(_range, _col, color_or_weight);\n      }\n    }\n\n    return this;\n  },\n  getColor: function () {\n    var self = this,\n        rnd = Math.random(),\n        t,\n        currWeight;\n\n    for (var i = 0, l = this.parts.length; i < l; i++) {\n      t = this.parts[i];\n      currWeight = t.weight / this._weightedSum;\n\n      if (currWeight >= rnd) {\n        return t.getColor();\n      }\n\n      rnd -= currWeight;\n    }\n\n    return null;\n  },\n\n  /**\n   * Creates a {ColorList} of {TColor} based on the theme's\n   * ranges and balance defined by their weights\n   * @param {Number} num the number of colors to put in the list\n   */\n  getColors: function (num) {\n    var list = new ColorList();\n\n    for (var i = 0; i < num; i++) {\n      list.add(this.getColor());\n    }\n\n    return list;\n  },\n\n  /**\n   * @return the theme's name\n   */\n  getName: function () {\n    return this.name;\n  }\n};\nmodule.exports = ColorTheme;","map":{"version":3,"sources":["C:/Users/jonlu/node_modules/toxiclibsjs/color/ColorTheme.js"],"names":["each","require","MathUtils","ColorRange","NamedColor","ColorList","ColorTheme","_ThemePart","range","color","weight","prototype","getColor","DEFAULT_VARIANCE","name","parts","_weightedSum","constructor","addRange","range_or_descriptor","color_or_weight","self","_range","_col","arguments","length","push","split","item","getPresetForName","getForName","rnd","Math","random","t","currWeight","i","l","getColors","num","list","add","getName","module","exports"],"mappings":"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","sourcesContent":["var each = require('../internals/each');\nvar MathUtils = require('../math/mathUtils');\nvar ColorRange = require('./ColorRange');\nvar NamedColor = require('./namedColor');\nvar ColorList = require('./ColorList');\n\n\n    var ColorTheme, _ThemePart;\n\n\n    /**\n     * @private\n     * internal object for a part of the theme\n     * @param {ColorRange} range\n     * @param {TColor} color.\n     * @param {Number} weight\n     */\n    _ThemePart = function( range, color, weight ){\n        this.range = range;\n        this.color = color;\n        this.weight = weight;\n    };\n    _ThemePart.prototype.getColor = function(){\n        return this.range.getColor(this.color, ColorRange.DEFAULT_VARIANCE);\n    };\n\n    /**\n    * A ColorTheme is a weighted collection of {@link ColorRange}s used to define\n    * custom palettes with a certain balance between individual colors/shades. New\n    * theme parts can be added via textual descriptors referring to one of the\n    * preset {@link ColorRange}s and/or {@link NamedColor}s: e.g.\n    * \"warm springgreen\". For each theme part a weight has to be specified. The\n    * magnitude of the weight value is irrelevant and is only important in relation\n    * to the weights of other theme parts. For example: Theme part A with a weight\n    * of 0.5 will only have 1/20 of the weight of theme part B with a weight of 5.0...\n    */\n    ColorTheme = function( name ){\n        this.name = name;\n        this.parts = [];\n        this._weightedSum = 0;\n    };\n\n    ColorTheme.prototype = {\n        constructor: ColorTheme,\n        /**\n         * Add a range to the theme, 2 paramater options:\n         * @param {toxi.color.ColorRange|string} range_or_descriptor either a range\n         * or a tokenized string\n         * @param {toxi.color.TColor|Number} color_or_weight a color if you provided\n         * a ColorRange, or a weight if specified a descriptor\n         * @param {Number} [weight] a weight if you specified a ColorRange and a TColor\n         * for former parameters\n         * @return itself\n         */\n        addRange: function( range_or_descriptor, color_or_weight, weight ){\n            var self = this;\n            var _range, _col;\n            if( arguments.length === 3 ){\n                this.parts.push( new _ThemePart(range_or_descriptor, color_or_weight, weight) );\n                this._weightedSum += weight;\n            } else {\n                //tokenize\n                each(range_or_descriptor.split(' '), function( item ){\n                    if( ColorRange.getPresetForName(item) ){\n                        _range = ColorRange.getPresetForName(item);\n                    } else if ( NamedColor.getForName(item) ){\n                       _col = NamedColor.getForName(item);\n                    }\n                });\n                if( _range ){\n                    self.addRange( _range, _col, color_or_weight );\n                }\n            }\n            return this;\n        },\n        getColor: function(){\n            var self = this,\n                rnd = Math.random(),\n                t,\n                currWeight;\n            for( var i = 0, l = this.parts.length; i<l; i++){\n                t = this.parts[i];\n                currWeight = t.weight / this._weightedSum;\n                if( currWeight >= rnd ){\n                    return t.getColor();\n                }\n                rnd -= currWeight;\n            }\n            return null;\n        },\n        /**\n         * Creates a {ColorList} of {TColor} based on the theme's\n         * ranges and balance defined by their weights\n         * @param {Number} num the number of colors to put in the list\n         */\n        getColors: function( num ){\n           var list = new ColorList();\n           for( var i = 0; i < num; i++) {\n               list.add( this.getColor() );\n            }\n           return list;\n        },\n        /**\n         * @return the theme's name\n         */\n        getName: function(){\n            return this.name;\n        }\n    };\n\n    module.exports = ColorTheme;\n\n"]},"metadata":{},"sourceType":"script"}