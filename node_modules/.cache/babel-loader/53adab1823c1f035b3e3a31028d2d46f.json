{"ast":null,"code":"var mathUtils = require('./mathUtils');\n\nvar CircularInterpolation = require('./CircularInterpolation');\n/**\n* @class This class provides an adjustable zoom lens to either bundle or dilate values\n* around a focal point within a given interval. For a example use cases, please\n* have a look at the provided ScaleMapDataViz and ZoomLens examples.\n* @member toxi\n*/\n\n\nvar ZoomLensInterpolation = function (lensPos, lensStrength) {\n  this.leftImpl = new CircularInterpolation();\n  this.rightImpl = new CircularInterpolation();\n  this.lensPos = lensPos || 0.5;\n  this.lensStrength = lensStrength || 1;\n  this.absStrength = Math.abs(this.lensStrength);\n  this.leftImpl.setFlipped(this.lensStrength > 0);\n  this.rightImpl.setFlipped(this.lensStrength < 0);\n};\n\nZoomLensInterpolation.prototype = {\n  interpolate: function (min, max, t) {\n    var val = min + (max - min) * t;\n\n    if (t < this.lensPos) {\n      val += (this.leftImpl.interpolate(min, min + (max - min) * this.lensPos, t / this.lensPos) - val) * this.absStrength;\n    } else {\n      val += (this.rightImpl.interpolate(min + (max - min) * this.lensPos, max, (t - this.lensPos) / (1 - this.lensPos)) - val) * this.absStrength;\n    }\n\n    return val;\n  },\n  setLensPos: function (pos, smooth) {\n    this.lensPos += (mathUtils.clipNormalized(pos) - this.lensPos) * smooth;\n  },\n  setLensStrength: function (str, smooth) {\n    this.lensStrength += (mathUtils.clip(str, -1, 1) - this.lensStrength) * smooth;\n    this.absStrength = mathUtils.abs(this.lensStrength);\n    this.leftImpl.setFlipped(this.lensStrength > 0);\n    this.rightImpl.setFlipped(this.lensStrength < 0);\n  }\n};\nmodule.exports = ZoomLensInterpolation;","map":{"version":3,"sources":["C:/Users/alfor/Documents/GitHub/Don-t-WIne-About-Wine/node_modules/toxiclibsjs/math/ZoomLensInterpolation.js"],"names":["mathUtils","require","CircularInterpolation","ZoomLensInterpolation","lensPos","lensStrength","leftImpl","rightImpl","absStrength","Math","abs","setFlipped","prototype","interpolate","min","max","t","val","setLensPos","pos","smooth","clipNormalized","setLensStrength","str","clip","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAAnC;AAGI;AACJ;AACA;AACA;AACA;AACA;;;AACI,IAAIE,qBAAqB,GAAG,UAASC,OAAT,EAAkBC,YAAlB,EAAgC;AACxD,OAAKC,QAAL,GAAgB,IAAIJ,qBAAJ,EAAhB;AACA,OAAKK,SAAL,GAAiB,IAAIL,qBAAJ,EAAjB;AACA,OAAKE,OAAL,GAAeA,OAAO,IAAI,GAA1B;AACA,OAAKC,YAAL,GAAoBA,YAAY,IAAI,CAApC;AACA,OAAKG,WAAL,GAAmBC,IAAI,CAACC,GAAL,CAAS,KAAKL,YAAd,CAAnB;AACA,OAAKC,QAAL,CAAcK,UAAd,CAAyB,KAAKN,YAAL,GAAoB,CAA7C;AACA,OAAKE,SAAL,CAAeI,UAAf,CAA0B,KAAKN,YAAL,GAAoB,CAA9C;AACH,CARD;;AAUAF,qBAAqB,CAACS,SAAtB,GAAkC;AAC9BC,EAAAA,WAAW,EAAE,UAASC,GAAT,EAAaC,GAAb,EAAiBC,CAAjB,EAAoB;AAC7B,QAAIC,GAAG,GAAGH,GAAG,GAAG,CAACC,GAAG,GAAGD,GAAP,IAAcE,CAA9B;;AACA,QAAIA,CAAC,GAAG,KAAKZ,OAAb,EAAsB;AAClBa,MAAAA,GAAG,IAAI,CAAC,KAAKX,QAAL,CAAcO,WAAd,CAA0BC,GAA1B,EAA+BA,GAAG,GAAG,CAACC,GAAG,GAAGD,GAAP,IAAc,KAAKV,OAAxD,EAAiEY,CAAC,GAAE,KAAKZ,OAAzE,IAAoFa,GAArF,IAA2F,KAAKT,WAAvG;AACH,KAFD,MAEO;AACHS,MAAAA,GAAG,IAAI,CAAC,KAAKV,SAAL,CAAeM,WAAf,CAA2BC,GAAG,GAAG,CAACC,GAAG,GAAGD,GAAP,IAAc,KAAKV,OAApD,EAA6DW,GAA7D,EAAiE,CAACC,CAAC,GAAG,KAAKZ,OAAV,KAAsB,IAAI,KAAKA,OAA/B,CAAjE,IAA4Ga,GAA7G,IAAoH,KAAKT,WAAhI;AACH;;AACD,WAAOS,GAAP;AACH,GAT6B;AAW9BC,EAAAA,UAAU,EAAE,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAC9B,SAAKhB,OAAL,IAAgB,CAACJ,SAAS,CAACqB,cAAV,CAAyBF,GAAzB,IAAgC,KAAKf,OAAtC,IAAiDgB,MAAjE;AACH,GAb6B;AAe9BE,EAAAA,eAAe,EAAE,UAASC,GAAT,EAAcH,MAAd,EAAsB;AACnC,SAAKf,YAAL,IAAqB,CAACL,SAAS,CAACwB,IAAV,CAAeD,GAAf,EAAoB,CAAC,CAArB,EAAwB,CAAxB,IAA6B,KAAKlB,YAAnC,IAAmDe,MAAxE;AACA,SAAKZ,WAAL,GAAmBR,SAAS,CAACU,GAAV,CAAc,KAAKL,YAAnB,CAAnB;AACA,SAAKC,QAAL,CAAcK,UAAd,CAAyB,KAAKN,YAAL,GAAoB,CAA7C;AACA,SAAKE,SAAL,CAAeI,UAAf,CAA0B,KAAKN,YAAL,GAAoB,CAA9C;AACH;AApB6B,CAAlC;AAuBAoB,MAAM,CAACC,OAAP,GAAiBvB,qBAAjB","sourcesContent":["var mathUtils = require('./mathUtils');\nvar CircularInterpolation = require('./CircularInterpolation');\n\n\n    /**\n    * @class This class provides an adjustable zoom lens to either bundle or dilate values\n    * around a focal point within a given interval. For a example use cases, please\n    * have a look at the provided ScaleMapDataViz and ZoomLens examples.\n    * @member toxi\n    */\n    var\tZoomLensInterpolation = function(lensPos, lensStrength) {\n        this.leftImpl = new CircularInterpolation();\n        this.rightImpl = new CircularInterpolation();\n        this.lensPos = lensPos || 0.5;\n        this.lensStrength = lensStrength || 1;\n        this.absStrength = Math.abs(this.lensStrength);\n        this.leftImpl.setFlipped(this.lensStrength > 0);\n        this.rightImpl.setFlipped(this.lensStrength < 0);\n    };\n\n    ZoomLensInterpolation.prototype = {\n        interpolate: function(min,max,t) {\n            var val = min + (max - min) * t;\n            if (t < this.lensPos) {\n                val += (this.leftImpl.interpolate(min, min + (max - min) * this.lensPos, t/ this.lensPos) - val)* this.absStrength;\n            } else {\n                val += (this.rightImpl.interpolate(min + (max - min) * this.lensPos, max,(t - this.lensPos) / (1 - this.lensPos)) - val) * this.absStrength;\n            }\n            return val;\n        },\n\n        setLensPos: function(pos, smooth) {\n            this.lensPos += (mathUtils.clipNormalized(pos) - this.lensPos) * smooth;\n        },\n\n        setLensStrength: function(str, smooth) {\n            this.lensStrength += (mathUtils.clip(str, -1, 1) - this.lensStrength) * smooth;\n            this.absStrength = mathUtils.abs(this.lensStrength);\n            this.leftImpl.setFlipped(this.lensStrength > 0);\n            this.rightImpl.setFlipped(this.lensStrength < 0);\n        }\n    };\n\n    module.exports = ZoomLensInterpolation;\n\n\n"]},"metadata":{},"sourceType":"script"}